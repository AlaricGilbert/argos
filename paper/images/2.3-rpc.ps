%!PS-Adobe-3.1
%ADO_DSC_Encoding: Windows Roman
%%Title: images.pdf
%%Creator: Adobe Acrobat 21.7.0
%%For: Alaric
%%CreationDate: 2022/5/18, 3:09:04
%%BoundingBox: 0 0 458 271
%%HiResBoundingBox: 0 0 457.3270 270.0038
%%CropBox: 0 0 457.3270 270.0038
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1080 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.0-c000 79.1357c9e, 2021/07/14-00:39:56        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   pdf:Producer="Microsoft® PowerPoint® 适用于 Microsoft 365"
   dc:format="application/pdf"
   xmp:CreatorTool="Microsoft® PowerPoint® 适用于 Microsoft 365"
   xmp:CreateDate="2022-05-18T03:08:05+08:00"
   xmp:ModifyDate="2022-05-18T03:08:05+08:00"
   xmpMM:DocumentID="uuid:A798BF01-2EB6-4C2A-B7DB-BAC8406920FF"
   xmpMM:InstanceID="uuid:A798BF01-2EB6-4C2A-B7DB-BAC8406920FF">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint 演示文稿</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>许 皓钦</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 5 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
<</PageSize [457.327 270.004 ] >> setpagedevice
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -270.004 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
1.52588e-5 0 mo
1.52588e-5 270.004 li
457.327 270.004 li
457.327 0 li
cp
clp
gsave
-.63739 270.76 mo
457.363 270.76 li
457.363 -.240204 li
-.63739 -.240204 li
cp
clp
-73.6374 474.76 mo
886.363 474.76 li
886.363 -65.2403 li
-73.6374 -65.2403 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
17.5626 31.8998 mo
17.5626 16.1598 30.3226 3.39981 46.0626 3.39981 cv
160.063 3.39981 li
175.803 3.39981 188.563 16.1598 188.563 31.8998 cv
188.563 204.82 li
188.563 220.56 175.803 233.32 160.063 233.32 cv
46.0626 233.32 li
30.3226 233.32 17.5626 220.56 17.5626 204.82 cv
cp
/1 
[/DeviceCMYK] /CSA add_res
.326726 .167941 0 0 cmyk
ef
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
17.5626 31.8998 mo
17.5626 16.1598 30.3226 3.39981 46.0626 3.39981 cv
160.063 3.39981 li
175.803 3.39981 188.563 16.1598 188.563 31.8998 cv
188.563 204.82 li
188.563 220.56 175.803 233.32 160.063 233.32 cv
46.0626 233.32 li
30.3226 233.32 17.5626 220.56 17.5626 204.82 cv
cp
.780392 .516258 .233249 0 cmyk
@
71.0826 93.9398 mo
75.1926 93.9398 li
75.1926 62.1998 li
83.4126 62.1998 li
83.4126 93.9398 li
87.5226 93.9398 li
79.3026 102.16 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
71.0826 93.9398 mo
75.1926 93.9398 li
75.1926 62.1998 li
83.4126 62.1998 li
83.4126 93.9398 li
87.5226 93.9398 li
79.3026 102.16 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
gsave
41.3226 29.9198 mo
41.3226 62.1998 li
165.523 62.1998 li
165.523 29.9198 li
41.3226 29.9198 li
cp
-73.6374 -65.2402 mo
886.363 -65.2402 li
886.363 474.76 li
-73.6374 474.76 li
-73.6374 -65.2402 li
cp
eclp
43.4426 64.3198 mo
167.643 64.3198 li
167.643 32.0398 li
43.4426 32.0398 li
cp
ef
grestore
gsave
41.3226 29.9198 mo
41.3226 62.1998 li
165.523 62.1998 li
165.523 29.9198 li
41.3226 29.9198 li
cp
-73.6374 -65.2402 mo
886.363 -65.2402 li
886.363 474.76 li
-73.6374 474.76 li
-73.6374 -65.2402 li
cp
eclp
43.9426 32.5398 mo
43.9426 63.8198 li
167.143 63.8198 li
167.143 32.5398 li
cp
42.9426 31.5398 mo
168.143 31.5398 li
168.143 64.8198 li
42.9426 64.8198 li
cp
ef
grestore
gsave
41.3226 29.9198 mo
41.3226 62.1998 li
165.523 62.1998 li
165.523 29.9198 li
41.3226 29.9198 li
cp
-73.6374 -65.2402 mo
886.363 -65.2402 li
886.363 474.76 li
-73.6374 474.76 li
-73.6374 -65.2402 li
cp
eclp
81.8026 53.5798 mo
81.8026 54.1298 81.8326 54.7898 81.9126 55.5598 cv
80.7526 55.5598 li
80.7526 54.7298 li
75.1126 54.7298 li
75.1126 55.6098 li
73.9526 55.6098 li
73.9926 54.8398 74.0126 54.1998 74.0126 53.6898 cv
74.0126 52.4298 li
74.0126 52.2098 73.9926 51.8798 73.9526 51.4398 cv
73.7026 51.5498 72.9126 51.8098 71.6026 52.2098 cv
71.4926 51.7698 71.3026 51.3498 71.0526 50.9498 cv
72.3626 50.7698 73.4626 50.5598 74.3426 50.3498 cv
75.2226 50.1298 76.0426 49.8098 76.8126 49.4098 cv
76.3726 49.1898 75.7126 48.7198 74.8326 47.9898 cv
74.3926 48.4298 73.9026 48.8598 73.3526 49.2998 cv
73.0926 48.9398 72.7826 48.6598 72.4226 48.4798 cv
73.1926 47.9998 73.8526 47.4698 74.4226 46.8598 cv
74.9926 46.2598 75.4026 45.6498 75.6526 45.0298 cv
76.1326 45.2398 76.6026 45.4298 77.0826 45.5698 cv
76.8626 45.7198 76.6026 45.9598 76.3126 46.2898 cv
81.5826 46.2898 li
81.1826 46.9098 80.7926 47.4298 80.4326 47.8498 cv
80.0626 48.2698 79.4926 48.7898 78.7326 49.4098 cv
79.2426 49.6298 79.9226 49.8498 80.7826 50.0698 cv
81.6426 50.2898 82.7526 50.4398 84.1026 50.5098 cv
83.8426 50.9498 83.6826 51.4098 83.6126 51.8798 cv
82.9126 51.6998 82.3526 51.5498 81.9126 51.4398 cv
81.8326 51.8098 81.8026 52.1898 81.8026 52.5898 cv
cp
83.6126 43.8698 mo
83.5726 44.4998 83.5526 44.9498 83.5526 45.2398 cv
83.5526 45.4998 83.5726 45.8998 83.6126 46.4498 cv
82.4526 46.4498 li
82.4526 44.8598 li
72.8626 44.8598 li
72.8626 46.5098 li
71.6526 46.5098 li
71.6926 46.1398 71.7126 45.7898 71.7126 45.4598 cv
71.7126 45.1298 71.6926 44.5998 71.6526 43.8698 cv
77.1926 43.8698 li
77.0826 43.5098 76.9326 43.1598 76.7526 42.8298 cv
77.3026 42.7198 77.7426 42.6298 78.0726 42.5598 cv
78.3226 43.2898 78.4726 43.7298 78.5126 43.8698 cv
cp
80.7526 53.9098 mo
80.7526 52.3198 li
75.1126 52.3198 li
75.1126 53.9098 li
cp
75.8726 50.8898 mo
75.2926 51.1098 74.6926 51.2998 74.0626 51.4398 cv
81.8026 51.4398 li
80.6626 51.1898 79.8126 50.9498 79.2526 50.7298 cv
78.6826 50.5098 78.1626 50.3098 77.6826 50.1298 cv
77.0626 50.4198 76.4626 50.6698 75.8726 50.8898 cv
cp
75.6026 47.1598 mo
75.5626 47.1998 75.5326 47.2598 75.4926 47.3298 cv
76.4026 48.0998 77.1926 48.6098 77.8526 48.8598 cv
78.5426 48.3498 79.1526 47.7898 79.6626 47.1598 cv
75.6026 47.1598 li
cp
97.2626 45.2998 mo
97.2326 46.1798 97.2126 47.1798 97.2126 48.3198 cv
97.2126 49.4098 97.2326 50.2698 97.2626 50.8898 cv
96.0626 50.8898 li
96.0626 50.0698 li
88.4326 50.0698 li
88.2926 51.2398 88.1026 52.1198 87.8826 52.6998 cv
87.6726 53.2898 87.4326 53.8098 87.1726 54.2698 cv
86.9226 54.7198 86.6426 55.1498 86.3526 55.5598 cv
85.9826 55.2598 85.5826 55.0398 85.1426 54.8998 cv
85.8726 54.1298 86.3826 53.4098 86.6526 52.7298 cv
86.9226 52.0498 87.1126 51.4098 87.2026 50.8098 cv
87.2926 50.2098 87.3426 49.5598 87.3426 48.8598 cv
87.3426 48.1698 87.3226 46.9798 87.2826 45.2998 cv
97.2626 45.2998 li
cp
96.0026 49.0798 mo
96.0026 46.2898 li
88.3826 46.2898 li
88.3826 49.0798 li
cp
92.0526 42.6098 mo
92.4926 43.4898 92.8026 44.1798 92.9826 44.6998 cv
92.5126 44.8098 92.1426 44.9298 91.8926 45.0798 cv
91.6326 44.3098 91.3426 43.6398 91.0126 43.0498 cv
91.3826 42.9398 91.7226 42.7898 92.0526 42.6098 cv
cp
108.403 54.2898 mo
108.403 50.6698 li
107.303 50.6698 li
107.303 52.6998 li
107.303 52.9198 107.323 53.4298 107.353 54.2398 cv
106.373 54.2398 li
106.403 53.4698 106.423 52.9798 106.423 52.7598 cv
106.423 50.6698 li
105.383 50.6698 li
105.383 55.4998 li
104.453 55.4998 li
104.483 54.5898 104.503 53.5298 104.503 52.3198 cv
104.503 51.1098 104.483 50.2898 104.453 49.8498 cv
107.083 49.8498 li
107.153 49.4498 107.233 48.9898 107.303 48.4798 cv
105.713 48.4798 li
105.493 48.4798 105.073 48.4998 104.453 48.5398 cv
104.453 47.5498 li
104.783 47.5798 105.163 47.5998 105.603 47.5998 cv
110.433 47.5998 li
110.973 47.5998 111.453 47.5798 111.853 47.5498 cv
111.853 48.5398 li
111.413 48.4998 110.943 48.4798 110.433 48.4798 cv
108.343 48.4798 li
108.013 49.8498 li
111.693 49.8498 li
111.653 50.6598 111.633 51.1998 111.633 51.4998 cv
111.633 54.1298 li
111.633 54.6798 111.493 55.0398 111.223 55.2298 cv
110.953 55.4098 110.523 55.5698 109.933 55.7198 cv
109.823 55.2398 109.683 54.8598 109.493 54.5698 cv
109.903 54.5698 110.193 54.5498 110.373 54.5098 cv
110.553 54.4798 110.643 54.2898 110.643 53.9598 cv
110.643 50.6698 li
109.333 50.6698 li
109.333 53.0298 li
109.333 53.4298 109.353 53.8498 109.383 54.2898 cv
cp
105.823 43.3198 mo
105.783 43.6898 105.763 44.1098 105.763 44.5898 cv
105.763 45.6798 li
107.463 45.6798 li
107.463 43.9298 li
107.463 43.5298 107.433 43.1198 107.353 42.7198 cv
108.513 42.7198 li
108.473 43.1598 108.453 43.5998 108.453 44.0398 cv
108.453 45.6798 li
110.323 45.6798 li
110.323 44.5298 li
110.323 44.0898 110.303 43.6898 110.263 43.3198 cv
111.363 43.3198 li
111.323 43.7598 111.303 44.3098 111.303 44.9698 cv
111.303 45.5898 111.323 46.0998 111.363 46.5098 cv
104.833 46.5098 li
104.873 45.9898 104.893 45.4298 104.893 44.8098 cv
104.893 44.1798 104.873 43.6898 104.833 43.3198 cv
cp
101.603 52.5398 mo
101.853 51.3698 102.033 50.4598 102.143 49.8198 cv
102.253 49.1798 102.383 48.3298 102.533 47.2698 cv
102.933 47.3798 103.333 47.4698 103.733 47.5498 cv
103.553 48.0198 103.383 48.6398 103.213 49.3898 cv
103.053 50.1298 102.823 51.0898 102.533 52.2598 cv
102.893 52.1898 103.373 52.0798 103.953 51.9398 cv
103.923 52.2598 103.923 52.5598 103.953 52.8098 cv
103.303 52.9598 102.503 53.1798 101.573 53.4698 cv
100.643 53.7598 99.9726 54.0198 99.5726 54.2398 cv
99.4226 53.7298 99.2926 53.3198 99.1826 53.0298 cv
99.9926 52.8898 100.793 52.7198 101.603 52.5398 cv
cp
100.393 51.5498 mo
100.133 50.1598 99.8626 48.9398 99.5726 47.8798 cv
100.043 47.7998 100.393 47.7298 100.613 47.6598 cv
100.903 48.8298 101.173 50.0298 101.433 51.2798 cv
101.103 51.3498 100.753 51.4398 100.393 51.5498 cv
cp
103.953 46.7298 mo
103.263 46.6898 102.553 46.6698 101.813 46.6698 cv
101.083 46.6698 100.333 46.6898 99.5726 46.7298 cv
99.5726 45.7898 li
100.373 45.8298 101.123 45.8498 101.813 45.8498 cv
102.553 45.8498 103.263 45.8298 103.953 45.7898 cv
cp
101.713 42.8898 mo
102.073 43.5098 102.423 44.1298 102.753 44.7498 cv
101.763 45.1898 li
101.473 44.5298 101.143 43.9498 100.773 43.4298 cv
101.143 43.2498 101.453 43.0698 101.713 42.8898 cv
cp
115.313 53.7498 mo
124.083 53.7498 li
124.083 49.2998 li
124.083 48.7498 124.043 48.1298 123.973 47.4398 cv
125.183 47.4398 li
125.143 48.2798 125.123 48.8998 125.123 49.2998 cv
125.123 54.0698 li
125.123 54.5498 125.143 55.0398 125.183 55.5598 cv
124.083 55.5598 li
124.083 54.6798 li
114.213 54.6798 li
114.253 54.2798 114.263 53.1098 114.263 51.1698 cv
114.263 49.2298 114.253 47.9898 114.213 47.4398 cv
115.363 47.4398 li
115.323 47.8398 115.313 48.2798 115.313 48.7498 cv
cp
124.633 43.3798 mo
124.633 44.4198 li
124.083 44.5998 123.373 44.9098 122.493 45.3298 cv
121.613 45.7498 120.883 46.0898 120.303 46.3398 cv
120.303 51.7698 li
120.303 52.3598 120.103 52.7298 119.693 52.8998 cv
119.293 53.0598 118.803 53.1998 118.213 53.3098 cv
118.143 52.8998 118.013 52.4998 117.833 52.0998 cv
118.413 52.0998 118.813 52.0598 119.013 51.9898 cv
119.213 51.9198 119.313 51.6398 119.313 51.1698 cv
119.313 47.4398 li
119.313 46.7398 119.273 46.1798 119.203 45.7398 cv
119.573 45.6298 120.103 45.4298 120.793 45.1298 cv
121.493 44.8398 122.073 44.5698 122.553 44.3098 cv
116.953 44.3098 li
116.183 44.3098 115.513 44.3298 114.923 44.3698 cv
114.923 43.3198 li
115.653 43.3598 116.333 43.3798 116.953 43.3798 cv
cp
122.553 50.3498 mo
122.843 50.5998 123.203 50.9498 123.643 51.3898 cv
123.393 51.6098 123.133 51.8798 122.873 52.2098 cv
122.513 51.8098 122.183 51.4598 121.893 51.1698 cv
121.603 50.8798 121.163 50.4698 120.573 49.9598 cv
120.833 49.7098 121.053 49.4498 121.233 49.1898 cv
cp
118.603 50.2398 mo
118.343 50.4198 118.003 50.6498 117.583 50.9198 cv
117.163 51.1998 116.703 51.5498 116.183 51.9898 cv
116.073 51.7298 115.873 51.4198 115.583 51.0598 cv
115.843 50.9498 116.253 50.7198 116.813 50.3698 cv
117.383 50.0298 117.873 49.6698 118.273 49.2998 cv
118.343 49.5998 118.453 49.9098 118.603 50.2398 cv
cp
123.593 47.2198 mo
123.333 47.3298 123.033 47.5198 122.683 47.7898 cv
122.343 48.0698 121.923 48.3898 121.453 48.7498 cv
121.273 48.4298 121.083 48.1498 120.903 47.9298 cv
121.303 47.6398 121.633 47.3798 121.893 47.1598 cv
122.143 46.9398 122.443 46.6698 122.773 46.3398 cv
123.023 46.6298 123.303 46.9298 123.593 47.2198 cv
cp
117.833 48.5898 mo
117.613 48.2998 117.353 48.0098 117.063 47.7398 cv
116.773 47.4698 116.383 47.1598 115.913 46.8398 cv
116.173 46.5798 116.373 46.3198 116.513 46.0698 cv
116.923 46.3598 117.573 46.9098 118.493 47.7098 cv
118.233 48.0398 118.013 48.3298 117.833 48.5898 cv
cp
136.523 43.3798 mo
136.453 43.5598 136.363 43.8098 136.253 44.1198 cv
136.143 44.4298 135.973 44.9898 135.753 45.7898 cv
138.283 45.7898 li
138.643 45.7898 139.083 45.7698 139.593 45.7398 cv
139.593 46.7298 li
139.193 46.6898 138.883 46.6698 138.663 46.6698 cv
138.663 47.2598 138.563 48.1798 138.363 49.4398 cv
138.163 50.6998 137.803 51.7898 137.293 52.6998 cv
137.653 53.1398 138.073 53.5398 138.523 53.8798 cv
138.983 54.2298 139.413 54.4798 139.813 54.6198 cv
139.373 54.9498 139.083 55.2598 138.933 55.5598 cv
138.493 55.2998 138.093 55.0098 137.733 54.6798 cv
137.363 54.3498 137.003 53.9498 136.633 53.4698 cv
136.233 53.9098 135.803 54.2798 135.343 54.5998 cv
134.883 54.9098 134.313 55.2398 133.613 55.6098 cv
133.433 55.2798 133.183 55.0298 132.853 54.8398 cv
133.393 54.6198 133.983 54.3098 134.603 53.9098 cv
135.223 53.5098 135.703 53.1098 136.033 52.6998 cv
135.773 52.1898 135.523 51.6398 135.293 51.0598 cv
135.053 50.4698 134.843 49.7098 134.663 48.7498 cv
134.553 49.0498 134.363 49.4298 134.113 49.9098 cv
133.853 49.7598 133.543 49.6098 133.183 49.4698 cv
133.763 48.4398 134.243 47.3298 134.603 46.1198 cv
134.973 44.9198 135.203 43.8698 135.313 42.9998 cv
135.753 43.1798 136.153 43.3098 136.523 43.3798 cv
cp
131.203 49.2498 mo
131.053 49.3898 130.893 49.6298 130.713 49.9598 cv
133.723 49.9598 li
133.503 50.8798 133.123 51.7898 132.573 52.6998 cv
133.163 52.9198 133.613 53.1198 133.943 53.3098 cv
133.763 53.5598 133.603 53.8398 133.453 54.1298 cv
133.123 53.9098 132.633 53.6898 131.973 53.4698 cv
131.243 54.2798 129.983 54.9898 128.183 55.6098 cv
128.003 55.2098 127.763 54.9298 127.473 54.7898 cv
129.193 54.3898 130.363 53.8398 130.983 53.1398 cv
129.963 52.8898 129.123 52.6698 128.463 52.4798 cv
128.683 52.1498 128.973 51.6098 129.343 50.8398 cv
128.973 50.8398 128.373 50.8598 127.533 50.8898 cv
127.533 49.9098 li
128.223 49.9398 128.933 49.9598 129.673 49.9598 cv
129.813 49.6298 129.923 49.2698 129.993 48.8598 cv
130.403 49.0098 130.803 49.1398 131.203 49.2498 cv
cp
130.493 45.5198 mo
130.493 44.6398 130.473 43.7998 130.433 42.9998 cv
131.533 42.9998 li
131.493 43.7598 131.473 44.5998 131.473 45.5198 cv
132.723 45.5198 133.603 45.4998 134.113 45.4598 cv
134.113 46.4498 li
133.603 46.4098 132.723 46.3998 131.473 46.3998 cv
131.473 47.4598 131.493 48.2798 131.533 48.8598 cv
130.433 48.8598 li
130.473 48.3498 130.493 47.7098 130.493 46.9398 cv
130.303 47.2398 129.963 47.6098 129.453 48.0698 cv
128.933 48.5298 128.463 48.8798 128.023 49.1398 cv
127.843 48.8098 127.563 48.5698 127.203 48.4298 cv
127.533 48.3198 127.963 48.0598 128.513 47.6598 cv
129.063 47.2598 129.483 46.8398 129.773 46.3998 cv
129.043 46.3998 128.353 46.4098 127.693 46.4498 cv
127.693 45.4598 li
128.313 45.4998 129.243 45.5198 130.493 45.5198 cv
cp
135.313 47.2198 mo
135.643 49.3798 136.103 50.8798 136.693 51.7198 cv
137.053 50.8798 137.303 50.0298 137.433 49.1698 cv
137.553 48.3098 137.643 47.4698 137.673 46.6698 cv
135.533 46.6698 li
135.313 47.2198 li
cp
129.773 51.9898 mo
130.213 52.0998 130.823 52.2498 131.583 52.4298 cv
131.883 52.0598 132.153 51.5298 132.413 50.8398 cv
130.383 50.8398 li
130.203 51.1998 129.993 51.5898 129.773 51.9898 cv
cp
133.893 43.5998 mo
133.713 43.8898 133.563 44.1698 133.453 44.4198 cv
133.343 44.6798 133.193 44.9898 133.013 45.3498 cv
132.723 45.2098 132.433 45.0998 132.133 45.0298 cv
132.433 44.5498 132.703 43.9498 132.963 43.2198 cv
133.323 43.3998 133.633 43.5298 133.893 43.5998 cv
cp
132.243 46.7798 mo
132.723 47.2598 133.183 47.7298 133.613 48.2098 cv
133.393 48.3898 133.163 48.6098 132.903 48.8598 cv
132.393 48.2398 131.973 47.7498 131.643 47.3798 cv
131.863 47.1998 132.063 46.9998 132.243 46.7798 cv
cp
128.623 43.2198 mo
129.133 43.7298 129.563 44.2398 129.883 44.7498 cv
129.063 45.2398 li
128.813 44.7298 128.423 44.2598 127.913 43.8198 cv
128.243 43.5998 128.483 43.3998 128.623 43.2198 cv
cp
f
grestore
41.3226 62.1998 mo
165.523 62.1998 li
165.523 29.9198 li
41.3226 29.9198 li
cp
.757778 .509422 0 0 cmyk
ef
41.3226 62.1998 mo
165.523 62.1998 li
165.523 29.9198 li
41.3226 29.9198 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
0 sep
%ADOBeginSubsetFont: VRPZGL+SimHei-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (VRPZGL+SimHei-GBK-EUC-H)
%%Title: (VRPZGL+SimHei-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /VRPZGL+SimHei-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-12 -156 996 859} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 28562 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 6 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE310300013909A50A2AB7EE3C36B6EFE4BFA05B0B1D6F8
CE08BF0CAB16ED4> |
4568 <001C60D8A8C9B5EE31034A544B29E10812D78BDF01946039A99C018C4A
3B7BBE69DB768E1757B141E50B636DC31E49439BE0C70DCF69D106C6B86FB0B8
AD0926B30B2B7F74CB7B40D532C1F3309F8C47B5F0E1F13675E0BC44AEB06CAD
26A9AD9ABD8E850D53B14401A681598BDCEDB103C9DA955C3994BF64A734C138
FC50708470B7FBAD524C9AC86EE4185FEA820BA1668A1D599B0A3D130EDF62CC
61272F1E1EE3A4AB70D203DBA3CFEB62681F76F350087769EA77291872E94AB5
9D1D3AEB2AE660FB54773E2F5679C4A3F5C8F51EFE02AE319F267191A2587D3B
D0272390B72EA20F5D21A9AA90DDB1D35217255C9C5510BD22E06820BAB048F0
2C344A76E39A198E9CEB1FF75FE71385B9B30DE05F57C8ABF8EFB70CBB76D81F
1EB03CFB7653960526D2968CAD114C1E77C8201B990133834ADEF1296E7CE2A3
B00E5D840730D926909C9964B551> |
6253 <001C60D8A8C9B5EE31008E506F689E14709ADD5350978DC47510C4E9B9
84987710850E7C110690910AEEC5817CAA17D20AB5B5A861FDDC727B0792F100
D603168F125DB3608966E86D528D66B492FE7F7ADF5D480A207032B28A7C2B56
74A23840E98D055C24220DCD6643C0BA02AC219262D44054FA1BF6074E5BF7EE
15FEAF55213E62EB9C264B249E5659EFE892449C5A> |
12581 <001C60D8A8C9B5EE31036D5F5C69E83754D69B6929F4281B43C4902F1
F493FF05B3F09C96A5C9074A0F3E04EB7CF6E243635873293B027AEC34950086
D0B8566FD85229E5CA12AD31E5B52264B5EC742D798FB1F36C12A18DE1B265AA
BB5DCF93F9B95BCE06DE1922D486DB1FC33F1C904097D643171965546C2A842D
5B4449565CD3BD27844C9F850CE416DC521D1977F4324229FA973B8FD63F519F
CDF92DCB61F241D4DB944DA1D720523EABA66C3B59980FBBE884B017B33AF1BC
A2D27EAB9632CD11619C5A3B34418393B29311D886785301A71B82D7B618FC23
8FC9EBCED4FE7F9F86B292FDEAF2934B3CB4A4521A3A7534448A969EA0A5500E
6E56FB75620B57C3CE89E344B5AA59B84A10A2B26BD46E69A6EF43D9C4533649
D5C58E7893887F3051339DAE54BE88D9C85855FE4395FD885EA693C72348E5AF
E32FEA9A9F532A8CB6D93DE89DEE3DC5AD25D5AD99E407A59F559A6FCDFAB42C
2829F82282E252D018FB514475FF006311404ECCB43D9A0A593C8896FB54E0FE
2D9E7AC0336DCEE9CCF2D60A7A71CDC8680CAEDCD2AD959032792890AB8CDC78
7BCD264CBC25B3BC097AF0ACF952B28704F166619093D4C8FF45743EB95F2C76
337> |
2099 <001C60D8A8C9B5EE310D5F62B50C03BFE2EACE237A88DF0C19EAFFEF4F
A59B978CFB54726283942073C28FE012D2B718A3AC7BB590883123862F6D8E7C
565957667BE13A1D728621C2FE07577575940B269F4C4AFB8984DEE13BF45842
628FC15C4034918CFB5C51FE82AFCBFEE6C0CE038BA689D46E337AF362E5351F
F3E43554604AF89996135DB093667B1D4AA929E4364B836FF5C7E5A174460994
96F637BF706AF65C87684B2AD7E7EB66C35360CF7B679B65F0C9397036C7498B
895A662469401EC3FE2F19AB5472A76E414DF47B696177B177525FA813661FF1
8A407090A7B35F1FB18B409A13984B1F771D634D64C4E55610A7BA0F6B82B643
B8B2B111DD0F859A0C89B33547824E266F7F2F1076F874F80A98057F7D04C36B
79A1853CDA11CCC1CC2AC9D9DDD2E05C75215D3C52752C2BBD27432D9B358F06
F8200EB35BB1469AF8E322D75146F118B21F63AAAB2806E3B8A335EAF356817B
563995E2EA9B6D10E4E8> |
7078 <001C60D8A8C9B5EE3103A896AFED67E8DD6E1F52A0DBE4CAC55FA08077
EC1CADFF0AB20348F8DA37976BC03826FAA0CA6F0944A89B7B67C06F838DCDCA
C2198D095C196C8697962D59870A259A7F379643975CF42D9E271ECB775F12DE
4C84A01B2DF1625203BE438A2DCC8E435063054356EB733C637B54A5E414F97A
0425116E29BBF30C38FF8DA54FC4F2299DF58487DAB17505C82E6F6E49E58E4D
5224AA42698D9F5F6B609EB27CADEF5230CC2A5ADF0C91182D6970747A7EF31E
A691343BE434FEDB3AEB2DFB77F82B09C1E2656DD7A68BD491291E54CCAECDEB
6766F93D5101FB3797B689F436C98E449653F3C0D46FDFDF6DD6C04987CCC0CB
B9E24F6F0CFFFC52C3A97FCB2E4B15A9A8094B9E4861CC0A3FB37806DB932820
E8C9804904CA6255D722E143664719A9427777C548AB1BB3CE61B81A5469E312
DA70A9DCC8B95CFE91ADD9E463D3AD26B9EE79A3170F9871A6970B86C3092887
4CE2D9CD55B28E6735767B8F8E59B6AC2950EC6A41ADB57B12319D141C5AA760
22E4709FD14FCE84119C7EC59E48CA53FD23CD1FBF84FA0A3152A1F262189E75
173664572E3EECAFDF255E56DFB5F234C5C04B7C2E3C63692D0D33573E8A9E95
ED7E2611E6E508CD6CD262B2E26E2D560E0D80158712CC9A56BA44F0DD847696
A0B617F77F4AC77997BD6F663E2267146011F6F7EE148A6AA694C592327BDF6F
8ED61D536ADDA3E1AAF58E5D6EFAB6F146823B32BD8816DC647447C1708A0E07
CE73456785AC3D96590703C9784BAEC1FB52326D365C1F01DE> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /VRPZGL+SimHei-GBK-EUC-H-Identity-H /Identity-H 0 [/VRPZGL+SimHei-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/VRPZGL+SimHei-GBK-EUC-H-Identity-H findfont [14.04 0 0 -14.04 0 0 ]msf
68.4426 52.0998 mo
(\021\330\030m1%\0103\033\246)
[14.04 14.0681 14.04 13.9697 0 ]xsh
1.5 lw
[6 4.5 ] 0 dsh
26.0226 149.62 mo
180.223 149.62 li
1 /0 /CSD get_res sepcs
1 sep
@
71.0826 167.14 mo
75.1926 167.14 li
75.1926 135.4 li
83.4126 135.4 li
83.4126 167.14 li
87.5226 167.14 li
79.3026 175.36 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 lw
[] 0 dsh
71.0826 167.14 mo
75.1926 167.14 li
75.1926 135.4 li
83.4126 135.4 li
83.4126 167.14 li
87.5226 167.14 li
79.3026 175.36 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
118.483 72.0398 mo
122.623 72.0398 li
122.623 103.72 li
130.903 103.72 li
130.903 72.0398 li
135.043 72.0398 li
126.763 63.7598 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
118.483 72.0398 mo
122.623 72.0398 li
122.623 103.72 li
130.903 103.72 li
130.903 72.0398 li
135.043 72.0398 li
126.763 63.7598 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
gsave
41.3226 102.16 mo
41.3226 134.56 li
165.523 134.56 li
165.523 102.16 li
41.3226 102.16 li
cp
-73.6374 -65.2402 mo
886.363 -65.2402 li
886.363 474.76 li
-73.6374 474.76 li
-73.6374 -65.2402 li
cp
eclp
43.4426 136.68 mo
167.643 136.68 li
167.643 104.28 li
43.4426 104.28 li
cp
ef
grestore
gsave
41.3226 102.16 mo
41.3226 134.56 li
165.523 134.56 li
165.523 102.16 li
41.3226 102.16 li
cp
-73.6374 -65.2402 mo
886.363 -65.2402 li
886.363 474.76 li
-73.6374 474.76 li
-73.6374 -65.2402 li
cp
eclp
43.9426 104.78 mo
43.9426 136.18 li
167.143 136.18 li
167.143 104.78 li
cp
42.9426 103.78 mo
168.143 103.78 li
168.143 137.18 li
42.9426 137.18 li
cp
ef
grestore
gsave
41.3226 102.16 mo
41.3226 134.56 li
165.523 134.56 li
165.523 102.16 li
41.3226 102.16 li
cp
-73.6374 -65.2402 mo
886.363 -65.2402 li
886.363 474.76 li
-73.6374 474.76 li
-73.6374 -65.2402 li
cp
eclp
81.8026 125.91 mo
81.8026 126.46 81.8326 127.12 81.9126 127.89 cv
80.7526 127.89 li
80.7526 127.06 li
75.1126 127.06 li
75.1126 127.94 li
73.9526 127.94 li
73.9926 127.17 74.0126 126.53 74.0126 126.02 cv
74.0126 124.76 li
74.0126 124.54 73.9926 124.21 73.9526 123.77 cv
73.7026 123.88 72.9126 124.14 71.6026 124.54 cv
71.4926 124.1 71.3026 123.68 71.0526 123.28 cv
72.3626 123.1 73.4626 122.89 74.3426 122.68 cv
75.2226 122.46 76.0426 122.15 76.8126 121.74 cv
76.3726 121.52 75.7126 121.05 74.8326 120.32 cv
74.3926 120.76 73.9026 121.19 73.3526 121.63 cv
73.0926 121.27 72.7826 120.99 72.4226 120.81 cv
73.1926 120.34 73.8526 119.8 74.4226 119.19 cv
74.9926 118.59 75.4026 117.98 75.6526 117.36 cv
76.1326 117.57 76.6026 117.76 77.0826 117.9 cv
76.8626 118.05 76.6026 118.29 76.3126 118.62 cv
81.5826 118.62 li
81.1826 119.24 80.7926 119.76 80.4326 120.18 cv
80.0626 120.6 79.4926 121.12 78.7326 121.74 cv
79.2426 121.96 79.9226 122.18 80.7826 122.4 cv
81.6426 122.62 82.7526 122.77 84.1026 122.84 cv
83.8426 123.28 83.6826 123.74 83.6126 124.21 cv
82.9126 124.03 82.3526 123.88 81.9126 123.77 cv
81.8326 124.14 81.8026 124.52 81.8026 124.92 cv
cp
83.6126 116.2 mo
83.5726 116.83 83.5526 117.28 83.5526 117.57 cv
83.5526 117.83 83.5726 118.23 83.6126 118.78 cv
82.4526 118.78 li
82.4526 117.19 li
72.8626 117.19 li
72.8626 118.84 li
71.6526 118.84 li
71.6926 118.47 71.7126 118.12 71.7126 117.79 cv
71.7126 117.47 71.6926 116.93 71.6526 116.2 cv
77.1926 116.2 li
77.0826 115.84 76.9326 115.49 76.7526 115.16 cv
77.3026 115.05 77.7426 114.96 78.0726 114.89 cv
78.3226 115.62 78.4726 116.06 78.5126 116.2 cv
cp
80.7526 126.24 mo
80.7526 124.65 li
75.1126 124.65 li
75.1126 126.24 li
cp
75.8726 123.22 mo
75.2926 123.44 74.6926 123.63 74.0626 123.77 cv
81.8026 123.77 li
80.6626 123.52 79.8126 123.28 79.2526 123.06 cv
78.6826 122.84 78.1626 122.64 77.6826 122.46 cv
77.0626 122.75 76.4626 123 75.8726 123.22 cv
cp
75.6026 119.49 mo
75.5626 119.53 75.5326 119.59 75.4926 119.66 cv
76.4026 120.43 77.1926 120.94 77.8526 121.19 cv
78.5426 120.68 79.1526 120.12 79.6626 119.49 cv
75.6026 119.49 li
cp
97.2626 117.63 mo
97.2326 118.51 97.2126 119.51 97.2126 120.65 cv
97.2126 121.74 97.2326 122.6 97.2626 123.22 cv
96.0626 123.22 li
96.0626 122.4 li
88.4326 122.4 li
88.2926 123.57 88.1026 124.45 87.8826 125.03 cv
87.6726 125.62 87.4326 126.14 87.1726 126.6 cv
86.9226 127.05 86.6426 127.48 86.3526 127.89 cv
85.9826 127.59 85.5826 127.37 85.1426 127.23 cv
85.8726 126.46 86.3826 125.74 86.6526 125.06 cv
86.9226 124.38 87.1126 123.74 87.2026 123.14 cv
87.2926 122.54 87.3426 121.89 87.3426 121.19 cv
87.3426 120.5 87.3226 119.31 87.2826 117.63 cv
97.2626 117.63 li
cp
96.0026 121.41 mo
96.0026 118.62 li
88.3826 118.62 li
88.3826 121.41 li
cp
92.0526 114.94 mo
92.4926 115.82 92.8026 116.51 92.9826 117.03 cv
92.5126 117.14 92.1426 117.26 91.8926 117.41 cv
91.6326 116.64 91.3426 115.97 91.0126 115.38 cv
91.3826 115.27 91.7226 115.12 92.0526 114.94 cv
cp
108.403 126.62 mo
108.403 123 li
107.303 123 li
107.303 125.03 li
107.303 125.25 107.323 125.76 107.353 126.57 cv
106.373 126.57 li
106.403 125.8 106.423 125.31 106.423 125.09 cv
106.423 123 li
105.383 123 li
105.383 127.83 li
104.453 127.83 li
104.483 126.92 104.503 125.86 104.503 124.65 cv
104.503 123.44 104.483 122.62 104.453 122.18 cv
107.083 122.18 li
107.153 121.78 107.233 121.32 107.303 120.81 cv
105.713 120.81 li
105.493 120.81 105.073 120.83 104.453 120.87 cv
104.453 119.88 li
104.783 119.91 105.163 119.93 105.603 119.93 cv
110.433 119.93 li
110.973 119.93 111.453 119.91 111.853 119.88 cv
111.853 120.87 li
111.413 120.83 110.943 120.81 110.433 120.81 cv
108.343 120.81 li
108.013 122.18 li
111.693 122.18 li
111.653 122.99 111.633 123.53 111.633 123.83 cv
111.633 126.46 li
111.633 127.01 111.493 127.37 111.223 127.56 cv
110.953 127.74 110.523 127.9 109.933 128.05 cv
109.823 127.57 109.683 127.19 109.493 126.9 cv
109.903 126.9 110.193 126.88 110.373 126.84 cv
110.553 126.81 110.643 126.62 110.643 126.29 cv
110.643 123 li
109.333 123 li
109.333 125.36 li
109.333 125.76 109.353 126.19 109.383 126.62 cv
cp
105.823 115.66 mo
105.783 116.02 105.763 116.44 105.763 116.92 cv
105.763 118.01 li
107.463 118.01 li
107.463 116.26 li
107.463 115.86 107.433 115.45 107.353 115.05 cv
108.513 115.05 li
108.473 115.49 108.453 115.93 108.453 116.37 cv
108.453 118.01 li
110.323 118.01 li
110.323 116.86 li
110.323 116.42 110.303 116.02 110.263 115.66 cv
111.363 115.66 li
111.323 116.09 111.303 116.64 111.303 117.3 cv
111.303 117.92 111.323 118.43 111.363 118.84 cv
104.833 118.84 li
104.873 118.32 104.893 117.76 104.893 117.14 cv
104.893 116.51 104.873 116.02 104.833 115.66 cv
cp
101.603 124.87 mo
101.853 123.7 102.033 122.79 102.143 122.15 cv
102.253 121.51 102.383 120.66 102.533 119.6 cv
102.933 119.71 103.333 119.81 103.733 119.88 cv
103.553 120.35 103.383 120.97 103.213 121.72 cv
103.053 122.46 102.823 123.42 102.533 124.59 cv
102.893 124.52 103.373 124.41 103.953 124.27 cv
103.923 124.59 103.923 124.89 103.953 125.14 cv
103.303 125.29 102.503 125.51 101.573 125.8 cv
100.643 126.09 99.9726 126.35 99.5726 126.57 cv
99.4226 126.06 99.2926 125.66 99.1826 125.36 cv
99.9926 125.22 100.793 125.05 101.603 124.87 cv
cp
100.393 123.88 mo
100.133 122.49 99.8626 121.27 99.5726 120.21 cv
100.043 120.13 100.393 120.06 100.613 119.99 cv
100.903 121.16 101.173 122.36 101.433 123.61 cv
101.103 123.68 100.753 123.77 100.393 123.88 cv
cp
103.953 119.06 mo
103.263 119.02 102.553 119 101.813 119 cv
101.083 119 100.333 119.02 99.5726 119.06 cv
99.5726 118.12 li
100.373 118.16 101.123 118.18 101.813 118.18 cv
102.553 118.18 103.263 118.16 103.953 118.12 cv
cp
101.713 115.22 mo
102.073 115.84 102.423 116.46 102.753 117.08 cv
101.763 117.52 li
101.473 116.86 101.143 116.28 100.773 115.76 cv
101.143 115.58 101.453 115.4 101.713 115.22 cv
cp
116.403 119.71 mo
116.843 119.17 117.243 118.54 117.613 117.85 cv
116.293 117.85 li
115.643 117.85 114.923 117.87 114.153 117.9 cv
114.153 116.86 li
114.923 116.9 115.643 116.92 116.293 116.92 cv
117.943 116.92 li
118.233 116.26 118.453 115.6 118.603 114.94 cv
119.113 115.16 119.583 115.31 120.023 115.38 cv
119.693 115.71 119.383 116.22 119.093 116.92 cv
123.373 116.92 li
123.953 116.92 124.633 116.9 125.403 116.86 cv
125.403 117.9 li
124.633 117.87 123.943 117.85 123.313 117.85 cv
118.713 117.85 li
118.193 118.84 117.553 119.86 116.793 120.92 cv
116.793 125.97 li
116.793 126.59 116.813 127.19 116.843 127.78 cv
115.753 127.78 li
115.783 127.08 115.803 126.48 115.803 125.97 cv
115.803 122.02 li
115.213 122.64 114.703 123.15 114.263 123.55 cv
113.973 123.22 113.663 122.99 113.333 122.84 cv
113.773 122.47 114.203 122.11 114.623 121.74 cv
115.043 121.38 115.433 120.96 115.803 120.48 cv
115.693 119.71 li
cp
125.013 119.6 mo
125.013 120.65 li
123.643 121.47 li
123.283 121.69 122.893 121.94 122.493 122.24 cv
122.493 122.89 li
124.033 122.89 li
124.653 122.89 125.293 122.88 125.953 122.84 cv
125.953 123.88 li
125.293 123.85 124.653 123.83 124.033 123.83 cv
122.493 123.83 li
122.493 126.35 li
122.533 127.08 122.323 127.53 121.863 127.69 cv
121.403 127.86 120.883 127.96 120.303 127.99 cv
120.223 127.59 120.103 127.19 119.913 126.79 cv
120.463 126.82 120.853 126.82 121.093 126.76 cv
121.333 126.71 121.453 126.55 121.453 126.29 cv
121.453 123.83 li
119.533 123.83 li
118.913 123.83 118.273 123.85 117.613 123.88 cv
117.613 122.84 li
118.273 122.88 118.913 122.89 119.533 122.89 cv
121.453 122.89 li
121.453 122.53 121.413 122.18 121.343 121.85 cv
121.673 121.71 122.003 121.52 122.333 121.3 cv
122.663 121.08 122.973 120.83 123.263 120.54 cv
120.083 120.54 li
119.603 120.54 119.093 120.55 118.543 120.59 cv
118.543 119.55 li
119.133 119.59 119.623 119.6 120.023 119.6 cv
cp
139.373 122.46 mo
139.083 122.6 138.753 122.85 138.393 123.2 cv
138.023 123.54 137.623 123.94 137.183 124.38 cv
137.473 124.81 137.893 125.21 138.443 125.55 cv
138.993 125.9 139.503 126.13 139.983 126.24 cv
139.613 126.53 139.323 126.92 139.103 127.39 cv
138.333 126.95 137.703 126.49 137.213 125.99 cv
136.713 125.5 136.343 125.01 136.083 124.51 cv
135.833 124.02 135.623 123.48 135.483 122.89 cv
135.333 122.31 135.243 121.76 135.203 121.25 cv
134.113 121.25 li
134.113 126.02 li
134.623 125.73 135.133 125.42 135.643 125.09 cv
135.683 125.45 135.753 125.82 135.863 126.19 cv
135.573 126.33 135.163 126.56 134.633 126.87 cv
134.103 127.18 133.673 127.5 133.343 127.83 cv
133.083 127.46 132.833 127.15 132.573 126.9 cv
132.833 126.57 132.993 126.2 133.073 125.8 cv
133.073 118.23 li
133.073 117.43 133.053 116.64 133.013 115.87 cv
138.663 115.87 li
138.623 116.53 138.603 117.43 138.603 118.56 cv
138.603 119.7 138.623 120.59 138.663 121.25 cv
136.193 121.25 li
136.193 121.91 136.363 122.64 136.693 123.44 cv
136.983 123.19 137.273 122.9 137.563 122.59 cv
137.863 122.28 138.153 121.93 138.443 121.52 cv
cp
127.033 124.16 mo
127.693 123.42 128.203 122.63 128.573 121.77 cv
128.933 120.91 129.213 120.06 129.393 119.22 cv
128.773 119.22 128.173 119.24 127.583 119.27 cv
127.583 118.23 li
128.203 118.27 128.883 118.29 129.613 118.29 cv
129.613 117.03 li
129.613 116.48 129.593 115.95 129.563 115.44 cv
130.763 115.44 li
130.693 115.87 130.653 116.4 130.653 117.03 cv
130.653 118.29 li
131.133 118.29 131.663 118.27 132.243 118.23 cv
132.243 119.27 li
131.663 119.24 131.133 119.22 130.653 119.22 cv
130.653 125.47 li
130.693 126.61 130.713 127.37 130.713 127.78 cv
129.563 127.78 li
129.593 126.97 129.613 126.2 129.613 125.47 cv
129.613 121.74 li
129.323 122.77 128.773 123.88 127.963 125.09 cv
127.713 124.8 127.403 124.49 127.033 124.16 cv
cp
137.623 120.43 mo
137.623 118.95 li
134.113 118.95 li
134.113 120.43 li
cp
137.623 118.12 mo
137.623 116.75 li
134.113 116.75 li
134.113 118.12 li
cp
131.753 120.43 mo
132.113 121.12 132.503 121.91 132.903 122.78 cv
132.573 122.93 132.243 123.13 131.913 123.39 cv
131.513 122.4 131.133 121.6 130.763 120.98 cv
131.753 120.43 li
cp
f
grestore
41.3226 134.56 mo
165.523 134.56 li
165.523 102.16 li
41.3226 102.16 li
cp
.033875 .812222 .749874 0 cmyk
ef
41.3226 134.56 mo
165.523 134.56 li
165.523 102.16 li
41.3226 102.16 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
0 sep
%ADOBeginSubsetFont: VRPZGL+SimHei-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/VRPZGL+SimHei-GBK-EUC-H 2 GetGlyphDirectory
4494 <001C60D8A8C9B5EE310D645A4BE9F0122708657938BD25C0D117790DF2
7E2E313F8135552E2F6C3704CF488A20BF1D35C5B545570779C4B180357E029B
D1E246EA6EDBB55FDDB587A220F3C5D0E4A6974F923BFB6DDFC19B040878BE10
5C89569FCBC6A554B9BDCDBCD957AB86887DEDB335F007EFE832527131BF0E22
B16861AC3F9A135778EEDCC603FC0A0D5C40B3423314D1592FEC07F5B707DB5D
52C0B08A40B83F40203F224C04BA1950D24907178FA99A58AD16ABE6FEE7BF04
A2E35B9C796B80F0B70615D361E4178765D6D65C520C85E0EF53F2B4751E3D0B
12D8F1A971E157199444FB626E0577A423A1C7C48215657F4798589288A0248E
7A56E6DB7B8D6ECEA0DD5A3F4E00F5269CD18E50A2815F68B24E9B1C9292B7FD
57743F1E7DE9> |
7791 <001C60D8A8C9B5EE31031F0054B4DC524C10BF91D6692AA5377BD60C28
3DAD17C677F73586894A39806BDA19FF58792783246A24CE02E3311B023DD6AC
745E9559F71266C7789F594862163F981D678200E234CAE6E1E888DB5A693AD8
0E03EFB93AB0E4FC6896F5AA9739BC41377B831731C185379EBD7EFCCBCEE49F
588AA63923B9C2C9A40A9650FD555CA4836EF4C356C43BA88FDD5BE54D71F673
3A8488E45D3FEC600FF68D37C87401E737B1F797E8B789B943AFD7D2D776C5DE
6DBEE992A4E83A572C202EBD5C6EA96AE689B67E10074BC93389478EDA139485
DFB78212E7D551D548682417CB8BC33B437DF22C5BD8F00C525FDC37B9B79EC1
34643981654B7C12049DDF28479DF06EAEDA51C7B7EE81F13B7D7F1A6C21A72F
721596217EE631DB7E857847B4FEDD9A9276E997B150F12A0B31F52FECF625C3
711850DF43D26B9E9BA0F6F37CF474ACE61671E6D68A40D7> |
!
end
end end
%ADOEndSubsetFont
/VRPZGL+SimHei-GBK-EUC-H-Identity-H findfont [14.04 0 0 -14.04 0 0 ]msf
68.4426 124.43 mo
(\021\330\030m1%\021\216\036o)
[14.04 14.0681 14.04 13.9697 0 ]xsh
118.483 144.52 mo
122.623 144.52 li
122.623 176.2 li
130.903 176.2 li
130.903 144.52 li
135.043 144.52 li
126.763 136.24 li
cp
ef
118.483 144.52 mo
122.623 144.52 li
122.623 176.2 li
130.903 176.2 li
130.903 144.52 li
135.043 144.52 li
126.763 136.24 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
gsave
41.3226 175.72 mo
41.3226 208.12 li
165.523 208.12 li
165.523 175.72 li
41.3226 175.72 li
cp
-73.6374 -65.2402 mo
886.363 -65.2402 li
886.363 474.76 li
-73.6374 474.76 li
-73.6374 -65.2402 li
cp
eclp
43.4426 210.24 mo
167.643 210.24 li
167.643 177.84 li
43.4426 177.84 li
cp
ef
grestore
gsave
41.3226 175.72 mo
41.3226 208.12 li
165.523 208.12 li
165.523 175.72 li
41.3226 175.72 li
cp
-73.6374 -65.2402 mo
886.363 -65.2402 li
886.363 474.76 li
-73.6374 474.76 li
-73.6374 -65.2402 li
cp
eclp
43.9426 178.34 mo
43.9426 209.74 li
167.143 209.74 li
167.143 178.34 li
cp
42.9426 177.34 mo
168.143 177.34 li
168.143 210.74 li
42.9426 210.74 li
cp
ef
grestore
gsave
41.3226 175.72 mo
41.3226 208.12 li
165.523 208.12 li
165.523 175.72 li
41.3226 175.72 li
cp
-73.6374 -65.2402 mo
886.363 -65.2402 li
886.363 474.76 li
-73.6374 474.76 li
-73.6374 -65.2402 li
cp
eclp
87.0326 198.07 mo
87.0326 198.66 86.8026 199.1 86.3426 199.41 cv
85.8826 199.72 85.3126 199.88 84.6126 199.88 cv
83.7426 199.88 83.0626 199.71 82.5826 199.36 cv
82.1126 199.01 81.8726 198.51 81.8726 197.85 cv
82.9726 197.85 li
82.9726 198.29 83.1226 198.58 83.4326 198.73 cv
83.7526 198.87 84.1226 198.95 84.5626 198.95 cv
85.0026 198.95 85.3326 198.87 85.5526 198.7 cv
85.7726 198.54 85.8726 198.33 85.8726 198.07 cv
85.8726 197.89 85.7826 197.7 85.6026 197.52 cv
85.4226 197.34 84.9626 197.19 84.2326 197.08 cv
83.3926 196.97 82.8126 196.76 82.5026 196.45 cv
82.1926 196.14 82.0426 195.73 82.0426 195.22 cv
82.0426 194.78 82.2526 194.39 82.6726 194.04 cv
83.0926 193.69 83.7026 193.52 84.5026 193.52 cv
85.2426 193.52 85.8126 193.68 86.2326 194.01 cv
86.6526 194.34 86.8626 194.78 86.8626 195.33 cv
85.7726 195.33 li
85.7726 195 85.6526 194.77 85.4126 194.64 cv
85.1726 194.51 84.8726 194.45 84.5026 194.45 cv
84.0326 194.45 83.6926 194.53 83.4926 194.7 cv
83.2926 194.86 83.1926 195.05 83.1926 195.27 cv
83.1926 195.53 83.2826 195.73 83.4626 195.88 cv
83.6426 196.02 84.0326 196.13 84.6126 196.21 cv
85.5626 196.35 86.2026 196.58 86.5326 196.89 cv
86.8626 197.2 87.0326 197.59 87.0326 198.07 cv
cp
94.4926 196.7 mo
94.4926 197.65 94.2026 198.42 93.6126 199 cv
93.0326 199.59 92.3326 199.88 91.5326 199.88 cv
90.7226 199.88 90.0326 199.59 89.4426 199 cv
88.8626 198.42 88.5726 197.65 88.5726 196.7 cv
88.5726 195.75 88.8626 194.98 89.4426 194.4 cv
90.0326 193.81 90.7226 193.52 91.5326 193.52 cv
92.3326 193.52 93.0326 193.81 93.6126 194.4 cv
94.2026 194.98 94.4926 195.75 94.4926 196.7 cv
cp
93.2826 196.7 mo
93.2826 195.97 93.1026 195.42 92.7426 195.05 cv
92.3726 194.69 91.9726 194.51 91.5326 194.51 cv
91.0926 194.51 90.6926 194.69 90.3226 195.05 cv
89.9626 195.42 89.7726 195.97 89.7726 196.7 cv
89.7726 197.43 89.9626 197.98 90.3226 198.34 cv
90.6926 198.71 91.0926 198.89 91.5326 198.89 cv
91.9726 198.89 92.3726 198.71 92.7426 198.34 cv
93.1026 197.98 93.2826 197.43 93.2826 196.7 cv
cp
101.293 197.3 mo
101.293 198.07 101.023 198.69 100.493 199.17 cv
99.9626 199.64 99.2926 199.88 98.4926 199.88 cv
97.6826 199.88 96.9926 199.6 96.4026 199.03 cv
95.8226 198.46 95.5326 197.69 95.5326 196.7 cv
95.5326 195.71 95.8226 194.93 96.4026 194.37 cv
96.9926 193.8 97.6826 193.52 98.4926 193.52 cv
99.2926 193.52 99.9326 193.73 100.413 194.15 cv
100.883 194.57 101.123 195.07 101.123 195.66 cv
99.9126 195.66 li
99.8826 195.22 99.7226 194.92 99.4526 194.75 cv
99.1726 194.59 98.8526 194.51 98.4926 194.51 cv
98.0526 194.51 97.6526 194.68 97.2826 195.03 cv
96.9226 195.37 96.7326 195.93 96.7326 196.7 cv
96.7326 197.47 96.9226 198.02 97.2826 198.37 cv
97.6526 198.72 98.0526 198.89 98.4926 198.89 cv
98.9626 198.89 99.3526 198.76 99.6426 198.51 cv
99.9326 198.25 100.083 197.85 100.083 197.3 cv
cp
108.413 199.77 mo
107.153 199.77 li
105.173 196.42 li
103.913 197.63 li
103.913 199.77 li
102.823 199.77 li
102.823 190.39 li
103.913 190.39 li
103.913 196.37 li
106.663 193.63 li
108.033 193.63 li
105.893 195.71 li
cp
115.333 197.69 mo
115.253 198.34 114.963 198.87 114.453 199.28 cv
113.943 199.68 113.333 199.88 112.643 199.88 cv
111.763 199.88 111.043 199.6 110.473 199.03 cv
109.913 198.46 109.623 197.69 109.623 196.7 cv
109.623 195.71 109.913 194.93 110.473 194.37 cv
111.043 193.8 111.763 193.52 112.643 193.52 cv
113.413 193.52 114.043 193.76 114.533 194.26 cv
115.023 194.75 115.273 195.57 115.273 196.7 cv
110.833 196.7 li
110.833 197.5 111.003 198.07 111.353 198.4 cv
111.703 198.73 112.133 198.89 112.643 198.89 cv
113.043 198.89 113.373 198.79 113.633 198.59 cv
113.883 198.39 114.053 198.09 114.123 197.69 cv
cp
114.013 195.82 mo
113.943 195.31 113.773 194.95 113.523 194.75 cv
113.263 194.55 112.933 194.45 112.533 194.45 cv
112.163 194.45 111.833 194.55 111.543 194.75 cv
111.253 194.95 111.033 195.31 110.883 195.82 cv
cp
122.073 199.61 mo
121.883 199.68 121.673 199.74 121.443 199.8 cv
121.203 199.85 120.883 199.88 120.483 199.88 cv
119.823 199.88 119.293 199.7 118.893 199.33 cv
118.483 198.97 118.283 198.45 118.283 197.8 cv
118.283 194.51 li
116.423 194.51 li
116.423 193.63 li
118.283 193.63 li
118.283 191.49 li
119.383 191.49 li
119.383 193.63 li
121.633 193.63 li
121.633 194.51 li
119.383 194.51 li
119.383 197.85 li
119.383 198.14 119.453 198.39 119.603 198.59 cv
119.743 198.79 120.023 198.89 120.423 198.89 cv
120.823 198.89 121.153 198.86 121.413 198.78 cv
121.663 198.71 121.883 198.62 122.073 198.51 cv
cp
129.033 198.07 mo
129.033 198.66 128.803 199.1 128.343 199.41 cv
127.883 199.72 127.313 199.88 126.613 199.88 cv
125.743 199.88 125.063 199.71 124.583 199.36 cv
124.113 199.01 123.873 198.51 123.873 197.85 cv
124.973 197.85 li
124.973 198.29 125.123 198.58 125.433 198.73 cv
125.753 198.87 126.123 198.95 126.563 198.95 cv
127.003 198.95 127.333 198.87 127.553 198.7 cv
127.773 198.54 127.873 198.33 127.873 198.07 cv
127.873 197.89 127.783 197.7 127.603 197.52 cv
127.423 197.34 126.963 197.19 126.233 197.08 cv
125.393 196.97 124.813 196.76 124.503 196.45 cv
124.193 196.14 124.043 195.73 124.043 195.22 cv
124.043 194.78 124.253 194.39 124.673 194.04 cv
125.093 193.69 125.703 193.52 126.503 193.52 cv
127.243 193.52 127.813 193.68 128.233 194.01 cv
128.653 194.34 128.863 194.78 128.863 195.33 cv
127.773 195.33 li
127.773 195 127.653 194.77 127.413 194.64 cv
127.173 194.51 126.873 194.45 126.503 194.45 cv
126.033 194.45 125.693 194.53 125.493 194.7 cv
125.293 194.86 125.193 195.05 125.193 195.27 cv
125.193 195.53 125.283 195.73 125.463 195.88 cv
125.643 196.02 126.033 196.13 126.613 196.21 cv
127.563 196.35 128.203 196.58 128.533 196.89 cv
128.863 197.2 129.033 197.59 129.033 198.07 cv
cp
f
grestore
41.3226 208.12 mo
165.523 208.12 li
165.523 175.72 li
41.3226 175.72 li
cp
.0065919 .38822 .472999 0 cmyk
ef
41.3226 208.12 mo
165.523 208.12 li
165.523 175.72 li
41.3226 175.72 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
0 sep
%ADOBeginSubsetFont: VRPZGM+SimHei-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (VRPZGM+SimHei-GBK-EUC-H)
%%Title: (VRPZGM+SimHei-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /VRPZGM+SimHei-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-12 -156 996 859} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 28562 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 7 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE310300013909A50A2AB7EE3C36B6EFE4BFA05B0B1D6F8
CE08BF0CAB16ED4> |
86 <001C60D8A8C9B7A73DB6A5D1FE1DAD6500A89AADD325FAB4072430F80F09
6CB00F0AFB3E4F72229F4A5EC84F047A170E90E9D6E9990EF145252187E067D1
A028576C7671DFB141C65CDA12D63853EE80B461AF20265158378226353096A2
B203154A4AC52A19B9BE5C36A918E051C9A82EF013547198AE670679777A3A81
780C09DE5B722C1F98099714A21D960DFEC6635F03A0621A87AC19B8DC198A64
A87AEFC990FA3F03C0D1D3759A7B188269CC9F30214322193823ED1BB761> |
82 <001C60D8A8C9B7A73DB6A5DE21BE18732944549878FCF72561A4B0F8B369
01221818C2146BB1E3814D6AF80A08B098A394273CC5F6740EE89C7B80E8E00A
C6F1BAF11185715B536D51AF21AAF418A18F742262F671282CF09E9B5E989C6C
AF183A6CC6858324A9B3ECA1A849DF14CD1F5C6279360F89123C065E643C3952
676EEB1A92C324> |
70 <001C60D8A8C9B7A73DB9DE1BB621AE54ACF5942803168AA7A9BB65A70BD3
A65625C813767CA972CFB92553B9DEEE027520D61E183CD31F4702F1B34CFCE7
B70D3336767958811EAC7004D80609FFA568FE55DF46D2898656194CCFBA690A
96BD40802B58CFBE632D0BF205E542EDD7460812871AEAD1596F89148A6A216E
55A09EF0> |
78 <001C60D8A8C9B7A73DB98C3AA193F99F65BF958319E0DC09CDE07868E9CB
AD948A6057B53455F82E90394FFAB82551C892FB64> |
72 <001C60D8A8C9B7A73DB9DE1BDDB2112297B73BFA0E56053F7C6BD6E9B7C5
C2C7438A1A4C6C204953AF73A33A5FE8487C49C4DD3DEF64686A7DF82C63715F
E1B8C177ADE1E669363B7DDF15A963BEB610369EF7E53713F296126C9231BD5F
85030D88D2CFBF44AED3E727B9590B67FFAEBA983AA359341DD3870ECD1FD76A
9C93C17761F7A4C6695737> |
87 <001C60D8A8C9B7A73DB6F8E31EE633D91D4CF524D8490C846E3C9A35C76A
F79C85C4A3AA6BFBF27ECE6F79E9DD3DBD94D08138663C258FC912E3E6126F30
C7F9F470C7B6ED94EE50B7176224AE672A2EF582E09D76906E94A13F57E507BF
C5DB5452FFDE1ACB> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /VRPZGM+SimHei-GBK-EUC-H-Identity-H /Identity-H 0 [/VRPZGM+SimHei-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/VRPZGM+SimHei-GBK-EUC-H-Identity-H findfont [14.04 0 0 -14.04 0 0 ]msf
78.8826 197.99 mo
(\000V\000R\000F\000N\000H\000W\000V)
[7.09019 7.02 6.9498 7.09021 7.01999 6.9498 0 ]xsh
266.443 31.9198 mo
266.443 16.1698 279.213 3.39981 294.963 3.39981 cv
409.043 3.39981 li
424.793 3.39981 437.563 16.1698 437.563 31.9198 cv
437.563 204.8 li
437.563 220.55 424.793 233.32 409.043 233.32 cv
294.963 233.32 li
279.213 233.32 266.443 220.55 266.443 204.8 cv
cp
.326726 .167941 0 0 cmyk
ef
266.443 31.9198 mo
266.443 16.1698 279.213 3.39981 294.963 3.39981 cv
409.043 3.39981 li
424.793 3.39981 437.563 16.1698 437.563 31.9198 cv
437.563 204.8 li
437.563 220.55 424.793 233.32 409.043 233.32 cv
294.963 233.32 li
279.213 233.32 266.443 220.55 266.443 204.8 cv
cp
.780392 .516258 .233249 0 cmyk
@
319.963 93.8798 mo
324.103 93.8798 li
324.103 62.1998 li
332.383 62.1998 li
332.383 93.8798 li
336.523 93.8798 li
328.243 102.16 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
319.963 93.8798 mo
324.103 93.8798 li
324.103 62.1998 li
332.383 62.1998 li
332.383 93.8798 li
336.523 93.8798 li
328.243 102.16 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
gsave
290.323 29.9198 mo
290.323 62.1998 li
414.523 62.1998 li
414.523 29.9198 li
290.323 29.9198 li
cp
-73.6374 -65.2402 mo
886.363 -65.2402 li
886.363 474.76 li
-73.6374 474.76 li
-73.6374 -65.2402 li
cp
eclp
292.443 64.3198 mo
416.643 64.3198 li
416.643 32.0398 li
292.443 32.0398 li
cp
ef
grestore
gsave
290.323 29.9198 mo
290.323 62.1998 li
414.523 62.1998 li
414.523 29.9198 li
290.323 29.9198 li
cp
-73.6374 -65.2402 mo
886.363 -65.2402 li
886.363 474.76 li
-73.6374 474.76 li
-73.6374 -65.2402 li
cp
eclp
292.943 32.5398 mo
292.943 63.8198 li
416.143 63.8198 li
416.143 32.5398 li
cp
291.943 31.5398 mo
417.143 31.5398 li
417.143 64.8198 li
291.943 64.8198 li
cp
ef
grestore
gsave
290.323 29.9198 mo
290.323 62.1998 li
414.523 62.1998 li
414.523 29.9198 li
290.323 29.9198 li
cp
-73.6374 -65.2402 mo
886.363 -65.2402 li
886.363 474.76 li
-73.6374 474.76 li
-73.6374 -65.2402 li
cp
eclp
327.653 55.4498 mo
326.613 55.4498 li
326.653 54.5698 326.673 53.7498 326.673 52.9798 cv
326.673 45.3498 li
326.673 44.7298 326.653 44.0598 326.613 43.3198 cv
331.713 43.3198 li
331.683 43.8398 331.643 44.3898 331.603 44.9998 cv
331.573 45.5998 331.513 46.0598 331.443 46.3698 cv
331.373 46.6798 331.153 46.9098 330.783 47.0498 cv
330.413 47.1998 329.943 47.3098 329.353 47.3798 cv
329.243 46.9398 329.083 46.5798 328.863 46.2898 cv
329.773 46.2898 330.293 46.1898 330.403 45.9798 cv
330.513 45.7798 330.563 45.2098 330.563 44.2598 cv
327.653 44.2598 li
327.653 47.9298 li
332.213 47.9298 li
332.063 48.8798 331.883 49.7298 331.663 50.4798 cv
331.443 51.2298 331.153 51.9698 330.783 52.6998 cv
331.403 53.4298 332.113 53.9798 332.923 54.3498 cv
332.663 54.5698 332.413 54.8798 332.153 55.2798 cv
331.463 54.8098 330.803 54.2198 330.183 53.5298 cv
329.743 54.1498 329.133 54.8098 328.373 55.4998 cv
328.183 55.1698 327.983 54.8798 327.763 54.6198 cv
328.283 54.2598 328.843 53.6398 329.463 52.7598 cv
328.993 52.1398 328.513 50.8398 328.043 48.8598 cv
327.653 48.8598 li
cp
325.413 43.3798 mo
325.373 43.6698 325.353 44.3498 325.353 45.4098 cv
325.353 53.5298 li
325.353 54.2898 325.193 54.7598 324.863 54.9198 cv
324.533 55.0898 324.073 55.2398 323.493 55.3898 cv
323.343 54.8398 323.163 54.3998 322.943 54.0698 cv
323.453 54.0698 323.823 54.0598 324.033 54.0198 cv
324.253 53.9798 324.363 53.7098 324.363 53.1998 cv
324.363 50.4498 li
322.223 50.4498 li
322.153 51.3698 322.023 52.2098 321.843 52.9798 cv
321.663 53.7498 321.403 54.4898 321.073 55.2298 cv
320.783 54.9698 320.433 54.7498 320.033 54.5698 cv
320.473 53.7598 320.773 52.9998 320.943 52.2898 cv
321.103 51.5798 321.213 50.8598 321.263 50.1298 cv
321.323 49.3898 321.353 48.2398 321.353 46.6698 cv
321.353 45.0998 321.333 43.9998 321.293 43.3798 cv
325.413 43.3798 li
cp
324.363 49.5198 mo
324.363 47.3298 li
322.333 47.3298 li
322.283 49.5198 li
cp
324.363 46.3998 mo
324.363 44.3098 li
322.333 44.3098 li
322.333 46.3998 li
cp
329.033 48.8598 mo
329.323 50.2498 329.673 51.2598 330.073 51.8798 cv
330.513 51.0398 330.823 50.0298 331.003 48.8598 cv
329.033 48.8598 li
cp
339.833 43.3198 mo
339.543 43.5798 339.283 43.8698 339.063 44.1998 cv
345.153 44.1998 li
344.823 44.7498 344.393 45.3398 343.863 45.9598 cv
343.333 46.5798 342.663 47.1598 341.863 47.7098 cv
342.373 48.0398 343.073 48.2898 343.943 48.4498 cv
344.823 48.6198 345.863 48.7198 347.073 48.7498 cv
346.783 49.0798 346.583 49.4698 346.473 49.9098 cv
345.443 49.8298 344.443 49.6498 343.453 49.3598 cv
342.463 49.0698 341.643 48.7198 340.983 48.3198 cv
339.813 48.8598 338.753 49.2698 337.803 49.5198 cv
336.853 49.7798 335.923 49.9798 335.003 50.1298 cv
334.863 49.6898 334.643 49.2998 334.353 48.9698 cv
335.153 48.9698 336.063 48.8598 337.093 48.6398 cv
338.113 48.4298 339.123 48.1098 340.103 47.7098 cv
339.343 46.9798 338.683 46.2298 338.133 45.4598 cv
337.513 46.2298 336.873 46.8698 336.213 47.3798 cv
335.953 47.0898 335.623 46.8698 335.223 46.7298 cv
336.253 45.9898 337.003 45.2898 337.473 44.6098 cv
337.953 43.9398 338.293 43.3098 338.513 42.7198 cv
338.993 42.9798 339.433 43.1798 339.833 43.3198 cv
cp
339.723 50.5598 mo
339.793 50.1298 339.833 49.6098 339.833 49.0298 cv
340.273 49.0998 340.713 49.1598 341.153 49.1898 cv
341.043 49.4098 340.933 49.8698 340.823 50.5598 cv
345.263 50.5598 li
345.223 50.9998 345.193 51.5098 345.153 52.0698 cv
345.113 52.6398 345.053 53.2498 344.963 53.9098 cv
344.873 54.5698 344.603 54.9498 344.163 55.0598 cv
343.723 55.1698 343.033 55.2798 342.083 55.3898 cv
342.003 54.9198 341.823 54.5098 341.533 54.1798 cv
342.593 54.1798 343.233 54.1498 343.453 54.0698 cv
343.673 53.9998 343.813 53.7998 343.893 53.4698 cv
344.053 51.3898 li
340.713 51.3898 li
340.203 52.9598 339.473 53.9798 338.543 54.4598 cv
337.613 54.9298 336.613 55.3498 335.553 55.7198 cv
335.443 55.3898 335.193 55.0098 334.783 54.5698 cv
335.663 54.4898 336.583 54.2198 337.533 53.7498 cv
338.483 53.2698 339.153 52.4798 339.563 51.3898 cv
338.293 51.3898 li
337.203 51.3898 336.393 51.4198 335.883 51.4998 cv
335.883 50.5098 li
336.433 50.5498 337.253 50.5598 338.353 50.5598 cv
cp
341.043 47.1098 mo
341.773 46.6698 342.483 45.9798 343.173 45.0298 cv
339.063 45.0298 li
339.763 45.9398 340.413 46.6298 341.043 47.1098 cv
cp
357.383 54.2898 mo
357.383 50.6698 li
356.283 50.6698 li
356.283 52.6998 li
356.283 52.9198 356.303 53.4298 356.343 54.2398 cv
355.353 54.2398 li
355.393 53.4698 355.413 52.9798 355.413 52.7598 cv
355.413 50.6698 li
354.363 50.6698 li
354.363 55.4998 li
353.433 55.4998 li
353.473 54.5898 353.493 53.5298 353.493 52.3198 cv
353.493 51.1098 353.473 50.2898 353.433 49.8498 cv
356.063 49.8498 li
356.143 49.4498 356.213 48.9898 356.283 48.4798 cv
354.693 48.4798 li
354.473 48.4798 354.053 48.4998 353.433 48.5398 cv
353.433 47.5498 li
353.763 47.5798 354.143 47.5998 354.583 47.5998 cv
359.413 47.5998 li
359.963 47.5998 360.433 47.5798 360.833 47.5498 cv
360.833 48.5398 li
360.403 48.4998 359.923 48.4798 359.413 48.4798 cv
357.323 48.4798 li
357.003 49.8498 li
360.673 49.8498 li
360.633 50.6598 360.623 51.1998 360.623 51.4998 cv
360.623 54.1298 li
360.623 54.6798 360.483 55.0398 360.203 55.2298 cv
359.933 55.4098 359.503 55.5698 358.923 55.7198 cv
358.813 55.2398 358.663 54.8598 358.483 54.5698 cv
358.883 54.5698 359.173 54.5498 359.353 54.5098 cv
359.543 54.4798 359.633 54.2898 359.633 53.9598 cv
359.633 50.6698 li
358.313 50.6698 li
358.313 53.0298 li
358.313 53.4298 358.333 53.8498 358.373 54.2898 cv
cp
354.803 43.3198 mo
354.773 43.6898 354.753 44.1098 354.753 44.5898 cv
354.753 45.6798 li
356.453 45.6798 li
356.453 43.9298 li
356.453 43.5298 356.413 43.1198 356.343 42.7198 cv
357.493 42.7198 li
357.453 43.1598 357.433 43.5998 357.433 44.0398 cv
357.433 45.6798 li
359.303 45.6798 li
359.303 44.5298 li
359.303 44.0898 359.283 43.6898 359.243 43.3198 cv
360.343 43.3198 li
360.303 43.7598 360.293 44.3098 360.293 44.9698 cv
360.293 45.5898 360.303 46.0998 360.343 46.5098 cv
353.813 46.5098 li
353.853 45.9898 353.873 45.4298 353.873 44.8098 cv
353.873 44.1798 353.853 43.6898 353.813 43.3198 cv
cp
350.583 52.5398 mo
350.833 51.3698 351.023 50.4598 351.133 49.8198 cv
351.243 49.1798 351.363 48.3298 351.513 47.2698 cv
351.913 47.3798 352.323 47.4698 352.723 47.5498 cv
352.533 48.0198 352.363 48.6398 352.203 49.3898 cv
352.033 50.1298 351.803 51.0898 351.513 52.2598 cv
351.883 52.1898 352.353 52.0798 352.943 51.9398 cv
352.903 52.2598 352.903 52.5598 352.943 52.8098 cv
352.283 52.9598 351.483 53.1798 350.553 53.4698 cv
349.623 53.7598 348.953 54.0198 348.553 54.2398 cv
348.403 53.7298 348.283 53.3198 348.173 53.0298 cv
348.973 52.8898 349.773 52.7198 350.583 52.5398 cv
cp
349.373 51.5498 mo
349.123 50.1598 348.843 48.9398 348.553 47.8798 cv
349.023 47.7998 349.373 47.7298 349.593 47.6598 cv
349.883 48.8298 350.163 50.0298 350.413 51.2798 cv
350.093 51.3498 349.743 51.4398 349.373 51.5498 cv
cp
352.943 46.7298 mo
352.243 46.6898 351.533 46.6698 350.803 46.6698 cv
350.073 46.6698 349.323 46.6898 348.553 46.7298 cv
348.553 45.7898 li
349.353 45.8298 350.103 45.8498 350.803 45.8498 cv
351.533 45.8498 352.243 45.8298 352.943 45.7898 cv
cp
350.693 42.8898 mo
351.053 43.5098 351.403 44.1298 351.733 44.7498 cv
350.743 45.1898 li
350.453 44.5298 350.123 43.9498 349.763 43.4298 cv
350.123 43.2498 350.433 43.0698 350.693 42.8898 cv
cp
364.293 53.7498 mo
373.063 53.7498 li
373.063 49.2998 li
373.063 48.7498 373.033 48.1298 372.963 47.4398 cv
374.163 47.4398 li
374.133 48.2798 374.113 48.8998 374.113 49.2998 cv
374.113 54.0698 li
374.113 54.5498 374.133 55.0398 374.163 55.5598 cv
373.063 55.5598 li
373.063 54.6798 li
363.193 54.6798 li
363.233 54.2798 363.253 53.1098 363.253 51.1698 cv
363.253 49.2298 363.233 47.9898 363.193 47.4398 cv
364.343 47.4398 li
364.313 47.8398 364.293 48.2798 364.293 48.7498 cv
cp
373.613 43.3798 mo
373.613 44.4198 li
373.063 44.5998 372.353 44.9098 371.473 45.3298 cv
370.603 45.7498 369.873 46.0898 369.283 46.3398 cv
369.283 51.7698 li
369.283 52.3598 369.083 52.7298 368.683 52.8998 cv
368.283 53.0598 367.783 53.1998 367.203 53.3098 cv
367.123 52.8998 367.003 52.4998 366.813 52.0998 cv
367.403 52.0998 367.793 52.0598 367.993 51.9898 cv
368.193 51.9198 368.293 51.6398 368.293 51.1698 cv
368.293 47.4398 li
368.293 46.7398 368.263 46.1798 368.183 45.7398 cv
368.553 45.6298 369.083 45.4298 369.773 45.1298 cv
370.473 44.8398 371.053 44.5698 371.533 44.3098 cv
365.943 44.3098 li
365.173 44.3098 364.493 44.3298 363.913 44.3698 cv
363.913 43.3198 li
364.643 43.3598 365.313 43.3798 365.943 43.3798 cv
cp
371.533 50.3498 mo
371.823 50.5998 372.193 50.9498 372.633 51.3898 cv
372.373 51.6098 372.113 51.8798 371.863 52.2098 cv
371.493 51.8098 371.163 51.4598 370.873 51.1698 cv
370.583 50.8798 370.143 50.4698 369.553 49.9598 cv
369.813 49.7098 370.033 49.4498 370.213 49.1898 cv
cp
367.583 50.2398 mo
367.323 50.4198 366.993 50.6498 366.573 50.9198 cv
366.153 51.1998 365.683 51.5498 365.173 51.9898 cv
365.063 51.7298 364.863 51.4198 364.563 51.0598 cv
364.823 50.9498 365.233 50.7198 365.803 50.3698 cv
366.363 50.0298 366.853 49.6698 367.253 49.2998 cv
367.323 49.5998 367.433 49.9098 367.583 50.2398 cv
cp
372.573 47.2198 mo
372.323 47.3298 372.013 47.5198 371.673 47.7898 cv
371.323 48.0698 370.913 48.3898 370.433 48.7498 cv
370.253 48.4298 370.073 48.1498 369.883 47.9298 cv
370.293 47.6398 370.623 47.3798 370.873 47.1598 cv
371.133 46.9398 371.423 46.6698 371.753 46.3398 cv
372.003 46.6298 372.283 46.9298 372.573 47.2198 cv
cp
366.813 48.5898 mo
366.593 48.2998 366.343 48.0098 366.043 47.7398 cv
365.753 47.4698 365.373 47.1598 364.893 46.8398 cv
365.153 46.5798 365.353 46.3198 365.503 46.0698 cv
365.903 46.3598 366.563 46.9098 367.473 47.7098 cv
367.213 48.0398 367.003 48.3298 366.813 48.5898 cv
cp
385.503 43.3798 mo
385.433 43.5598 385.343 43.8098 385.233 44.1198 cv
385.123 44.4298 384.963 44.9898 384.743 45.7898 cv
387.263 45.7898 li
387.623 45.7898 388.063 45.7698 388.583 45.7398 cv
388.583 46.7298 li
388.173 46.6898 387.863 46.6698 387.643 46.6698 cv
387.643 47.2598 387.543 48.1798 387.343 49.4398 cv
387.143 50.6998 386.783 51.7898 386.273 52.6998 cv
386.643 53.1398 387.053 53.5398 387.513 53.8798 cv
387.963 54.2298 388.393 54.4798 388.793 54.6198 cv
388.363 54.9498 388.063 55.2598 387.923 55.5598 cv
387.483 55.2998 387.083 55.0098 386.713 54.6798 cv
386.343 54.3498 385.983 53.9498 385.613 53.4698 cv
385.213 53.9098 384.783 54.2798 384.323 54.5998 cv
383.873 54.9098 383.293 55.2398 382.603 55.6098 cv
382.413 55.2798 382.163 55.0298 381.833 54.8398 cv
382.383 54.6198 382.963 54.3098 383.583 53.9098 cv
384.213 53.5098 384.683 53.1098 385.013 52.6998 cv
384.753 52.1898 384.513 51.6398 384.273 51.0598 cv
384.033 50.4698 383.823 49.7098 383.643 48.7498 cv
383.533 49.0498 383.353 49.4298 383.093 49.9098 cv
382.833 49.7598 382.523 49.6098 382.163 49.4698 cv
382.743 48.4398 383.223 47.3298 383.583 46.1198 cv
383.953 44.9198 384.193 43.8698 384.303 42.9998 cv
384.743 43.1798 385.143 43.3098 385.503 43.3798 cv
cp
380.183 49.2498 mo
380.043 49.3898 379.873 49.6298 379.693 49.9598 cv
382.713 49.9598 li
382.493 50.8798 382.103 51.7898 381.563 52.6998 cv
382.143 52.9198 382.603 53.1198 382.933 53.3098 cv
382.743 53.5598 382.583 53.8398 382.433 54.1298 cv
382.103 53.9098 381.613 53.6898 380.953 53.4698 cv
380.223 54.2798 378.963 54.9898 377.173 55.6098 cv
376.983 55.2098 376.753 54.9298 376.453 54.7898 cv
378.173 54.3898 379.343 53.8398 379.963 53.1398 cv
378.943 52.8898 378.103 52.6698 377.443 52.4798 cv
377.663 52.1498 377.953 51.6098 378.323 50.8398 cv
377.953 50.8398 377.353 50.8598 376.513 50.8898 cv
376.513 49.9098 li
377.203 49.9398 377.923 49.9598 378.653 49.9598 cv
378.793 49.6298 378.903 49.2698 378.983 48.8598 cv
379.383 49.0098 379.783 49.1398 380.183 49.2498 cv
cp
379.473 45.5198 mo
379.473 44.6398 379.453 43.7998 379.423 42.9998 cv
380.513 42.9998 li
380.483 43.7598 380.463 44.5998 380.463 45.5198 cv
381.703 45.5198 382.583 45.4998 383.093 45.4598 cv
383.093 46.4498 li
382.583 46.4098 381.703 46.3998 380.463 46.3998 cv
380.463 47.4598 380.483 48.2798 380.513 48.8598 cv
379.423 48.8598 li
379.453 48.3498 379.473 47.7098 379.473 46.9398 cv
379.293 47.2398 378.943 47.6098 378.433 48.0698 cv
377.923 48.5298 377.443 48.8798 377.003 49.1398 cv
376.823 48.8098 376.553 48.5698 376.183 48.4298 cv
376.513 48.3198 376.953 48.0598 377.503 47.6598 cv
378.053 47.2598 378.473 46.8398 378.763 46.3998 cv
378.033 46.3998 377.333 46.4098 376.673 46.4498 cv
376.673 45.4598 li
377.303 45.4998 378.233 45.5198 379.473 45.5198 cv
cp
384.303 47.2198 mo
384.633 49.3798 385.083 50.8798 385.673 51.7198 cv
386.033 50.8798 386.283 50.0298 386.413 49.1698 cv
386.543 48.3098 386.623 47.4698 386.663 46.6698 cv
384.523 46.6698 li
384.303 47.2198 li
cp
378.763 51.9898 mo
379.203 52.0998 379.803 52.2498 380.573 52.4298 cv
380.863 52.0598 381.133 51.5298 381.393 50.8398 cv
379.363 50.8398 li
379.183 51.1998 378.983 51.5898 378.763 51.9898 cv
cp
382.873 43.5998 mo
382.693 43.8898 382.543 44.1698 382.433 44.4198 cv
382.323 44.6798 382.183 44.9898 381.993 45.3498 cv
381.703 45.2098 381.413 45.0998 381.123 45.0298 cv
381.413 44.5498 381.683 43.9498 381.943 43.2198 cv
382.303 43.3998 382.623 43.5298 382.873 43.5998 cv
cp
381.233 46.7798 mo
381.703 47.2598 382.163 47.7298 382.603 48.2098 cv
382.383 48.3898 382.143 48.6098 381.883 48.8598 cv
381.373 48.2398 380.953 47.7498 380.623 47.3798 cv
380.843 47.1998 381.043 46.9998 381.233 46.7798 cv
cp
377.613 43.2198 mo
378.123 43.7298 378.543 44.2398 378.873 44.7498 cv
378.053 45.2398 li
377.793 44.7298 377.413 44.2598 376.893 43.8198 cv
377.223 43.5998 377.463 43.3998 377.613 43.2198 cv
cp
f
grestore
290.323 62.1998 mo
414.523 62.1998 li
414.523 29.9198 li
290.323 29.9198 li
cp
.757778 .509422 0 0 cmyk
ef
290.323 62.1998 mo
414.523 62.1998 li
414.523 29.9198 li
290.323 29.9198 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
0 sep
%ADOBeginSubsetFont: VRPZGL+SimHei-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/VRPZGL+SimHei-GBK-EUC-H 2 GetGlyphDirectory
7491 <001C60D8A8C9B5EE3102E759C3AA830E59D71DA5EF7E630E49BE70D6B3
A55DA13B2B6E054AE0500B2293BAEDEBE04624E36C0D7EF7295AE3665492B8FE
D88B1461EE242793CB4ECAA573E9B5E5073BC75D6B6B2CC64C9A92C6E621DA5F
1C6E7CEEA7EA99F8741198B7DE11CA4DA4320154E9146B361C93E73AF70A70B1
22607519FC10717BFEE12F5EE8137C70ADB2B0723A84B4A1B8B7DF59DAA485EB
E7B8A8CB096D505554A7D30AD7827B207BE430F12BA09856226E6C0C67B8C5E8
134CF1951E7F369AF698DBED85B975C0394472B8E1EA53525815F588DD28B5D1
11AA4F8DD82678E4A6148F23592420AFD182F6F8CA215B2E11F2C01154AE0F2C
B1F7F66F4C40FC5963FFD3BA24B43077A40D354A68079AB2B25237958110E975
884EEAD47BC7D40D4E8DC39B6ACF8A4E51526A82D8C2CC39F225D0D30CC5D063
FC6CF144B5D18382D00B> |
2263 <001C60D8A8C9B5EE3102603FF13037056366FE35587957C60F747BE3B4
4CFADDC9278222F70EDC2A26530456827CEBD5907FDFFD523E3A7A1F84F7CEE0
06EAB07D341ED361249A989F8210FDCF38B159D5E80B09CFB7E699168D64D7E6
27B7AA5597564CA9FC46003F8B7FF1689A6B21072207535D4EB141EC2F235E1C
D0BEB3B430CA5E706DBB253C206405909D95D11B095EF72FA095A957D5BF8A15
C8F0A921AC8DF9A42C7B1A4EAA9D2521F3F182D80A46F3601D93619C104E5279
E466434D1EDEA0A64546141995AB0870A63A0B76C2A73BA76A2C74E0636ED16B
F80F9638FE7FA7DED8B838E54AC98ED4578A7E65FD48ED1FBE39B9469BE3BBAA
3771BED9779E3E1F6DAE3DFA611EA6BA2F47B2D0F6DF125C0B8351C8DE826078
9CC06AFA11B0308B8D54679A16A14D095EC3F137EB859E803B60B376> |
!
end
end end
%ADOEndSubsetFont
/VRPZGL+SimHei-GBK-EUC-H-Identity-H findfont [14.04 0 0 -14.04 0 0 ]msf
317.463 52.0998 mo
(\035C\010\3271%\0103)sh
373.496 52.0998 mo
(\033\246)sh
1.5 lw
[6 4.5 ] 0 dsh
275.023 149.62 mo
429.223 149.62 li
1 /0 /CSD get_res sepcs
1 sep
@
319.963 167.08 mo
324.103 167.08 li
324.103 135.4 li
332.383 135.4 li
332.383 167.08 li
336.523 167.08 li
328.243 175.36 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 lw
[] 0 dsh
319.963 167.08 mo
324.103 167.08 li
324.103 135.4 li
332.383 135.4 li
332.383 167.08 li
336.523 167.08 li
328.243 175.36 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
367.483 72.0398 mo
371.623 72.0398 li
371.623 103.72 li
379.903 103.72 li
379.903 72.0398 li
384.043 72.0398 li
375.763 63.7598 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
367.483 72.0398 mo
371.623 72.0398 li
371.623 103.72 li
379.903 103.72 li
379.903 72.0398 li
384.043 72.0398 li
375.763 63.7598 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
gsave
290.323 102.16 mo
290.323 134.56 li
414.523 134.56 li
414.523 102.16 li
290.323 102.16 li
cp
-73.6374 -65.2402 mo
886.363 -65.2402 li
886.363 474.76 li
-73.6374 474.76 li
-73.6374 -65.2402 li
cp
eclp
292.443 136.68 mo
416.643 136.68 li
416.643 104.28 li
292.443 104.28 li
cp
ef
grestore
gsave
290.323 102.16 mo
290.323 134.56 li
414.523 134.56 li
414.523 102.16 li
290.323 102.16 li
cp
-73.6374 -65.2402 mo
886.363 -65.2402 li
886.363 474.76 li
-73.6374 474.76 li
-73.6374 -65.2402 li
cp
eclp
292.943 104.78 mo
292.943 136.18 li
416.143 136.18 li
416.143 104.78 li
cp
291.943 103.78 mo
417.143 103.78 li
417.143 137.18 li
291.943 137.18 li
cp
ef
grestore
gsave
290.323 102.16 mo
290.323 134.56 li
414.523 134.56 li
414.523 102.16 li
290.323 102.16 li
cp
-73.6374 -65.2402 mo
886.363 -65.2402 li
886.363 474.76 li
-73.6374 474.76 li
-73.6374 -65.2402 li
cp
eclp
327.653 127.78 mo
326.613 127.78 li
326.653 126.9 326.673 126.08 326.673 125.31 cv
326.673 117.68 li
326.673 117.06 326.653 116.39 326.613 115.66 cv
331.713 115.66 li
331.683 116.17 331.643 116.72 331.603 117.33 cv
331.573 117.93 331.513 118.39 331.443 118.7 cv
331.373 119.01 331.153 119.24 330.783 119.38 cv
330.413 119.53 329.943 119.64 329.353 119.71 cv
329.243 119.27 329.083 118.91 328.863 118.62 cv
329.773 118.62 330.293 118.52 330.403 118.32 cv
330.513 118.11 330.563 117.54 330.563 116.59 cv
327.653 116.59 li
327.653 120.26 li
332.213 120.26 li
332.063 121.21 331.883 122.06 331.663 122.81 cv
331.443 123.56 331.153 124.3 330.783 125.03 cv
331.403 125.76 332.113 126.31 332.923 126.68 cv
332.663 126.9 332.413 127.21 332.153 127.61 cv
331.463 127.14 330.803 126.55 330.183 125.86 cv
329.743 126.48 329.133 127.14 328.373 127.83 cv
328.183 127.5 327.983 127.21 327.763 126.95 cv
328.283 126.59 328.843 125.97 329.463 125.09 cv
328.993 124.47 328.513 123.17 328.043 121.19 cv
327.653 121.19 li
cp
325.413 115.71 mo
325.373 116 325.353 116.68 325.353 117.74 cv
325.353 125.86 li
325.353 126.62 325.193 127.09 324.863 127.25 cv
324.533 127.42 324.073 127.57 323.493 127.72 cv
323.343 127.17 323.163 126.73 322.943 126.4 cv
323.453 126.4 323.823 126.39 324.033 126.35 cv
324.253 126.31 324.363 126.04 324.363 125.53 cv
324.363 122.78 li
322.223 122.78 li
322.153 123.7 322.023 124.54 321.843 125.31 cv
321.663 126.08 321.403 126.82 321.073 127.56 cv
320.783 127.3 320.433 127.08 320.033 126.9 cv
320.473 126.09 320.773 125.34 320.943 124.62 cv
321.103 123.91 321.213 123.19 321.263 122.46 cv
321.323 121.72 321.353 120.57 321.353 119 cv
321.353 117.43 321.333 116.33 321.293 115.71 cv
325.413 115.71 li
cp
324.363 121.85 mo
324.363 119.66 li
322.333 119.66 li
322.283 121.85 li
cp
324.363 118.73 mo
324.363 116.64 li
322.333 116.64 li
322.333 118.73 li
cp
329.033 121.19 mo
329.323 122.58 329.673 123.59 330.073 124.21 cv
330.513 123.37 330.823 122.36 331.003 121.19 cv
329.033 121.19 li
cp
339.833 115.66 mo
339.543 115.91 339.283 116.2 339.063 116.53 cv
345.153 116.53 li
344.823 117.08 344.393 117.67 343.863 118.29 cv
343.333 118.91 342.663 119.49 341.863 120.04 cv
342.373 120.37 343.073 120.62 343.943 120.78 cv
344.823 120.95 345.863 121.05 347.073 121.08 cv
346.783 121.41 346.583 121.8 346.473 122.24 cv
345.443 122.16 344.443 121.98 343.453 121.69 cv
342.463 121.4 341.643 121.05 340.983 120.65 cv
339.813 121.19 338.753 121.6 337.803 121.85 cv
336.853 122.11 335.923 122.31 335.003 122.46 cv
334.863 122.02 334.643 121.63 334.353 121.3 cv
335.153 121.3 336.063 121.19 337.093 120.98 cv
338.113 120.76 339.123 120.44 340.103 120.04 cv
339.343 119.31 338.683 118.56 338.133 117.79 cv
337.513 118.56 336.873 119.2 336.213 119.71 cv
335.953 119.42 335.623 119.2 335.223 119.06 cv
336.253 118.32 337.003 117.62 337.473 116.94 cv
337.953 116.27 338.293 115.64 338.513 115.05 cv
338.993 115.31 339.433 115.51 339.833 115.66 cv
cp
339.723 122.89 mo
339.793 122.46 339.833 121.94 339.833 121.36 cv
340.273 121.43 340.713 121.49 341.153 121.52 cv
341.043 121.74 340.933 122.2 340.823 122.89 cv
345.263 122.89 li
345.223 123.33 345.193 123.84 345.153 124.4 cv
345.113 124.97 345.053 125.58 344.963 126.24 cv
344.873 126.9 344.603 127.28 344.163 127.39 cv
343.723 127.5 343.033 127.61 342.083 127.72 cv
342.003 127.25 341.823 126.84 341.533 126.51 cv
342.593 126.51 343.233 126.48 343.453 126.4 cv
343.673 126.33 343.813 126.13 343.893 125.8 cv
344.053 123.72 li
340.713 123.72 li
340.203 125.29 339.473 126.31 338.543 126.79 cv
337.613 127.26 336.613 127.68 335.553 128.05 cv
335.443 127.72 335.193 127.34 334.783 126.9 cv
335.663 126.82 336.583 126.55 337.533 126.08 cv
338.483 125.6 339.153 124.81 339.563 123.72 cv
338.293 123.72 li
337.203 123.72 336.393 123.75 335.883 123.83 cv
335.883 122.84 li
336.433 122.88 337.253 122.89 338.353 122.89 cv
cp
341.043 119.44 mo
341.773 119 342.483 118.31 343.173 117.36 cv
339.063 117.36 li
339.763 118.27 340.413 118.96 341.043 119.44 cv
cp
357.383 126.62 mo
357.383 123 li
356.283 123 li
356.283 125.03 li
356.283 125.25 356.303 125.76 356.343 126.57 cv
355.353 126.57 li
355.393 125.8 355.413 125.31 355.413 125.09 cv
355.413 123 li
354.363 123 li
354.363 127.83 li
353.433 127.83 li
353.473 126.92 353.493 125.86 353.493 124.65 cv
353.493 123.44 353.473 122.62 353.433 122.18 cv
356.063 122.18 li
356.143 121.78 356.213 121.32 356.283 120.81 cv
354.693 120.81 li
354.473 120.81 354.053 120.83 353.433 120.87 cv
353.433 119.88 li
353.763 119.91 354.143 119.93 354.583 119.93 cv
359.413 119.93 li
359.963 119.93 360.433 119.91 360.833 119.88 cv
360.833 120.87 li
360.403 120.83 359.923 120.81 359.413 120.81 cv
357.323 120.81 li
357.003 122.18 li
360.673 122.18 li
360.633 122.99 360.623 123.53 360.623 123.83 cv
360.623 126.46 li
360.623 127.01 360.483 127.37 360.203 127.56 cv
359.933 127.74 359.503 127.9 358.923 128.05 cv
358.813 127.57 358.663 127.19 358.483 126.9 cv
358.883 126.9 359.173 126.88 359.353 126.84 cv
359.543 126.81 359.633 126.62 359.633 126.29 cv
359.633 123 li
358.313 123 li
358.313 125.36 li
358.313 125.76 358.333 126.19 358.373 126.62 cv
cp
354.803 115.66 mo
354.773 116.02 354.753 116.44 354.753 116.92 cv
354.753 118.01 li
356.453 118.01 li
356.453 116.26 li
356.453 115.86 356.413 115.45 356.343 115.05 cv
357.493 115.05 li
357.453 115.49 357.433 115.93 357.433 116.37 cv
357.433 118.01 li
359.303 118.01 li
359.303 116.86 li
359.303 116.42 359.283 116.02 359.243 115.66 cv
360.343 115.66 li
360.303 116.09 360.293 116.64 360.293 117.3 cv
360.293 117.92 360.303 118.43 360.343 118.84 cv
353.813 118.84 li
353.853 118.32 353.873 117.76 353.873 117.14 cv
353.873 116.51 353.853 116.02 353.813 115.66 cv
cp
350.583 124.87 mo
350.833 123.7 351.023 122.79 351.133 122.15 cv
351.243 121.51 351.363 120.66 351.513 119.6 cv
351.913 119.71 352.323 119.81 352.723 119.88 cv
352.533 120.35 352.363 120.97 352.203 121.72 cv
352.033 122.46 351.803 123.42 351.513 124.59 cv
351.883 124.52 352.353 124.41 352.943 124.27 cv
352.903 124.59 352.903 124.89 352.943 125.14 cv
352.283 125.29 351.483 125.51 350.553 125.8 cv
349.623 126.09 348.953 126.35 348.553 126.57 cv
348.403 126.06 348.283 125.66 348.173 125.36 cv
348.973 125.22 349.773 125.05 350.583 124.87 cv
cp
349.373 123.88 mo
349.123 122.49 348.843 121.27 348.553 120.21 cv
349.023 120.13 349.373 120.06 349.593 119.99 cv
349.883 121.16 350.163 122.36 350.413 123.61 cv
350.093 123.68 349.743 123.77 349.373 123.88 cv
cp
352.943 119.06 mo
352.243 119.02 351.533 119 350.803 119 cv
350.073 119 349.323 119.02 348.553 119.06 cv
348.553 118.12 li
349.353 118.16 350.103 118.18 350.803 118.18 cv
351.533 118.18 352.243 118.16 352.943 118.12 cv
cp
350.693 115.22 mo
351.053 115.84 351.403 116.46 351.733 117.08 cv
350.743 117.52 li
350.453 116.86 350.123 116.28 349.763 115.76 cv
350.123 115.58 350.433 115.4 350.693 115.22 cv
cp
365.393 119.71 mo
365.833 119.17 366.233 118.54 366.593 117.85 cv
365.283 117.85 li
364.623 117.85 363.913 117.87 363.143 117.9 cv
363.143 116.86 li
363.913 116.9 364.623 116.92 365.283 116.92 cv
366.923 116.92 li
367.213 116.26 367.433 115.6 367.583 114.94 cv
368.093 115.16 368.573 115.31 369.013 115.38 cv
368.683 115.71 368.373 116.22 368.073 116.92 cv
372.353 116.92 li
372.943 116.92 373.613 116.9 374.383 116.86 cv
374.383 117.9 li
373.613 117.87 372.923 117.85 372.303 117.85 cv
367.693 117.85 li
367.183 118.84 366.543 119.86 365.773 120.92 cv
365.773 125.97 li
365.773 126.59 365.793 127.19 365.833 127.78 cv
364.733 127.78 li
364.773 127.08 364.783 126.48 364.783 125.97 cv
364.783 122.02 li
364.203 122.64 363.693 123.15 363.253 123.55 cv
362.963 123.22 362.643 122.99 362.323 122.84 cv
362.753 122.47 363.183 122.11 363.603 121.74 cv
364.023 121.38 364.423 120.96 364.783 120.48 cv
364.673 119.71 li
cp
374.003 119.6 mo
374.003 120.65 li
372.633 121.47 li
372.263 121.69 371.883 121.94 371.473 122.24 cv
371.473 122.89 li
373.013 122.89 li
373.633 122.89 374.273 122.88 374.933 122.84 cv
374.933 123.88 li
374.273 123.85 373.633 123.83 373.013 123.83 cv
371.473 123.83 li
371.473 126.35 li
371.513 127.08 371.303 127.53 370.843 127.69 cv
370.393 127.86 369.873 127.96 369.283 127.99 cv
369.213 127.59 369.083 127.19 368.903 126.79 cv
369.453 126.82 369.843 126.82 370.083 126.76 cv
370.313 126.71 370.433 126.55 370.433 126.29 cv
370.433 123.83 li
368.513 123.83 li
367.893 123.83 367.253 123.85 366.593 123.88 cv
366.593 122.84 li
367.253 122.88 367.893 122.89 368.513 122.89 cv
370.433 122.89 li
370.433 122.53 370.403 122.18 370.323 121.85 cv
370.653 121.71 370.983 121.52 371.313 121.3 cv
371.643 121.08 371.953 120.83 372.243 120.54 cv
369.063 120.54 li
368.593 120.54 368.073 120.55 367.533 120.59 cv
367.533 119.55 li
368.113 119.59 368.603 119.6 369.013 119.6 cv
cp
388.363 122.46 mo
388.063 122.6 387.733 122.85 387.373 123.2 cv
387.003 123.54 386.603 123.94 386.163 124.38 cv
386.453 124.81 386.883 125.21 387.423 125.55 cv
387.973 125.9 388.483 126.13 388.963 126.24 cv
388.593 126.53 388.303 126.92 388.083 127.39 cv
387.313 126.95 386.683 126.49 386.193 125.99 cv
385.703 125.5 385.323 125.01 385.073 124.51 cv
384.813 124.02 384.613 123.48 384.463 122.89 cv
384.323 122.31 384.223 121.76 384.193 121.25 cv
383.093 121.25 li
383.093 126.02 li
383.603 125.73 384.113 125.42 384.633 125.09 cv
384.663 125.45 384.743 125.82 384.853 126.19 cv
384.553 126.33 384.143 126.56 383.613 126.87 cv
383.083 127.18 382.653 127.5 382.323 127.83 cv
382.073 127.46 381.813 127.15 381.563 126.9 cv
381.813 126.57 381.983 126.2 382.053 125.8 cv
382.053 118.23 li
382.053 117.43 382.033 116.64 381.993 115.87 cv
387.643 115.87 li
387.613 116.53 387.593 117.43 387.593 118.56 cv
387.593 119.7 387.613 120.59 387.643 121.25 cv
385.173 121.25 li
385.173 121.91 385.343 122.64 385.673 123.44 cv
385.963 123.19 386.253 122.9 386.553 122.59 cv
386.843 122.28 387.133 121.93 387.423 121.52 cv
cp
376.023 124.16 mo
376.673 123.42 377.193 122.63 377.553 121.77 cv
377.923 120.91 378.193 120.06 378.373 119.22 cv
377.753 119.22 377.153 119.24 376.563 119.27 cv
376.563 118.23 li
377.193 118.27 377.863 118.29 378.593 118.29 cv
378.593 117.03 li
378.593 116.48 378.583 115.95 378.543 115.44 cv
379.753 115.44 li
379.673 115.87 379.643 116.4 379.643 117.03 cv
379.643 118.29 li
380.113 118.29 380.643 118.27 381.233 118.23 cv
381.233 119.27 li
380.643 119.24 380.113 119.22 379.643 119.22 cv
379.643 125.47 li
379.673 126.61 379.693 127.37 379.693 127.78 cv
378.543 127.78 li
378.583 126.97 378.593 126.2 378.593 125.47 cv
378.593 121.74 li
378.303 122.77 377.753 123.88 376.953 125.09 cv
376.693 124.8 376.383 124.49 376.023 124.16 cv
cp
386.603 120.43 mo
386.603 118.95 li
383.093 118.95 li
383.093 120.43 li
cp
386.603 118.12 mo
386.603 116.75 li
383.093 116.75 li
383.093 118.12 li
cp
380.733 120.43 mo
381.103 121.12 381.483 121.91 381.883 122.78 cv
381.563 122.93 381.233 123.13 380.903 123.39 cv
380.493 122.4 380.113 121.6 379.753 120.98 cv
380.733 120.43 li
cp
f
grestore
290.323 134.56 mo
414.523 134.56 li
414.523 102.16 li
290.323 102.16 li
cp
.033875 .812222 .749874 0 cmyk
ef
290.323 134.56 mo
414.523 134.56 li
414.523 102.16 li
290.323 102.16 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
0 sep
/VRPZGL+SimHei-GBK-EUC-H-Identity-H findfont [14.04 0 0 -14.04 0 0 ]msf
317.463 124.43 mo
(\035C\010\3271%\021\216)sh
373.496 124.43 mo
(\036o)sh
367.483 144.52 mo
371.623 144.52 li
371.623 176.2 li
379.903 176.2 li
379.903 144.52 li
384.043 144.52 li
375.763 136.24 li
cp
ef
367.483 144.52 mo
371.623 144.52 li
371.623 176.2 li
379.903 176.2 li
379.903 144.52 li
384.043 144.52 li
375.763 136.24 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
gsave
290.323 175.72 mo
290.323 208.12 li
414.523 208.12 li
414.523 175.72 li
290.323 175.72 li
cp
-73.6374 -65.2402 mo
886.363 -65.2402 li
886.363 474.76 li
-73.6374 474.76 li
-73.6374 -65.2402 li
cp
eclp
292.443 210.24 mo
416.643 210.24 li
416.643 177.84 li
292.443 177.84 li
cp
ef
grestore
gsave
290.323 175.72 mo
290.323 208.12 li
414.523 208.12 li
414.523 175.72 li
290.323 175.72 li
cp
-73.6374 -65.2402 mo
886.363 -65.2402 li
886.363 474.76 li
-73.6374 474.76 li
-73.6374 -65.2402 li
cp
eclp
292.943 178.34 mo
292.943 209.74 li
416.143 209.74 li
416.143 178.34 li
cp
291.943 177.34 mo
417.143 177.34 li
417.143 210.74 li
291.943 210.74 li
cp
ef
grestore
gsave
290.323 175.72 mo
290.323 208.12 li
414.523 208.12 li
414.523 175.72 li
290.323 175.72 li
cp
-73.6374 -65.2402 mo
886.363 -65.2402 li
886.363 474.76 li
-73.6374 474.76 li
-73.6374 -65.2402 li
cp
eclp
336.013 198.07 mo
336.013 198.66 335.783 199.1 335.323 199.41 cv
334.873 199.72 334.293 199.88 333.603 199.88 cv
332.723 199.88 332.043 199.71 331.573 199.36 cv
331.093 199.01 330.853 198.51 330.853 197.85 cv
331.953 197.85 li
331.953 198.29 332.113 198.58 332.423 198.73 cv
332.733 198.87 333.103 198.95 333.543 198.95 cv
333.983 198.95 334.313 198.87 334.533 198.7 cv
334.753 198.54 334.863 198.33 334.863 198.07 cv
334.863 197.89 334.773 197.7 334.583 197.52 cv
334.403 197.34 333.943 197.19 333.213 197.08 cv
332.373 196.97 331.803 196.76 331.493 196.45 cv
331.173 196.14 331.023 195.73 331.023 195.22 cv
331.023 194.78 331.233 194.39 331.653 194.04 cv
332.073 193.69 332.683 193.52 333.493 193.52 cv
334.223 193.52 334.793 193.68 335.213 194.01 cv
335.643 194.34 335.853 194.78 335.853 195.33 cv
334.753 195.33 li
334.753 195 334.633 194.77 334.393 194.64 cv
334.153 194.51 333.853 194.45 333.493 194.45 cv
333.013 194.45 332.673 194.53 332.473 194.7 cv
332.273 194.86 332.173 195.05 332.173 195.27 cv
332.173 195.53 332.263 195.73 332.453 195.88 cv
332.633 196.02 333.013 196.13 333.603 196.21 cv
334.553 196.35 335.193 196.58 335.523 196.89 cv
335.853 197.2 336.013 197.59 336.013 198.07 cv
cp
343.473 196.7 mo
343.473 197.65 343.183 198.42 342.603 199 cv
342.013 199.59 341.323 199.88 340.513 199.88 cv
339.713 199.88 339.013 199.59 338.433 199 cv
337.843 198.42 337.553 197.65 337.553 196.7 cv
337.553 195.75 337.843 194.98 338.433 194.4 cv
339.013 193.81 339.713 193.52 340.513 193.52 cv
341.323 193.52 342.013 193.81 342.603 194.4 cv
343.183 194.98 343.473 195.75 343.473 196.7 cv
cp
342.273 196.7 mo
342.273 195.97 342.083 195.42 341.723 195.05 cv
341.353 194.69 340.953 194.51 340.513 194.51 cv
340.073 194.51 339.673 194.69 339.313 195.05 cv
338.943 195.42 338.763 195.97 338.763 196.7 cv
338.763 197.43 338.943 197.98 339.313 198.34 cv
339.673 198.71 340.073 198.89 340.513 198.89 cv
340.953 198.89 341.353 198.71 341.723 198.34 cv
342.083 197.98 342.273 197.43 342.273 196.7 cv
cp
350.273 197.3 mo
350.273 198.07 350.003 198.69 349.473 199.17 cv
348.943 199.64 348.283 199.88 347.473 199.88 cv
346.673 199.88 345.973 199.6 345.393 199.03 cv
344.803 198.46 344.513 197.69 344.513 196.7 cv
344.513 195.71 344.803 194.93 345.393 194.37 cv
345.973 193.8 346.673 193.52 347.473 193.52 cv
348.283 193.52 348.923 193.73 349.393 194.15 cv
349.873 194.57 350.103 195.07 350.103 195.66 cv
348.903 195.66 li
348.863 195.22 348.713 194.92 348.433 194.75 cv
348.163 194.59 347.843 194.51 347.473 194.51 cv
347.033 194.51 346.633 194.68 346.273 195.03 cv
345.903 195.37 345.723 195.93 345.723 196.7 cv
345.723 197.47 345.903 198.02 346.273 198.37 cv
346.633 198.72 347.033 198.89 347.473 198.89 cv
347.953 198.89 348.333 198.76 348.623 198.51 cv
348.923 198.25 349.063 197.85 349.063 197.3 cv
cp
357.393 199.77 mo
356.133 199.77 li
354.163 196.42 li
352.903 197.63 li
352.903 199.77 li
351.803 199.77 li
351.803 190.39 li
352.903 190.39 li
352.903 196.37 li
355.643 193.63 li
357.013 193.63 li
354.873 195.71 li
cp
364.313 197.69 mo
364.243 198.34 363.943 198.87 363.433 199.28 cv
362.923 199.68 362.323 199.88 361.623 199.88 cv
360.743 199.88 360.023 199.6 359.463 199.03 cv
358.893 198.46 358.613 197.69 358.613 196.7 cv
358.613 195.71 358.893 194.93 359.463 194.37 cv
360.023 193.8 360.743 193.52 361.623 193.52 cv
362.393 193.52 363.023 193.76 363.513 194.26 cv
364.013 194.75 364.253 195.57 364.253 196.7 cv
359.813 196.7 li
359.813 197.5 359.993 198.07 360.333 198.4 cv
360.683 198.73 361.113 198.89 361.623 198.89 cv
362.023 198.89 362.353 198.79 362.613 198.59 cv
362.873 198.39 363.033 198.09 363.103 197.69 cv
cp
362.993 195.82 mo
362.923 195.31 362.763 194.95 362.503 194.75 cv
362.243 194.55 361.913 194.45 361.513 194.45 cv
361.153 194.45 360.823 194.55 360.533 194.75 cv
360.233 194.95 360.013 195.31 359.873 195.82 cv
cp
371.053 199.61 mo
370.873 199.68 370.663 199.74 370.423 199.8 cv
370.183 199.85 369.863 199.88 369.463 199.88 cv
368.803 199.88 368.273 199.7 367.873 199.33 cv
367.473 198.97 367.273 198.45 367.273 197.8 cv
367.273 194.51 li
365.403 194.51 li
365.403 193.63 li
367.273 193.63 li
367.273 191.49 li
368.363 191.49 li
368.363 193.63 li
370.613 193.63 li
370.613 194.51 li
368.363 194.51 li
368.363 197.85 li
368.363 198.14 368.443 198.39 368.583 198.59 cv
368.733 198.79 369.003 198.89 369.403 198.89 cv
369.813 198.89 370.143 198.86 370.393 198.78 cv
370.653 198.71 370.873 198.62 371.053 198.51 cv
cp
378.013 198.07 mo
378.013 198.66 377.783 199.1 377.323 199.41 cv
376.873 199.72 376.293 199.88 375.603 199.88 cv
374.723 199.88 374.043 199.71 373.573 199.36 cv
373.093 199.01 372.853 198.51 372.853 197.85 cv
373.953 197.85 li
373.953 198.29 374.113 198.58 374.423 198.73 cv
374.733 198.87 375.103 198.95 375.543 198.95 cv
375.983 198.95 376.313 198.87 376.533 198.7 cv
376.753 198.54 376.863 198.33 376.863 198.07 cv
376.863 197.89 376.773 197.7 376.583 197.52 cv
376.403 197.34 375.943 197.19 375.213 197.08 cv
374.373 196.97 373.803 196.76 373.493 196.45 cv
373.173 196.14 373.023 195.73 373.023 195.22 cv
373.023 194.78 373.233 194.39 373.653 194.04 cv
374.073 193.69 374.683 193.52 375.493 193.52 cv
376.223 193.52 376.793 193.68 377.213 194.01 cv
377.643 194.34 377.853 194.78 377.853 195.33 cv
376.753 195.33 li
376.753 195 376.633 194.77 376.393 194.64 cv
376.153 194.51 375.853 194.45 375.493 194.45 cv
375.013 194.45 374.673 194.53 374.473 194.7 cv
374.273 194.86 374.173 195.05 374.173 195.27 cv
374.173 195.53 374.263 195.73 374.453 195.88 cv
374.633 196.02 375.013 196.13 375.603 196.21 cv
376.553 196.35 377.193 196.58 377.523 196.89 cv
377.853 197.2 378.013 197.59 378.013 198.07 cv
cp
f
grestore
290.323 208.12 mo
414.523 208.12 li
414.523 175.72 li
290.323 175.72 li
cp
.0065919 .38822 .472999 0 cmyk
ef
290.323 208.12 mo
414.523 208.12 li
414.523 175.72 li
290.323 175.72 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
0 sep
/VRPZGM+SimHei-GBK-EUC-H-Identity-H findfont [14.04 0 0 -14.04 0 0 ]msf
327.903 197.99 mo
(\000V\000R\000F\000N\000H\000W\000V)
[7.06213 6.96384 6.96384 7.0621 6.96384 6.96384 0 ]xsh
172.363 185.06 mo
279.963 185.06 li
279.963 186.06 li
172.363 186.06 li
cp
279.963 185.56 mo
277.963 182.56 li
283.963 185.56 li
277.963 188.56 li
cp
1 /0 /CSD get_res sepcs
1 sep
f
283.963 198.86 mo
176.363 198.86 li
176.363 199.86 li
283.963 199.86 li
cp
176.363 199.36 mo
178.363 196.36 li
172.363 199.36 li
178.363 202.36 li
cp
f
%ADOBeginSubsetFont: VRPZGN+DengXian-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (VRPZGN+DengXian-GBK-EUC-H)
%%Title: (VRPZGN+DengXian-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /VRPZGN+DengXian-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-141 -253 1151 954} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 29235 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 11 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
28612 <001C60D8A8C9B78C66ECFB0787869A9A1A23E44B3E9AC19DF9D3CAD17
2DB0C5BD42A48D92FB57C46F18F7186> |
28611 <001C60D8A8C9B78C66ECDDCB4A31B71CF1B471418D658A1BE1B520F02
65AA7AC34644C5EABA639C18B14B6949B9B765938D8D07FC6BCCB4CE1CD5D830
F911203004567794A3B4AF38AF2CB559D9D9F05F95F1CADFACE76DFED6FDC69D
44D60ACDAF6EDA57FE4BDB361FCFCACF73865443A9663D673E91191E89511BF1
A6B0ED83D875E207CDA526DBC> |
28613 <001C60D8A8C9B78C66ECF39464E4C36A41875CA13B3F1084BE95AC3D6
B174FBE334F26768C74B2ECC4CAD6BBADA966160EFCC7F2747E70E0119D6AEC1
B017FF7666859BBB2EDC8A44058072DB251CD7C890E5801C60DCDEC2DC5E66B6
27F3C4E46C8D576EB2D7BE3EC5C6EC7CA35C52158FC62F188AA92F4A597AA61B
2CBCDB07E050E80BB022F1A82> |
28620 <001C60D8A8C9B78C66ECAC4886F11897B8D21B1E1D14E352B90053C3C
E0D87E003B4771395F95A68A16211C78EF4C757DC187FF2965BAF6E1F3DD510F
A55771F7BF7C829AA8D6C3CF626C4E80E9021264EF74AE7EE8FEAF6972262EA9
ECB8901C596D92B2BB245DB403B1F42BE81844C530BB42205C8E8E78A78287B2
B5A2F5BC2779BD7A45F4E98E11E132BC85BC0BB709A315F048990D3E7268161D
601DC217209DE04D46433380E7152B6EF289572C364C2A22D05> |
28614 <001C60D8A8C9B78C66ECDB6140BE188B7AE32EC2E6019387F28A4D7BE
FD974FECF9A6F435E80E22F5012EC52C00C178C2C2233F0B02C6B10EBA64AD22
230138C4945FB4B066D7E42C2C6EFB71864F1E255E0A8537DA22ADB3D546CB61
607C115C7A490FEE823B22C59C8C165CEA3BA45F26ED3655E00609C70321AC2E
2A2A318B590A3969C48D77B80570739FD2C391323D888FB7CCA532472D5F05C1
B478B862C545672D9550E95CD5D79AEB7716096AD08C7A6D17AAF6F6AA3FE1AB
AEC80F85A> |
28619 <001C60D8A8C9B78C66ECD5488D579047B239C54C624A020C31F1826B0
F16C5909608B14476F5A930293AA6BE740A4F5A140DFDDD4E0958C1A52E4FBF6
BA81B0D638051C0E8D1E2D2009555C79DF5EF428E3AB8105A28DC840928CB64E
D9EAFFCF7368A493D280C274A8330D43887F88981244A989D0ACD146FBADC503
B6AAD299C122524F4F9A4E1BD3F87EF997F6B2BDF74FADEE69B2E551CD72B9D1
72C9799A7DDF4F816AC1A7DD7ADA9B720DDF8501D420670D8354A38C2F839B67
C321B6B8AB70310D30EBC4494DD1896C85773999A629B4EBC26C918FA7D75D61
700FBE81143935EA816370E8F4BE4120DA73EB73559368A2975308988C646D81
DC1> |
28615 <001C60D8A8C9B78C66ECE3FE51EC4A6C00F5F743D3A964A65A3B26B4A
BA75D1C6449C63EC7E2BD2BAFDE22A96CAB5112BA62956C94C83D> |
28618 <001C60D8A8C9B78C66ECF7D3BA67398AE9E49D48F332AD68055040EFD
C570015E965A8417FD47DE058ACCDDAB1162F2B6CC25E70521D0871F7A1> |
28616 <001C60D8A8C9B78C66ECA399DB3215B61D1045333ECE760DE944D4DAD
58E494E9686CE6E0B7F3BE1F35A93B5423265BA3893C04B714A69913AF9D9779
23B3C20D3D2AA76C91C82C1C386A7D46DE7E32B075962CCF06380F2D2F2120A6
00588A3E6789AEFC99A5B99FAD22A2D4F5D95FBB7D27994C4F36761D753099D0
4D937122FCF22470C8A4DB2D425FA5D9B241F> |
28617 <001C60D8A8C9B78C66ECA5FCAD2AAB40A4192A68649CE4047E4AFAECB
7CCE984F38B8B50E6233F27BD605D687743F24A7E136BA1908054D9AA8AAE8FA
60DFE236222616415444B0B8B81E9B590E20EC5E2AE4CA73CFE760E5978319FB
10D6E85D90B0F0670931F7021C1540F7F59AF2F4001DC35F63939A901107334C
C707991D976B1159441A0F1ACA86EE9A9885D2AA13CD06CBBC97DCCE8B0B6519
440F899D41BA7449252C8DAEFBE21085C577DFAE8E5250EB7438F2FCF6755F16
B841A2282B2> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /VRPZGN+DengXian-GBK-EUC-H-Identity-H /Identity-H 0 [/VRPZGN+DengXian-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/VRPZGN+DengXian-GBK-EUC-H-Identity-H findfont [11.064 0 0 -11.064 0 0 ]msf
63.5926 83.8698 mo
(o\304)sh
139.263 83.8698 mo
(o\304o\303)
[5.75995 0 ]xsh
/VRPZGN+DengXian-GBK-EUC-H-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
62.9726 160.24 mo
(o\305)sh
140.873 163.58 mo
(o\314)sh
220.653 180.83 mo
(o\306)sh
220.653 216.81 mo
(o\313)sh
/VRPZGN+DengXian-GBK-EUC-H-Identity-H findfont [11.064 0 0 -11.064 0 0 ]msf
388.843 163.48 mo
(o\307)sh
310.053 163.48 mo
(o\312)sh
387.903 92.6998 mo
(o\310)sh
/VRPZGN+DengXian-GBK-EUC-H-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
310.053 92.0598 mo
(o\311)sh
1.5 lw
10.0626 260.74 mo
443.683 260.74 li
@
%ADOBeginSubsetFont: VRPZGO+DengXian-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (VRPZGO+DengXian-GBK-EUC-H)
%%Title: (VRPZGO+DengXian-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /VRPZGO+DengXian-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-141 -253 1151 954} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 29235 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 6 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
10913 <001C60D8A8C9B5EE310D039C063215ABAF14CB7EB2F2D9D63C6E57358
B37589E9362BCE32E0CB978EDFFA59216D3A360B5C7D17F3FC27A3D2FADF99D2
8E2AE7213A9F5913BBF4B816DA830098C44C8C0EAE12B3CD7343A1AC9D5EB76C
48FE40124D74EE7474B0DB58BB0AC3FEB954F33FDED306AB43680553A0C385A8
9D3D5AD7CF96CBD37D66EFBB16EDE779566597C287D3D41BDF4C4109019BABE0
134E0C5D9F552CCD0635B63C50973B1D8BD0CD2402AF3D6797692263C9966A83
BBB81B99D0D3FB75ACA0D0CD629152AAEBADCEEA71539D5F543339D05D7C4BF4
423AD731A84AED73B8FB6793BAF823EA7FE3D7E0DEA84B2F17F077C11D1F1045
94079A92CFEC36DAC5C90932769E512BDA3640B35754D72ED9787AF7AF67C161
D4AEDF98077CFD330A9BD3256FB45A33C283BCA31014E614FC6464E51C523F0F
01BA27071EB81950A49AC4743BECD09DD59F1512785EDDA15CDE0EFCEDD4436C
0C98C52DB5B0F4D93CA4E034619D50655D1> |
12598 <001C60D8A8C9B5EE31036E528E8201F4FDC86AC119EA43C5853D1B925
6CF5060EA944EAFDB8AC232A3841EC247AA921C7D4BE063ABB4E9AE3B19BD067
97E89333FB0A02580349F63E1180AD19BEF777A8E990FD2806A382231AD8E9AF
5E6EC873E8CBD08F9BDBE7ACF9594B555EA5B8600D66D33D9BC6FB9239E94B06
4D3FD4DD05502D71EE4585064> |
18926 <001C60D8A8C9B5EE3136413135376160BFF45564430871F7A918E1034
A453CD48EF85CDF19C292F0F4F6C8118558FFFACC184EC5B0F7EA3B901B4693C
4190C7A61B108B7D9032AD79538C501C5DCD69F35421D85EEAEC488A5D603987
E839821D1A553786442CE103F69C4AFDAC16553F6B60793AE9830D83ACBA913B
B50EDC2CEE95935C491F0C16F1D44CECAB6A07DA3118C58D6111760B0D62ED13
C9D714BED3352B2AFA6B87FA60BA5565AB5DCF8D9EBCBB18690493686CC5F18E
55B68F864F24AA108C88D51107DB0E9984B0055C1BE0B60EC680EAAFFEEE8779
FCF77A833BFAF500D86EDE4115D0D1D9C7565FACEFB856A9BDF58820E529C9B4
4F914AE5E3DFA9790A8C1A0CF810D6D15C37935439F7AAFAB3CC6ACF8D2F965E
D32294365D98D1B9509B82D5178313236D1550C0F4C7863EA7A618D838976ECB
5C9D2D85D2A3EF442D22F09D14D1424718890A0C8C17716ED01F808FA29B9498
B3617D50144CDB4B625BB1DF5BE06E342DE0666D6E4498FEB13B3F609452B04C
658C42E470F0B501DCEE56C9E26DA790CE95C9C9BE0FCCE4884158E16DBFCC06
C0F320C29416B9F18A7B666B99AE7B2B320DC44863A55DA6942B9018D88EE8A9
F02C7401DEF8E5B76F0D4F33D3A42B43A309F4FC6E3B3F515DA007CCC8244D88
61F64CFAC35A4BE2548BB7D5EF6578BC01BF6C6704FBFD2EAA90D693B0B07ED9
BFADE9C2D9ECF33C90C53EFB09DBFDC4B9291E0F92890772A88468E76F1E8EC> |
13836 <001C60D8A8C9B5EE31035F6BEF416ABC4C871C82A9500825BA859166D
5CE991883FBFB2CA01E721AD5472C23D3F57522A5493EFF5AED681E9895690DD
74BFBB6D6F202261D68544A8E0FF92B291FA1675F8991F3D29AD5548481A95F2
C77C4AC5E9C2BA6CEB0B110AF522C276C93A9E8AC6D7E72BAAEC58F1610A8C3C
455836A2D8113FBD7FF57205689E669CC6D89FB7C0B7AE5FE4393C4E0994C21A
5E3054451E630C92735BA6DA7BC15AA31930FF1C28EB4DE98BFAF11B95CB44D7
F480D7E08F47D3197BFCC1CFC05B525C1F68C1524A74A8DD12001D64128E6C0C
5DB4F145A39E5E83EF343931AF84E9EB26B3CF1099C4A2DB5FFF3D7DA17FE774
A84F3D5DCDACEBFD945F0D6DD9E98BEE9F5D50549197818974CDF98252239E57
6DAB247DC1E549A210C8D61587F63584DCBACD00056A7904C93A7AA378FCB75D
C133A93796001F0FB91C500E53A458081DD9C8E1D460366E40FF1EDAABA2424D
6EC40CEF5DAC989A4386F1D7F23F10CA7F71A35379B90321DE996F1> |
8608 <001C60D8A8C9B5EE311443535A766477B413C605A05466B748157CDE20
A0BA101D2AA72AED877064E3EA016164F58C62B231A37899821D931BD278235A
738FC8998062A9ADCF1F88E11EE332719DD0F81CAA145FD9A929D0FCEC681037
E2C64B34D9857D159301D1877B9CAEDE48E5893D18BAFA8194E374EA9C51B832
FD2B6DB75A45ADE4A745F32445334C3C6335FB93EFC44064DF9E67E4F1024A7F
1341C42B0CFFA6487A5D2D8D5C25BF736EB824F602A402E0581A95121C149368
E7CCF0FAC21E8E5E5A8403FC12757915A71593809B93098AA7569A1F6DF7CCCA
D249BC11825AD11189EE170667ABCAEBF834BC19148AB3350A3FB86F31F65E57
89C8B502F296F7EF103C12275814BCD1D42226A44BEE5E2C525063EA4559A00E
CEA4695BC3E839112FEC727290D3C9D9518BF5886952CC8054A9974EC9C69E6B
BFA2AD18E7BFD8EF2074CC28444EF9470C944B2CB7> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /VRPZGO+DengXian-GBK-EUC-H-Identity-H /Identity-H 0 [/VRPZGO+DengXian-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/VRPZGO+DengXian-GBK-EUC-H-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
87.0926 256.14 mo
(*\24116I\356)sh
335.513 255.57 mo
(6\014!\240I\356)sh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/VRPZGM+SimHei-GBK-EUC-H-Identity-H uf
/VRPZGM+SimHei-GBK-EUC-H /CIDFont ur
/VRPZGL+SimHei-GBK-EUC-H-Identity-H uf
/VRPZGL+SimHei-GBK-EUC-H /CIDFont ur
/VRPZGO+DengXian-GBK-EUC-H-Identity-H uf
/VRPZGO+DengXian-GBK-EUC-H /CIDFont ur
/VRPZGN+DengXian-GBK-EUC-H-Identity-H uf
/VRPZGN+DengXian-GBK-EUC-H /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
