%!PS-Adobe-3.1
%ADO_DSC_Encoding: Windows Roman
%%Title: image-visio.pdf
%%Creator: Adobe Acrobat 21.7.0
%%For: Alaric
%%CreationDate: 2022/5/10, 3:18:04
%%BoundingBox: 0 0 411 385
%%HiResBoundingBox: 0 0 410.4540 384.7021
%%CropBox: 0 0 410.4540 384.7021
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1132 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.0-c000 79.1357c9e, 2021/07/14-00:39:56        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   pdf:Producer="Microsoft® Visio® 2019"
   pdf:Keywords=""
   dc:format="application/pdf"
   xmp:CreatorTool="Microsoft® Visio® 2019"
   xmp:CreateDate="2022-05-10T03:17:05+08:00"
   xmp:ModifyDate="2022-05-10T03:17:05+08:00"
   xmpMM:DocumentID="uuid:24D135E5-190D-4932-8F82-6CC861D55F91"
   xmpMM:InstanceID="uuid:24D135E5-190D-4932-8F82-6CC861D55F91">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>许 皓钦</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
<</PageSize [410.454 384.702 ] >> setpagedevice
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -384.702 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 384.702 li
410.454 384.702 li
410.454 0 li
cp
clp
gsave
-.0293159 385.471 mo
410.971 385.471 li
410.971 -.528945 li
-.0293159 -.528945 li
-.0293159 385.471 li
clp
gsave
-52.0294 742.471 mo
543.171 742.471 li
543.171 -99.3289 li
-52.0294 -99.3289 li
-52.0294 742.471 li
eclp
.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
-52.0294 742.561 mo
543.251 742.561 li
543.251 -99.3292 li
-52.0294 -99.3292 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
@
grestore
4.66368 230.911 mo
341.984 230.911 li
341.984 2.56103 li
4.66368 2.56103 li
4.66368 230.911 li
false sop
1 /0 /CSD get_res sepcs
0 sep
ef
.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
4.66361 230.911 mo
341.984 230.911 li
341.984 2.5611 li
4.66361 2.5611 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
14.8396 11.7011 mo
15.7686 12.3211 16.7996 13.1212 17.9336 14.0911 cv
18.3806 13.5311 18.7676 12.9911 19.0936 12.4711 cv
19.4206 11.9511 19.6696 11.5111 19.8416 11.1311 cv
21.0276 11.8811 li
20.7186 11.9511 20.3396 12.2512 19.8936 12.8011 cv
19.4466 13.3511 18.9826 13.9211 18.5006 14.5111 cv
19.7386 15.5711 20.4086 16.2411 20.5116 16.5311 cv
20.6146 16.8112 20.6666 17.0311 20.6666 17.1812 cv
20.6666 17.3411 20.6236 17.5012 20.5376 17.6711 cv
20.4516 17.8511 20.3916 17.9312 20.3576 17.9312 cv
20.2546 17.9312 20.1166 17.7811 19.9446 17.4611 cv
19.6696 17.0311 19.3866 16.6311 19.0936 16.2711 cv
18.8016 15.9111 18.4496 15.5111 18.0366 15.0711 cv
17.3146 15.7911 16.6276 16.4011 15.9746 16.9011 cv
15.3216 17.4011 14.7366 17.7911 14.2216 18.0711 cv
14.1186 17.9312 li
14.7366 17.4611 15.3216 16.9711 15.8716 16.4511 cv
16.4216 15.9411 16.9716 15.3211 17.5216 14.6011 cv
16.5936 13.6011 15.6476 12.6812 14.6856 11.8411 cv
cp
13.1896 10.0612 mo
20.8726 10.0612 li
21.5946 9.40112 li
22.5746 10.3411 li
13.1896 10.3411 li
13.1896 19.1011 li
21.0796 19.1011 li
21.8006 18.4511 li
22.7296 19.3811 li
13.2416 19.3811 li
12.9326 19.8112 li
12.1586 19.2411 li
12.4686 18.9611 li
12.4686 11.2311 li
12.4686 10.9511 12.4506 10.4211 12.4166 9.6311 cv
cp
31.7526 12.0711 mo
31.7526 13.1311 31.7186 14.1711 31.6496 15.1711 cv
33.9696 15.1711 li
33.9696 12.0711 li
cp
31.0306 11.7911 mo
31.0306 10.6011 31.0136 9.70111 30.9796 9.07111 cv
32.3196 9.54114 li
31.7526 9.92114 li
31.7526 11.7911 li
33.8666 11.7911 li
34.2796 11.2811 li
35.1556 11.8811 li
34.6916 12.2611 li
34.6916 15.1711 li
34.8976 15.1711 li
35.5686 14.5612 li
36.5476 15.4511 li
32.2166 15.4511 li
32.5946 16.4211 33.1446 17.2311 33.8666 17.8811 cv
34.5886 18.5411 35.4646 18.9811 36.4966 19.2011 cv
36.4966 19.3811 li
35.8776 19.4211 35.4826 19.6212 35.3106 19.9911 cv
34.3136 19.3411 33.5396 18.6011 32.9896 17.7911 cv
32.4396 16.9811 32.0966 16.2011 31.9586 15.4511 cv
31.5976 15.4511 li
31.3916 16.7611 30.8756 17.7411 30.0506 18.4011 cv
29.2256 19.0612 28.0746 19.6212 26.5966 20.0911 cv
26.4416 19.9011 li
27.7826 19.4011 28.8136 18.8112 29.5356 18.1212 cv
30.2576 17.4312 30.7036 16.5411 30.8756 15.4511 cv
29.5356 15.4511 li
29.0886 15.4511 28.6756 15.4911 28.2976 15.5911 cv
27.8336 15.1711 li
30.9276 15.1711 li
30.9966 14.2611 31.0306 13.2311 31.0306 12.0711 cv
30.4636 12.0711 li
30.0166 12.0711 29.6036 12.1212 29.2256 12.2111 cv
28.7616 11.7911 li
cp
26.4936 12.7311 mo
26.4936 10.9511 26.4756 9.78113 26.4416 9.21112 cv
27.7306 9.73114 li
27.2146 10.1011 li
27.2146 12.7311 li
27.9366 12.7311 li
28.5556 12.1711 li
29.4836 13.0111 li
27.2146 13.0111 li
27.2146 16.8511 li
29.4836 16.3811 li
29.5356 16.5711 li
27.8166 17.1011 26.6476 17.4911 26.0286 17.7411 cv
25.4106 17.9911 25.0666 18.2011 24.9976 18.3511 cv
24.4306 17.3712 li
24.9116 17.3112 25.5996 17.2011 26.4936 17.0411 cv
26.4936 13.0111 li
26.0806 13.0111 li
25.6336 13.0111 25.2216 13.0612 24.8436 13.1511 cv
24.3786 12.7311 li
cp
45.8296 11.4211 mo
45.4856 12.2311 45.1416 13.0711 44.7976 13.9511 cv
46.1386 13.9511 li
46.1386 13.2011 46.1216 12.5911 46.0866 12.1212 cv
47.2726 12.5911 li
46.8606 12.9611 li
46.8606 13.9511 li
47.7366 13.9511 li
48.3606 13.4312 li
49.2306 14.2311 li
46.8606 14.2311 li
46.8606 16.0612 li
47.9906 16.0612 li
48.6606 15.4911 li
49.5406 16.3411 li
46.8606 16.3411 li
46.8606 17.3411 46.8776 18.1311 46.9116 18.7311 cv
46.0866 19.0111 li
46.1216 18.2911 46.1386 17.4011 46.1386 16.3411 cv
45.2106 16.3411 li
44.7636 16.3411 44.3506 16.3811 43.9726 16.4811 cv
43.5086 16.0612 li
46.1386 16.0612 li
46.1386 14.2311 li
44.7466 14.2311 li
44.3856 14.6011 li
43.7146 13.9511 li
44.1786 13.7111 li
44.4196 13.2111 44.7296 12.4511 45.1076 11.4211 cv
44.6946 11.4211 44.2996 11.4611 43.9216 11.5612 cv
43.4576 11.1311 li
45.2106 11.1311 li
45.4856 10.2611 45.6576 9.59113 45.7256 9.12115 cv
46.8086 9.68115 li
46.3966 9.92114 li
46.2586 10.2611 46.1046 10.6711 45.9326 11.1311 cv
47.9436 11.1311 li
48.5606 10.5711 li
49.3906 11.4211 li
cp
42.0646 10.3411 mo
42.7526 10.8712 43.1476 11.2311 43.2506 11.4211 cv
43.3536 11.6011 43.4056 11.7411 43.4056 11.8411 cv
43.4056 12.0311 43.3286 12.1911 43.1736 12.3311 cv
43.0186 12.4711 42.9076 12.5411 42.8386 12.5411 cv
42.7356 12.5411 42.6666 12.4011 42.6326 12.1212 cv
42.5636 11.6812 42.3226 11.1212 41.9106 10.4312 cv
cp
40.9306 19.2011 mo
41.6186 18.7911 42.1686 18.4811 42.5806 18.2611 cv
42.5806 14.4611 li
42.2716 14.4611 41.9276 14.5111 41.5496 14.6011 cv
41.0856 14.1812 li
42.5286 14.1812 li
42.8896 13.7611 li
43.6636 14.3712 li
43.2506 14.6511 li
43.2506 18.2111 li
43.6636 18.6212 44.1786 18.8811 44.7976 19.0111 cv
45.4166 19.1311 46.0356 19.2011 46.6546 19.2011 cv
47.4106 19.2011 48.4106 19.1311 49.6406 19.0111 cv
49.6406 19.2011 li
49.1306 19.3211 48.8506 19.5612 48.8206 19.9011 cv
46.7226 19.9011 45.3736 19.7811 44.7716 19.5511 cv
44.1706 19.3112 43.7146 19.0411 43.4056 18.7311 cv
43.2686 18.6011 43.1306 18.5411 42.9936 18.5411 cv
42.7866 18.5411 42.5466 18.6711 42.2716 18.9411 cv
41.9966 19.2011 41.7726 19.4811 41.6006 19.7611 cv
cp
40.1056 18.1711 mo
41.8076 17.4211 li
41.9106 17.5612 li
40.7076 18.3411 40.0196 18.9511 39.8476 19.3811 cv
39.1776 18.7311 li
39.3496 18.5711 39.4186 18.3411 39.3836 18.0311 cv
39.3836 15.4911 li
39.2806 15.4911 li
38.8336 15.4911 38.4216 15.5411 38.0436 15.6311 cv
37.5786 15.2111 li
39.3836 15.2111 li
39.3836 13.3411 li
38.3526 13.3411 li
38.1116 13.6212 37.8716 13.8511 37.6306 14.0411 cv
37.5276 13.9511 li
38.2836 12.8211 38.9196 11.2611 39.4356 9.26111 cv
40.4666 9.82111 li
40.2606 9.95111 40.0886 10.1311 39.9506 10.3811 cv
39.8136 10.6311 39.6756 10.9211 39.5386 11.2311 cv
40.6726 11.2311 li
41.2916 10.5711 li
42.1686 11.5111 li
39.4356 11.5111 li
39.1256 12.0711 38.8166 12.5911 38.5076 13.0612 cv
40.5186 13.0612 li
41.1366 12.5411 li
41.9106 13.3411 li
40.1056 13.3411 li
40.1056 15.2111 li
40.7756 15.2111 li
41.3436 14.7011 li
42.1166 15.4911 li
40.1056 15.4911 li
cp
53.5106 18.5911 mo
59.6006 18.4911 li
59.2206 17.8712 58.6706 17.1511 57.9506 16.3411 cv
58.1006 16.2011 li
59.3706 17.1311 60.1506 17.8112 60.4506 18.2111 cv
60.7406 18.6212 60.8806 18.9312 60.8806 19.1511 cv
60.8806 19.3411 60.8106 19.5211 60.6506 19.6911 cv
60.5006 19.8611 60.3906 19.9511 60.3206 19.9511 cv
60.2506 19.9511 60.1606 19.8411 60.0606 19.6212 cv
59.9206 19.2411 59.8006 18.9511 59.7006 18.7311 cv
56.4006 18.9511 54.5306 19.1011 54.0806 19.2011 cv
53.6306 19.2911 53.2906 19.4211 53.0506 19.5711 cv
52.4806 18.5911 li
52.7606 18.5911 53.1006 18.3811 53.5106 17.9811 cv
53.9206 17.5711 54.4806 16.8811 55.1906 15.9211 cv
55.8906 14.9511 56.3606 14.0911 56.6106 13.3411 cv
57.7406 14.1311 li
57.1706 14.3712 li
55.9006 16.1212 54.6806 17.5311 53.5106 18.5911 cv
cp
55.1606 9.54114 mo
56.3506 10.2411 li
55.7806 10.5311 li
54.6506 12.7111 53.1706 14.3511 51.3506 15.4511 cv
51.1906 15.3112 li
52.4606 14.2111 53.4206 13.1411 54.0506 12.1011 cv
54.6906 11.0511 55.0606 10.2011 55.1606 9.54114 cv
cp
58.6206 9.54114 mo
58.1506 9.82111 li
58.4606 10.7911 59.0006 11.7411 59.7806 12.6611 cv
60.5506 13.5811 61.5206 14.2111 62.6906 14.5612 cv
62.6906 14.7011 li
62.1406 14.7011 61.7406 14.8811 61.5006 15.2611 cv
60.5406 14.5711 59.7106 13.7311 59.0006 12.7311 cv
58.3006 11.7311 57.8306 10.5612 57.5806 9.21112 cv
cp
68.0506 13.2411 mo
68.0506 14.8811 li
72.8006 14.8811 li
72.8006 13.2411 li
cp
68.0506 15.1711 mo
68.0506 16.7111 li
72.8006 16.7111 li
72.8006 15.1711 li
cp
70.9906 18.9211 mo
71.5806 19.0111 72.0206 19.0612 72.3306 19.0612 cv
72.6406 19.0612 72.8006 18.9211 72.8006 18.6311 cv
72.8006 16.9911 li
68.0506 16.9911 li
68.0506 19.6711 li
67.2806 20.0911 li
67.3106 19.5612 67.3306 17.5311 67.3306 13.9911 cv
66.3706 14.9312 65.3206 15.7111 64.1806 16.3411 cv
64.0306 16.2011 li
64.9906 15.5111 65.8306 14.8011 66.5306 14.0612 cv
67.2406 13.3311 67.9106 12.4011 68.5706 11.2811 cv
65.7306 11.2811 li
65.2806 11.2811 64.8706 11.3211 64.4906 11.4211 cv
64.0306 10.9911 li
68.6706 10.9911 li
69.0506 10.2111 69.2906 9.57111 69.3906 9.07111 cv
70.6806 9.73114 li
70.1706 9.92114 li
69.9306 10.3511 69.7206 10.7111 69.5506 10.9911 cv
73.9306 10.9911 li
74.8106 10.2011 li
75.9906 11.2811 li
69.4406 11.2811 li
69.0706 11.9011 68.6706 12.4611 68.2606 12.9611 cv
72.6906 12.9611 li
73.1106 12.4911 li
73.9806 13.1011 li
73.5206 13.4312 li
73.5206 18.9611 li
73.5206 19.4611 73.1406 19.8411 72.3806 20.0911 cv
72.4206 19.7111 71.9506 19.4011 70.9906 19.1511 cv
cp
85.4306 11.4211 mo
85.0806 12.2311 84.7406 13.0711 84.4006 13.9511 cv
85.7406 13.9511 li
85.7406 13.2011 85.7206 12.5911 85.6906 12.1212 cv
86.8706 12.5911 li
86.4606 12.9611 li
86.4606 13.9511 li
87.3406 13.9511 li
87.9606 13.4312 li
88.8306 14.2311 li
86.4606 14.2311 li
86.4606 16.0612 li
87.5906 16.0612 li
88.2606 15.4911 li
89.1406 16.3411 li
86.4606 16.3411 li
86.4606 17.3411 86.4806 18.1311 86.5106 18.7311 cv
85.6906 19.0111 li
85.7206 18.2911 85.7406 17.4011 85.7406 16.3411 cv
84.8106 16.3411 li
84.3606 16.3411 83.9506 16.3811 83.5706 16.4811 cv
83.1106 16.0612 li
85.7406 16.0612 li
85.7406 14.2311 li
84.3506 14.2311 li
83.9806 14.6011 li
83.3106 13.9511 li
83.7806 13.7111 li
84.0206 13.2111 84.3306 12.4511 84.7106 11.4211 cv
84.2906 11.4211 83.9006 11.4611 83.5206 11.5612 cv
83.0606 11.1311 li
84.8106 11.1311 li
85.0806 10.2611 85.2606 9.59113 85.3306 9.12115 cv
86.4106 9.68115 li
86.0006 9.92114 li
85.8606 10.2611 85.7006 10.6711 85.5306 11.1311 cv
87.5406 11.1311 li
88.1606 10.5711 li
88.9906 11.4211 li
cp
81.6606 10.3411 mo
82.3506 10.8712 82.7506 11.2311 82.8506 11.4211 cv
82.9506 11.6011 83.0106 11.7411 83.0106 11.8411 cv
83.0106 12.0311 82.9306 12.1911 82.7706 12.3311 cv
82.6206 12.4711 82.5106 12.5411 82.4406 12.5411 cv
82.3306 12.5411 82.2706 12.4011 82.2306 12.1212 cv
82.1606 11.6812 81.9206 11.1212 81.5106 10.4312 cv
cp
80.5306 19.2011 mo
81.2206 18.7911 81.7706 18.4811 82.1806 18.2611 cv
82.1806 14.4611 li
81.8706 14.4611 81.5306 14.5111 81.1506 14.6011 cv
80.6806 14.1812 li
82.1306 14.1812 li
82.4906 13.7611 li
83.2606 14.3712 li
82.8506 14.6511 li
82.8506 18.2111 li
83.2606 18.6212 83.7806 18.8811 84.4006 19.0111 cv
85.0206 19.1311 85.6306 19.2011 86.2506 19.2011 cv
87.0106 19.2011 88.0106 19.1311 89.2406 19.0111 cv
89.2406 19.2011 li
88.7306 19.3211 88.4506 19.5612 88.4206 19.9011 cv
86.3206 19.9011 84.9706 19.7811 84.3706 19.5511 cv
83.7706 19.3112 83.3106 19.0411 83.0106 18.7311 cv
82.8706 18.6011 82.7306 18.5411 82.5906 18.5411 cv
82.3906 18.5411 82.1506 18.6711 81.8706 18.9411 cv
81.6006 19.2011 81.3706 19.4811 81.2006 19.7611 cv
cp
79.7106 18.1711 mo
81.4106 17.4211 li
81.5106 17.5612 li
80.3106 18.3411 79.6206 18.9511 79.4506 19.3811 cv
78.7806 18.7311 li
78.9506 18.5711 79.0206 18.3411 78.9806 18.0311 cv
78.9806 15.4911 li
78.8806 15.4911 li
78.4306 15.4911 78.0206 15.5411 77.6406 15.6311 cv
77.1806 15.2111 li
78.9806 15.2111 li
78.9806 13.3411 li
77.9506 13.3411 li
77.7106 13.6212 77.4706 13.8511 77.2306 14.0411 cv
77.1306 13.9511 li
77.8806 12.8211 78.5206 11.2611 79.0306 9.26111 cv
80.0706 9.82111 li
79.8606 9.95111 79.6906 10.1311 79.5506 10.3811 cv
79.4106 10.6311 79.2806 10.9211 79.1406 11.2311 cv
80.2706 11.2311 li
80.8906 10.5711 li
81.7706 11.5111 li
79.0306 11.5111 li
78.7306 12.0711 78.4206 12.5911 78.1106 13.0612 cv
80.1206 13.0612 li
80.7406 12.5411 li
81.5106 13.3411 li
79.7106 13.3411 li
79.7106 15.2111 li
80.3806 15.2111 li
80.9406 14.7011 li
81.7206 15.4911 li
79.7106 15.4911 li
cp
95.2806 9.21112 mo
95.4306 9.07111 li
96.5306 9.57111 97.0906 9.96112 97.1106 10.2411 cv
97.1206 10.5311 97.0606 10.7311 96.9006 10.8511 cv
96.7506 10.9811 96.6506 11.0411 96.6206 11.0411 cv
96.4806 11.0411 96.3606 10.9011 96.2606 10.6212 cv
96.0806 10.2111 95.7606 9.74115 95.2806 9.21112 cv
cp
90.6406 11.1311 mo
100.331 11.1311 li
101.161 10.3811 li
102.291 11.4211 li
92.2906 11.4211 li
91.8706 11.4211 91.4806 11.4611 91.1006 11.5612 cv
cp
94.3006 11.7011 mo
95.2306 12.4511 li
94.7106 12.5911 li
93.2006 13.8411 91.9106 14.6511 90.8406 15.0311 cv
90.7906 14.8811 li
91.6506 14.3511 92.4106 13.7811 93.0606 13.1511 cv
93.7106 12.5311 94.1306 12.0411 94.3006 11.7011 cv
cp
97.7506 12.0311 mo
97.8606 11.8411 li
99.0606 12.3411 99.9306 12.7411 100.461 13.0612 cv
100.991 13.3712 101.261 13.6812 101.261 13.9911 cv
101.261 14.0911 101.221 14.2311 101.131 14.4211 cv
101.041 14.6011 100.971 14.7011 100.901 14.7011 cv
100.791 14.7011 100.671 14.5911 100.541 14.3712 cv
100.261 13.9911 99.9306 13.6311 99.5306 13.2911 cv
99.1406 12.9511 98.5406 12.5311 97.7506 12.0311 cv
cp
99.2506 14.0411 mo
98.7306 14.2811 li
98.0806 15.6212 97.4106 16.6212 96.7206 17.2811 cv
98.2006 18.4911 100.121 19.0612 102.501 18.9611 cv
102.501 19.1011 li
101.951 19.3211 101.641 19.5911 101.571 19.9011 cv
99.2606 19.5911 97.5306 18.8511 96.3606 17.7011 cv
94.9206 18.7911 93.0406 19.5711 90.7406 20.0411 cv
90.6906 19.8511 li
92.8206 19.2611 94.5706 18.4011 95.9506 17.2811 cv
95.2306 16.3411 94.6106 15.1212 94.0906 13.6212 cv
94.3006 13.5711 li
94.9206 14.9211 95.6006 16.0111 96.3606 16.8511 cv
97.0806 16.0111 97.6506 14.8511 98.0606 13.3811 cv
cp
107.651 13.3411 mo
108.631 13.9911 li
108.171 14.1311 li
108.001 14.3511 107.821 14.5612 107.651 14.7411 cv
113.581 14.7411 li
114.051 14.3211 li
114.871 14.9811 li
114.411 15.2611 li
114.231 16.2611 114.091 17.0311 113.971 17.5811 cv
113.851 18.1311 113.691 18.6212 113.501 19.0612 cv
113.321 19.4911 112.811 19.7911 111.981 19.9511 cv
112.021 19.5711 111.571 19.2111 110.641 18.8712 cv
110.691 18.6812 li
111.451 18.8712 111.971 18.9611 112.271 18.9611 cv
112.561 18.9611 112.781 18.7911 112.941 18.4511 cv
113.091 18.1011 113.341 16.9611 113.681 15.0311 cv
112.141 15.0311 li
111.421 16.9011 110.461 18.1511 109.281 18.7811 cv
108.091 19.4011 106.901 19.8211 105.691 20.0411 cv
105.641 19.9011 li
107.081 19.4611 108.241 18.9111 109.121 18.2411 cv
110.001 17.5612 110.731 16.4911 111.311 15.0311 cv
109.771 15.0311 li
109.041 16.2411 108.251 17.1011 107.391 17.6011 cv
106.531 18.1011 105.661 18.4511 104.761 18.6311 cv
104.711 18.4911 li
105.741 18.1212 106.581 17.6711 107.211 17.1611 cv
107.851 16.6411 108.411 15.9312 108.891 15.0311 cv
107.451 15.0311 li
106.661 15.8411 105.691 16.4911 104.561 16.9911 cv
104.461 16.8511 li
105.801 16.0111 106.861 14.8411 107.651 13.3411 cv
cp
107.291 11.6511 mo
107.291 13.0111 li
112.191 13.0111 li
112.191 11.6511 li
cp
106.521 13.8511 mo
106.551 13.1711 106.571 12.4911 106.571 11.8411 cv
106.571 11.1812 106.551 10.3411 106.521 9.31116 cv
107.291 9.73114 li
112.091 9.73114 li
112.451 9.26111 li
113.321 9.82111 li
112.911 10.1511 li
112.911 11.9312 112.931 13.0612 112.961 13.5311 cv
112.191 13.8511 li
112.191 13.2911 li
107.291 13.2911 li
107.291 13.5711 li
cp
107.291 10.0111 mo
107.291 11.3712 li
112.191 11.3712 li
112.191 10.0111 li
cp
124.261 16.0612 mo
124.261 19.1511 li
126.111 19.1511 li
126.111 16.0612 li
cp
118.481 19.1511 mo
118.481 17.4011 118.461 16.1212 118.431 15.3112 cv
119.201 15.7811 li
126.011 15.7811 li
126.521 15.3112 li
127.251 15.9611 li
126.781 16.2911 li
126.781 19.1511 li
127.301 19.1511 li
127.971 18.5411 li
128.901 19.4312 li
118.531 19.4312 li
118.081 19.4312 117.671 19.4811 117.291 19.5711 cv
116.831 19.1511 li
cp
119.151 16.0612 mo
119.151 19.1511 li
121.061 19.1511 li
121.061 16.0612 li
cp
121.731 16.0612 mo
121.731 19.1511 li
123.581 19.1511 li
123.581 16.0612 li
cp
119.001 10.7111 mo
119.001 12.5311 119.011 13.7611 119.051 14.4211 cv
118.271 14.7411 li
118.311 13.5911 118.331 12.6911 118.331 12.0511 cv
118.331 11.4111 118.311 10.6812 118.271 9.87115 cv
119.361 10.3411 li
cp
121.421 10.0612 mo
121.421 12.7411 121.441 14.4312 121.471 15.1212 cv
120.701 15.4511 li
120.731 14.4211 120.751 13.3811 120.751 12.3311 cv
120.751 11.2811 120.731 10.2411 120.701 9.21112 cv
121.831 9.68115 li
cp
124.671 10.1511 mo
124.501 10.6511 124.361 11.0111 124.261 11.2311 cv
126.681 11.2311 li
127.351 10.6212 li
128.281 11.5111 li
124.151 11.5111 li
123.501 12.8211 122.831 13.8211 122.141 14.5111 cv
121.991 14.4211 li
122.571 13.4511 123.011 12.5612 123.301 11.7411 cv
123.591 10.9312 123.831 10.0911 124.001 9.21112 cv
125.181 9.82111 li
cp
124.871 12.1212 mo
125.841 12.7111 126.421 13.1611 126.631 13.4511 cv
126.831 13.7512 126.941 13.9911 126.941 14.1812 cv
126.941 14.3411 126.881 14.4911 126.781 14.6311 cv
126.681 14.7711 126.591 14.8411 126.521 14.8411 cv
126.391 14.8411 126.251 14.6711 126.111 14.3211 cv
125.911 13.8211 125.691 13.4211 125.471 13.1311 cv
125.241 12.8311 125.011 12.5411 124.771 12.2611 cv
cp
134.881 15.4011 mo
139.411 15.4011 li
140.031 14.8411 li
140.961 15.6812 li
138.131 15.6812 li
138.131 18.8211 li
140.451 18.8211 li
141.121 18.2111 li
142.101 19.1011 li
135.551 19.1011 li
135.101 19.1011 134.691 19.1511 134.311 19.2411 cv
133.851 18.8211 li
137.401 18.8211 li
137.401 15.6812 li
135.861 15.6812 li
135.291 15.7811 li
cp
137.251 13.1011 mo
136.181 14.0411 135.191 14.7311 134.261 15.1711 cv
134.161 15.0311 li
135.361 14.1511 136.271 13.2111 136.891 12.2111 cv
137.761 12.9611 li
cp
138.431 12.7311 mo
138.541 12.5911 li
139.571 12.9611 140.271 13.2711 140.651 13.5012 cv
141.031 13.7411 141.231 13.9811 141.241 14.2311 cv
141.261 14.4811 141.211 14.6711 141.091 14.7911 cv
140.971 14.9211 140.891 14.9811 140.861 14.9811 cv
140.721 14.9811 140.551 14.7911 140.341 14.4211 cv
140.071 13.9511 139.431 13.3811 138.431 12.7311 cv
cp
140.241 12.7311 mo
140.701 11.6511 li
135.501 11.6511 li
135.501 11.9312 135.481 12.1611 135.441 12.3311 cv
135.411 12.5012 135.321 12.6212 135.161 12.6812 cv
135.011 12.7411 134.891 12.7811 134.831 12.7811 cv
134.761 12.7811 134.671 12.7512 134.571 12.7011 cv
134.461 12.6611 134.411 12.6212 134.411 12.5911 cv
134.411 12.4911 134.521 12.3411 134.721 12.1212 cv
135.001 11.8112 135.191 11.3712 135.291 10.8112 cv
135.501 10.8112 li
135.501 11.3712 li
140.701 11.3712 li
141.121 10.9011 li
141.941 11.6511 li
141.531 11.6511 141.011 12.0411 140.391 12.8211 cv
cp
136.731 9.54114 mo
136.841 9.40112 li
137.561 9.68115 138.051 9.90112 138.311 10.0612 cv
138.561 10.2111 138.671 10.4011 138.621 10.6212 cv
138.561 10.8411 138.491 10.9811 138.411 11.0411 cv
138.181 11.1311 li
138.071 11.1311 137.971 11.0311 137.871 10.8112 cv
137.701 10.4911 137.321 10.0711 136.731 9.54114 cv
cp
134.571 13.9011 mo
132.871 14.8411 li
132.871 18.9211 li
132.831 19.4211 132.511 19.8112 131.891 20.0911 cv
131.891 19.7411 131.351 19.4211 130.291 19.1011 cv
130.291 18.9211 li
131.041 19.0411 131.541 19.0911 131.781 19.0612 cv
132.021 19.0311 132.141 18.7911 132.141 18.3511 cv
132.141 15.1711 li
131.181 15.6711 130.651 16.0111 130.551 16.2011 cv
129.931 15.3511 li
130.341 15.2611 131.081 15.0111 132.141 14.6011 cv
132.141 11.9811 li
131.061 11.9811 li
130.441 12.0711 li
130.031 11.7011 li
132.141 11.7011 li
132.141 10.5711 132.131 9.71112 132.091 9.12115 cv
133.381 9.6311 li
132.871 10.0111 li
132.871 11.7011 li
133.281 11.7011 li
133.791 11.2311 li
134.621 11.9811 li
132.871 11.9811 li
132.871 14.3712 li
134.461 13.7111 li
cp
143.441 16.5711 mo
150.401 16.5711 li
151.071 15.9611 li
152.051 16.8511 li
145.091 16.8511 li
144.671 16.8511 144.281 16.9011 143.901 16.9911 cv
cp
146.171 14.0411 mo
146.311 12.1311 146.381 10.9811 146.401 10.5711 cv
146.421 10.1711 146.431 9.70111 146.431 9.17114 cv
147.611 9.68115 li
147.201 9.96112 li
147.101 11.7011 li
153.131 11.7011 li
153.801 11.0911 li
154.781 11.9811 li
147.101 11.9811 li
146.941 14.1812 li
153.031 14.1812 li
153.441 13.6212 li
154.371 14.2311 li
153.901 14.6011 li
153.831 15.7611 153.731 16.7711 153.591 17.6311 cv
153.461 18.4911 153.211 19.0612 152.851 19.3611 cv
152.491 19.6611 152.011 19.8712 151.431 19.9911 cv
151.461 19.5911 150.901 19.2311 149.731 18.9211 cv
149.781 18.6812 li
150.531 18.8411 151.191 18.9211 151.741 18.9211 cv
152.291 18.9211 152.651 18.4511 152.821 17.5311 cv
152.991 16.6111 153.101 15.5911 153.131 14.4611 cv
146.991 14.4611 li
146.581 14.9312 li
145.761 14.3712 li
146.171 14.0411 li
cp
160.041 9.40112 mo
160.761 9.87115 161.171 10.2011 161.281 10.3811 cv
161.381 10.5711 161.431 10.7311 161.431 10.8511 cv
161.431 11.0111 161.361 11.1611 161.231 11.3011 cv
161.091 11.4411 160.981 11.5111 160.921 11.5111 cv
160.811 11.5111 160.731 11.3511 160.661 11.0411 cv
160.561 10.5711 160.311 10.0612 159.941 9.49115 cv
cp
159.581 11.8811 mo
161.901 11.8811 li
162.451 10.5111 162.741 9.60114 162.771 9.17114 cv
163.751 9.68115 li
163.481 9.81116 163.211 10.0711 162.951 10.4811 cv
162.691 10.8811 162.451 11.3511 162.211 11.8811 cv
163.131 11.8811 li
163.701 11.3712 li
164.531 12.1711 li
162.211 12.1711 li
162.211 15.5911 li
163.131 15.5911 li
163.131 13.9911 163.121 13.0612 163.081 12.7811 cv
164.061 13.1511 li
163.751 13.4312 li
163.751 14.8112 163.771 15.7311 163.801 16.2011 cv
163.131 16.4811 li
163.131 15.8712 li
162.211 15.8712 li
162.101 16.9312 161.771 17.8011 161.201 18.4711 cv
160.631 19.1411 159.751 19.6812 158.541 20.0911 cv
158.441 19.9911 li
159.581 19.4011 160.351 18.8011 160.761 18.1911 cv
161.171 17.5811 161.451 16.8112 161.591 15.8712 cv
160.561 15.8712 li
160.191 16.2011 li
159.581 15.6812 li
159.941 15.4511 li
159.941 13.9811 159.921 13.1011 159.881 12.8211 cv
160.921 13.2011 li
160.561 13.5311 li
160.561 15.5911 li
161.591 15.5911 li
161.591 12.1711 li
161.281 12.1711 li
160.831 12.1711 160.421 12.2111 160.041 12.3112 cv
cp
164.681 9.78113 mo
165.401 10.1511 li
167.051 10.1511 li
167.361 9.73114 li
168.131 10.2011 li
167.771 10.5311 li
167.771 18.6812 li
167.811 19.3712 167.451 19.8211 166.691 20.0411 cv
166.621 19.6011 166.161 19.3112 165.301 19.1511 cv
165.301 18.9611 li
165.681 18.9911 166.021 19.0111 166.331 19.0111 cv
166.541 19.0111 166.721 18.9911 166.871 18.9611 cv
167.031 18.9312 167.101 18.7611 167.101 18.4511 cv
167.101 15.4911 li
165.401 15.4911 li
165.371 16.6511 165.101 17.5911 164.601 18.3112 cv
164.101 19.0311 163.251 19.6311 162.051 20.1311 cv
161.951 20.0411 li
162.941 19.3811 163.631 18.7512 164.011 18.1411 cv
164.391 17.5311 164.611 16.8911 164.681 16.2211 cv
164.751 15.5511 164.771 14.5311 164.761 13.1711 cv
164.741 11.8112 164.711 10.6812 164.681 9.78113 cv
cp
165.401 10.4312 mo
165.401 12.7311 li
167.101 12.7311 li
167.101 10.4312 li
cp
165.401 13.0111 mo
165.401 15.2111 li
167.101 15.2111 li
167.101 13.0111 li
cp
159.471 11.7411 mo
158.891 14.6812 158.571 16.3511 158.521 16.7411 cv
158.471 17.1311 158.421 17.6011 158.391 18.1711 cv
158.361 18.7311 158.361 19.1311 158.391 19.3811 cv
158.421 19.5111 158.371 19.5711 158.231 19.5711 cv
158.131 19.5711 157.971 19.5311 157.741 19.4312 cv
157.521 19.3411 157.411 19.1711 157.411 18.9211 cv
157.411 18.7011 157.441 18.4811 157.511 18.2611 cv
157.621 17.9511 157.671 17.7111 157.671 17.5612 cv
157.671 17.3411 157.581 17.1711 157.411 17.0411 cv
157.241 16.9211 156.911 16.7911 156.431 16.6711 cv
156.431 16.5311 li
157.011 16.5612 157.381 16.5612 157.511 16.5511 cv
157.651 16.5311 157.811 16.3911 158.001 16.1311 cv
158.191 15.8611 158.611 14.3811 159.271 11.7011 cv
cp
156.531 12.3112 mo
157.431 12.7111 157.911 12.9911 157.981 13.1311 cv
158.051 13.2711 158.081 13.3712 158.081 13.4312 cv
158.081 13.5911 158.031 13.7411 157.931 13.8811 cv
157.821 14.0211 157.741 14.0911 157.671 14.0911 cv
157.561 14.0911 157.461 13.9611 157.361 13.7111 cv
157.191 13.3112 156.881 12.8712 156.431 12.4011 cv
cp
157.461 9.49115 mo
158.321 9.87115 158.801 10.1411 158.911 10.3112 cv
159.011 10.4911 159.061 10.6011 159.061 10.6711 cv
159.061 10.7911 159.001 10.9211 158.881 11.0612 cv
158.761 11.2011 158.661 11.2811 158.601 11.2811 cv
158.491 11.2811 158.391 11.1311 158.291 10.8511 cv
158.111 10.4511 157.811 10.0311 157.361 9.59113 cv
cp
176.441 12.3112 mo
176.441 13.6711 li
179.841 13.6711 li
179.841 12.3112 li
cp
176.441 13.9511 mo
176.441 15.3511 li
179.841 15.3511 li
179.841 13.9511 li
cp
176.021 16.4312 mo
176.951 17.0911 li
176.571 17.2411 176.181 17.5411 175.771 17.9811 cv
175.321 18.4211 174.651 18.9312 173.761 19.5311 cv
173.651 19.3811 li
174.891 18.2911 175.681 17.3112 176.021 16.4312 cv
cp
178.961 16.7611 mo
179.071 16.6212 li
180.201 17.2811 180.861 17.7111 181.051 17.9312 cv
181.241 18.1511 181.331 18.3511 181.331 18.5411 cv
181.331 18.7011 181.281 18.8811 181.181 19.0811 cv
181.081 19.2811 180.991 19.3811 180.921 19.3811 cv
180.821 19.3811 180.681 19.2011 180.511 18.8211 cv
180.271 18.2911 179.751 17.6011 178.961 16.7611 cv
cp
175.711 16.1511 mo
175.751 15.3411 175.771 14.5711 175.771 13.8511 cv
175.771 13.1311 175.751 12.4011 175.711 11.6511 cv
176.441 12.0311 li
177.161 12.0311 li
177.501 11.3112 177.711 10.7611 177.781 10.3811 cv
174.631 10.3811 li
174.631 11.6711 174.621 12.9011 174.611 14.0911 cv
174.591 15.2811 174.341 16.3411 173.861 17.2811 cv
173.381 18.2111 172.661 19.1011 171.691 19.9511 cv
171.591 19.8112 li
172.451 18.8411 173.051 17.8511 173.391 16.8311 cv
173.741 15.8112 173.911 14.5612 173.911 13.0811 cv
173.911 11.6011 173.891 10.4511 173.861 9.6311 cv
174.631 10.1011 li
179.991 10.1011 li
180.721 9.45111 li
181.701 10.3811 li
178.031 10.3811 li
178.861 10.8112 li
178.581 10.9011 178.371 11.0211 178.221 11.1611 cv
178.061 11.3011 177.811 11.5911 177.471 12.0311 cv
179.791 12.0311 li
180.151 11.5612 li
180.921 12.1711 li
180.511 12.4911 li
180.511 14.4312 180.531 15.5311 180.561 15.7811 cv
179.841 16.1011 li
179.841 15.6311 li
178.501 15.6311 li
178.501 18.7311 li
178.531 19.3511 178.171 19.7611 177.421 19.9511 cv
177.381 19.5111 176.971 19.2111 176.181 19.0612 cv
176.181 18.8712 li
176.631 18.9011 177.001 18.9211 177.311 18.9411 cv
177.621 18.9511 177.781 18.8411 177.781 18.5911 cv
177.781 15.6311 li
176.441 15.6311 li
176.441 15.8712 li
cp
173.501 10.9511 mo
172.431 14.3511 171.861 16.2611 171.771 16.6711 cv
171.681 17.0711 171.631 17.5612 171.621 18.1212 cv
171.601 18.6812 171.611 19.0711 171.641 19.2911 cv
171.641 19.4211 171.571 19.4811 171.431 19.4811 cv
171.331 19.4811 171.171 19.4411 170.941 19.3611 cv
170.721 19.2811 170.611 19.1212 170.611 18.8712 cv
170.611 18.6511 170.641 18.4312 170.711 18.2111 cv
170.821 17.9011 170.871 17.6511 170.871 17.4611 cv
170.871 17.2811 170.791 17.1212 170.641 16.9911 cv
170.481 16.8712 170.151 16.7411 169.631 16.6212 cv
169.631 16.4312 li
170.251 16.4911 170.641 16.5211 170.791 16.5012 cv
170.941 16.4911 171.121 16.3511 171.311 16.0811 cv
171.491 15.8112 172.161 14.0911 173.291 10.9011 cv
cp
169.631 12.2111 mo
170.831 12.7111 171.431 13.1212 171.431 13.4312 cv
171.431 13.7411 171.371 13.9711 171.231 14.1111 cv
171.091 14.2512 170.991 14.3211 170.921 14.3211 cv
170.821 14.3211 170.711 14.1711 170.611 13.8511 cv
170.441 13.4511 170.081 12.9511 169.531 12.3511 cv
cp
170.761 9.49115 mo
171.761 9.87115 172.311 10.1911 172.411 10.4511 cv
172.521 10.7211 172.491 10.9511 172.341 11.1611 cv
172.181 11.3611 172.071 11.4611 172.001 11.4611 cv
171.861 11.4611 171.761 11.3411 171.691 11.0911 cv
171.521 10.6812 171.181 10.2011 170.661 9.6311 cv
cp
192.521 15.2611 mo
189.691 15.4511 li
189.691 18.5411 li
189.761 19.2911 189.361 19.7811 188.501 19.9911 cv
188.501 19.4911 187.971 19.1311 186.901 18.9211 cv
186.901 18.7311 li
187.801 18.8211 188.371 18.8712 188.631 18.8712 cv
188.891 18.8712 189.001 18.6511 188.971 18.2111 cv
188.971 15.5411 li
188.001 15.6011 187.221 15.6911 186.621 15.8011 cv
186.021 15.9111 185.551 16.0311 185.201 16.1511 cv
184.691 15.2611 li
185.061 15.2311 185.661 15.0411 186.471 14.7011 cv
187.271 14.3511 188.401 13.7811 189.841 12.9611 cv
188.471 13.0911 187.511 13.2011 186.961 13.3112 cv
186.411 13.4211 185.961 13.5612 185.611 13.7111 cv
185.101 12.7811 li
185.581 12.7411 186.171 12.4911 186.881 12.0012 cv
187.581 11.5211 188.161 10.9811 188.611 10.3811 cv
186.581 10.5111 185.171 10.5711 184.381 10.5711 cv
184.381 10.3811 li
186.441 10.2311 188.121 10.0511 189.431 9.85114 cv
190.741 9.64111 191.841 9.3811 192.731 9.07111 cv
193.501 9.96112 li
192.991 9.93115 192.291 9.96112 191.421 10.0612 cv
190.541 10.1511 189.671 10.2411 188.811 10.3411 cv
189.841 10.8112 li
189.401 10.8712 188.791 11.1812 188.041 11.7411 cv
187.251 12.3112 186.651 12.6711 186.231 12.8211 cv
190.311 12.6812 li
190.961 12.2811 191.461 11.8712 191.801 11.4611 cv
192.781 12.2111 li
192.401 12.2411 191.971 12.3811 191.491 12.6311 cv
190.981 12.9211 190.111 13.3712 188.891 13.9911 cv
187.671 14.6212 186.771 15.0612 186.181 15.3112 cv
192.321 15.0311 li
191.801 14.5612 191.371 14.2111 191.031 13.9911 cv
191.131 13.8511 li
192.061 14.1711 192.741 14.4411 193.171 14.6711 cv
193.601 14.9111 193.821 15.1611 193.841 15.4211 cv
193.861 15.6911 193.791 15.9312 193.631 16.1511 cv
193.481 16.3712 193.321 16.3511 193.171 16.1011 cv
193.011 15.8511 192.801 15.5711 192.521 15.2611 cv
cp
190.511 16.4811 mo
192.131 17.1011 193.131 17.5411 193.531 17.7911 cv
193.921 18.0411 194.141 18.3112 194.171 18.6111 cv
194.211 18.9111 194.171 19.1311 194.041 19.2911 cv
193.921 19.4511 193.851 19.5311 193.811 19.5311 cv
193.641 19.5311 193.451 19.3411 193.251 18.9611 cv
192.901 18.4011 191.961 17.6212 190.411 16.6212 cv
cp
186.901 16.2911 mo
187.831 17.1311 li
187.561 17.1311 186.991 17.4312 186.131 18.0311 cv
185.271 18.6511 184.271 19.1812 183.141 19.6212 cv
183.041 19.4811 li
183.791 19.0711 184.521 18.6011 185.231 18.0511 cv
185.931 17.5012 186.491 16.9211 186.901 16.2911 cv
cp
203.041 9.26111 mo
203.151 9.12115 li
204.011 9.49115 204.491 9.80115 204.591 10.0311 cv
204.691 10.2711 204.661 10.4911 204.491 10.6911 cv
204.311 10.8911 204.191 10.9911 204.131 10.9911 cv
204.021 10.9911 203.941 10.8511 203.871 10.5711 cv
203.731 10.1311 203.461 9.70111 203.041 9.26111 cv
cp
200.981 14.1812 mo
201.361 14.0911 201.811 13.7311 202.351 13.1011 cv
202.881 12.4811 203.271 11.8811 203.511 11.3211 cv
202.371 11.3211 li
201.931 11.3211 201.511 11.3712 201.131 11.4611 cv
200.671 11.0411 li
206.241 11.0411 li
206.961 10.3811 li
207.841 11.3211 li
203.761 11.3211 li
204.541 11.8811 li
204.191 11.9811 203.831 12.2011 203.461 12.5411 cv
203.081 12.8811 202.541 13.4312 201.861 14.1812 cv
206.141 13.9911 li
205.761 13.5911 205.331 13.1812 204.851 12.7811 cv
204.951 12.6311 li
205.531 12.8811 206.061 13.1311 206.521 13.3811 cv
206.991 13.6311 207.241 13.8211 207.301 13.9511 cv
207.351 14.0711 207.371 14.2011 207.371 14.3211 cv
207.371 14.5111 207.331 14.6812 207.241 14.8411 cv
207.161 14.9911 207.081 15.0711 207.011 15.0711 cv
206.981 15.0711 206.931 15.0111 206.861 14.8811 cv
206.721 14.7011 206.551 14.4811 206.341 14.2311 cv
205.311 14.3211 204.341 14.4211 203.431 14.5311 cv
202.521 14.6411 201.861 14.8211 201.441 15.0711 cv
cp
202.681 14.6511 mo
203.461 14.5111 li
203.401 15.5911 li
203.301 17.1212 202.941 18.1611 202.321 18.7011 cv
201.701 19.2512 200.761 19.7011 199.481 20.0411 cv
199.431 19.9011 li
200.401 19.4611 201.101 19.0411 201.551 18.6311 cv
201.991 18.2311 202.291 17.7211 202.451 17.1111 cv
202.601 16.5012 202.681 15.6812 202.681 14.6511 cv
cp
204.691 14.3211 mo
205.361 14.2311 li
205.361 15.6311 li
205.361 18.5911 li
205.331 18.9911 205.591 19.1812 206.141 19.1511 cv
206.551 19.1511 li
206.891 19.1511 207.081 19.0211 207.121 18.7512 cv
207.151 18.4911 207.181 18.0311 207.221 17.3712 cv
207.481 17.3712 li
207.481 17.8712 207.511 18.2711 207.581 18.5612 cv
207.651 18.8611 207.801 19.0311 208.041 19.0612 cv
207.871 19.4911 207.531 19.7111 207.011 19.7111 cv
205.721 19.7111 li
205.041 19.7411 204.691 19.4611 204.691 18.8712 cv
cp
196.341 17.9811 mo
196.681 17.9511 197.221 17.8611 197.961 17.7211 cv
198.701 17.5811 199.731 17.3712 201.031 17.0911 cv
201.081 17.2811 li
200.361 17.4911 199.551 17.7512 198.661 18.0511 cv
197.771 18.3511 197.161 18.6511 196.861 18.9611 cv
cp
197.531 15.4911 mo
197.901 15.4611 199.021 15.3411 200.881 15.1212 cv
200.931 15.3112 li
200.101 15.4611 199.351 15.6311 198.661 15.8211 cv
197.971 16.0111 197.461 16.2311 197.111 16.4811 cv
196.491 15.4911 li
196.801 15.4312 197.231 15.1311 197.781 14.5811 cv
198.331 14.0311 198.811 13.4911 199.231 12.9611 cv
198.711 13.0612 198.261 13.1411 197.891 13.2211 cv
197.511 13.3011 197.151 13.4511 196.801 13.6711 cv
196.291 12.8712 li
196.671 12.7811 197.111 12.3511 197.631 11.5811 cv
198.141 10.8112 198.561 9.99115 198.871 9.12115 cv
199.851 9.73114 li
199.571 9.8811 199.261 10.2011 198.921 10.6711 cv
198.571 11.1711 197.991 11.9011 197.161 12.8712 cv
198.061 12.8112 198.801 12.7611 199.381 12.7311 cv
199.661 12.3811 199.931 11.9312 200.211 11.3712 cv
201.131 12.0311 li
200.831 12.1511 200.381 12.5411 199.791 13.2011 cv
199.181 13.8511 198.421 14.6212 197.531 15.4911 cv
cp
f
4.66368 230.911 mo
341.984 230.911 li
341.984 2.56103 li
4.66368 2.56103 li
4.66368 230.911 li
1 /0 /CSD get_res sepcs
0 sep
ef
4.66361 230.911 mo
341.984 230.911 li
341.984 2.5611 li
4.66361 2.5611 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
14.8396 11.7011 mo
15.7686 12.3211 16.7996 13.1212 17.9336 14.0911 cv
18.3806 13.5311 18.7676 12.9911 19.0936 12.4711 cv
19.4206 11.9511 19.6696 11.5111 19.8416 11.1311 cv
21.0276 11.8811 li
20.7186 11.9511 20.3396 12.2512 19.8936 12.8011 cv
19.4466 13.3511 18.9826 13.9211 18.5006 14.5111 cv
19.7386 15.5711 20.4086 16.2411 20.5116 16.5311 cv
20.6146 16.8112 20.6666 17.0311 20.6666 17.1812 cv
20.6666 17.3411 20.6236 17.5012 20.5376 17.6711 cv
20.4516 17.8511 20.3916 17.9312 20.3576 17.9312 cv
20.2546 17.9312 20.1166 17.7811 19.9446 17.4611 cv
19.6696 17.0311 19.3866 16.6311 19.0936 16.2711 cv
18.8016 15.9111 18.4496 15.5111 18.0366 15.0711 cv
17.3146 15.7911 16.6276 16.4011 15.9746 16.9011 cv
15.3216 17.4011 14.7366 17.7911 14.2216 18.0711 cv
14.1186 17.9312 li
14.7366 17.4611 15.3216 16.9711 15.8716 16.4511 cv
16.4216 15.9411 16.9716 15.3211 17.5216 14.6011 cv
16.5936 13.6011 15.6476 12.6812 14.6856 11.8411 cv
cp
13.1896 10.0612 mo
20.8726 10.0612 li
21.5946 9.40112 li
22.5746 10.3411 li
13.1896 10.3411 li
13.1896 19.1011 li
21.0796 19.1011 li
21.8006 18.4511 li
22.7296 19.3811 li
13.2416 19.3811 li
12.9326 19.8112 li
12.1586 19.2411 li
12.4686 18.9611 li
12.4686 11.2311 li
12.4686 10.9511 12.4506 10.4211 12.4166 9.6311 cv
cp
31.7526 12.0711 mo
31.7526 13.1311 31.7186 14.1711 31.6496 15.1711 cv
33.9696 15.1711 li
33.9696 12.0711 li
cp
31.0306 11.7911 mo
31.0306 10.6011 31.0136 9.70111 30.9796 9.07111 cv
32.3196 9.54114 li
31.7526 9.92114 li
31.7526 11.7911 li
33.8666 11.7911 li
34.2796 11.2811 li
35.1556 11.8811 li
34.6916 12.2611 li
34.6916 15.1711 li
34.8976 15.1711 li
35.5686 14.5612 li
36.5476 15.4511 li
32.2166 15.4511 li
32.5946 16.4211 33.1446 17.2311 33.8666 17.8811 cv
34.5886 18.5411 35.4646 18.9811 36.4966 19.2011 cv
36.4966 19.3811 li
35.8776 19.4211 35.4826 19.6212 35.3106 19.9911 cv
34.3136 19.3411 33.5396 18.6011 32.9896 17.7911 cv
32.4396 16.9811 32.0966 16.2011 31.9586 15.4511 cv
31.5976 15.4511 li
31.3916 16.7611 30.8756 17.7411 30.0506 18.4011 cv
29.2256 19.0612 28.0746 19.6212 26.5966 20.0911 cv
26.4416 19.9011 li
27.7826 19.4011 28.8136 18.8112 29.5356 18.1212 cv
30.2576 17.4312 30.7036 16.5411 30.8756 15.4511 cv
29.5356 15.4511 li
29.0886 15.4511 28.6756 15.4911 28.2976 15.5911 cv
27.8336 15.1711 li
30.9276 15.1711 li
30.9966 14.2611 31.0306 13.2311 31.0306 12.0711 cv
30.4636 12.0711 li
30.0166 12.0711 29.6036 12.1212 29.2256 12.2111 cv
28.7616 11.7911 li
cp
26.4936 12.7311 mo
26.4936 10.9511 26.4756 9.78113 26.4416 9.21112 cv
27.7306 9.73114 li
27.2146 10.1011 li
27.2146 12.7311 li
27.9366 12.7311 li
28.5556 12.1711 li
29.4836 13.0111 li
27.2146 13.0111 li
27.2146 16.8511 li
29.4836 16.3811 li
29.5356 16.5711 li
27.8166 17.1011 26.6476 17.4911 26.0286 17.7411 cv
25.4106 17.9911 25.0666 18.2011 24.9976 18.3511 cv
24.4306 17.3712 li
24.9116 17.3112 25.5996 17.2011 26.4936 17.0411 cv
26.4936 13.0111 li
26.0806 13.0111 li
25.6336 13.0111 25.2216 13.0612 24.8436 13.1511 cv
24.3786 12.7311 li
cp
45.8296 11.4211 mo
45.4856 12.2311 45.1416 13.0711 44.7976 13.9511 cv
46.1386 13.9511 li
46.1386 13.2011 46.1216 12.5911 46.0866 12.1212 cv
47.2726 12.5911 li
46.8606 12.9611 li
46.8606 13.9511 li
47.7366 13.9511 li
48.3606 13.4312 li
49.2306 14.2311 li
46.8606 14.2311 li
46.8606 16.0612 li
47.9906 16.0612 li
48.6606 15.4911 li
49.5406 16.3411 li
46.8606 16.3411 li
46.8606 17.3411 46.8776 18.1311 46.9116 18.7311 cv
46.0866 19.0111 li
46.1216 18.2911 46.1386 17.4011 46.1386 16.3411 cv
45.2106 16.3411 li
44.7636 16.3411 44.3506 16.3811 43.9726 16.4811 cv
43.5086 16.0612 li
46.1386 16.0612 li
46.1386 14.2311 li
44.7466 14.2311 li
44.3856 14.6011 li
43.7146 13.9511 li
44.1786 13.7111 li
44.4196 13.2111 44.7296 12.4511 45.1076 11.4211 cv
44.6946 11.4211 44.2996 11.4611 43.9216 11.5612 cv
43.4576 11.1311 li
45.2106 11.1311 li
45.4856 10.2611 45.6576 9.59113 45.7256 9.12115 cv
46.8086 9.68115 li
46.3966 9.92114 li
46.2586 10.2611 46.1046 10.6711 45.9326 11.1311 cv
47.9436 11.1311 li
48.5606 10.5711 li
49.3906 11.4211 li
cp
42.0646 10.3411 mo
42.7526 10.8712 43.1476 11.2311 43.2506 11.4211 cv
43.3536 11.6011 43.4056 11.7411 43.4056 11.8411 cv
43.4056 12.0311 43.3286 12.1911 43.1736 12.3311 cv
43.0186 12.4711 42.9076 12.5411 42.8386 12.5411 cv
42.7356 12.5411 42.6666 12.4011 42.6326 12.1212 cv
42.5636 11.6812 42.3226 11.1212 41.9106 10.4312 cv
cp
40.9306 19.2011 mo
41.6186 18.7911 42.1686 18.4811 42.5806 18.2611 cv
42.5806 14.4611 li
42.2716 14.4611 41.9276 14.5111 41.5496 14.6011 cv
41.0856 14.1812 li
42.5286 14.1812 li
42.8896 13.7611 li
43.6636 14.3712 li
43.2506 14.6511 li
43.2506 18.2111 li
43.6636 18.6212 44.1786 18.8811 44.7976 19.0111 cv
45.4166 19.1311 46.0356 19.2011 46.6546 19.2011 cv
47.4106 19.2011 48.4106 19.1311 49.6406 19.0111 cv
49.6406 19.2011 li
49.1306 19.3211 48.8506 19.5612 48.8206 19.9011 cv
46.7226 19.9011 45.3736 19.7811 44.7716 19.5511 cv
44.1706 19.3112 43.7146 19.0411 43.4056 18.7311 cv
43.2686 18.6011 43.1306 18.5411 42.9936 18.5411 cv
42.7866 18.5411 42.5466 18.6711 42.2716 18.9411 cv
41.9966 19.2011 41.7726 19.4811 41.6006 19.7611 cv
cp
40.1056 18.1711 mo
41.8076 17.4211 li
41.9106 17.5612 li
40.7076 18.3411 40.0196 18.9511 39.8476 19.3811 cv
39.1776 18.7311 li
39.3496 18.5711 39.4186 18.3411 39.3836 18.0311 cv
39.3836 15.4911 li
39.2806 15.4911 li
38.8336 15.4911 38.4216 15.5411 38.0436 15.6311 cv
37.5786 15.2111 li
39.3836 15.2111 li
39.3836 13.3411 li
38.3526 13.3411 li
38.1116 13.6212 37.8716 13.8511 37.6306 14.0411 cv
37.5276 13.9511 li
38.2836 12.8211 38.9196 11.2611 39.4356 9.26111 cv
40.4666 9.82111 li
40.2606 9.95111 40.0886 10.1311 39.9506 10.3811 cv
39.8136 10.6311 39.6756 10.9211 39.5386 11.2311 cv
40.6726 11.2311 li
41.2916 10.5711 li
42.1686 11.5111 li
39.4356 11.5111 li
39.1256 12.0711 38.8166 12.5911 38.5076 13.0612 cv
40.5186 13.0612 li
41.1366 12.5411 li
41.9106 13.3411 li
40.1056 13.3411 li
40.1056 15.2111 li
40.7756 15.2111 li
41.3436 14.7011 li
42.1166 15.4911 li
40.1056 15.4911 li
cp
53.5106 18.5911 mo
59.6006 18.4911 li
59.2206 17.8712 58.6706 17.1511 57.9506 16.3411 cv
58.1006 16.2011 li
59.3706 17.1311 60.1506 17.8112 60.4506 18.2111 cv
60.7406 18.6212 60.8806 18.9312 60.8806 19.1511 cv
60.8806 19.3411 60.8106 19.5211 60.6506 19.6911 cv
60.5006 19.8611 60.3906 19.9511 60.3206 19.9511 cv
60.2506 19.9511 60.1606 19.8411 60.0606 19.6212 cv
59.9206 19.2411 59.8006 18.9511 59.7006 18.7311 cv
56.4006 18.9511 54.5306 19.1011 54.0806 19.2011 cv
53.6306 19.2911 53.2906 19.4211 53.0506 19.5711 cv
52.4806 18.5911 li
52.7606 18.5911 53.1006 18.3811 53.5106 17.9811 cv
53.9206 17.5711 54.4806 16.8811 55.1906 15.9211 cv
55.8906 14.9511 56.3606 14.0911 56.6106 13.3411 cv
57.7406 14.1311 li
57.1706 14.3712 li
55.9006 16.1212 54.6806 17.5311 53.5106 18.5911 cv
cp
55.1606 9.54114 mo
56.3506 10.2411 li
55.7806 10.5311 li
54.6506 12.7111 53.1706 14.3511 51.3506 15.4511 cv
51.1906 15.3112 li
52.4606 14.2111 53.4206 13.1411 54.0506 12.1011 cv
54.6906 11.0511 55.0606 10.2011 55.1606 9.54114 cv
cp
58.6206 9.54114 mo
58.1506 9.82111 li
58.4606 10.7911 59.0006 11.7411 59.7806 12.6611 cv
60.5506 13.5811 61.5206 14.2111 62.6906 14.5612 cv
62.6906 14.7011 li
62.1406 14.7011 61.7406 14.8811 61.5006 15.2611 cv
60.5406 14.5711 59.7106 13.7311 59.0006 12.7311 cv
58.3006 11.7311 57.8306 10.5612 57.5806 9.21112 cv
cp
68.0506 13.2411 mo
68.0506 14.8811 li
72.8006 14.8811 li
72.8006 13.2411 li
cp
68.0506 15.1711 mo
68.0506 16.7111 li
72.8006 16.7111 li
72.8006 15.1711 li
cp
70.9906 18.9211 mo
71.5806 19.0111 72.0206 19.0612 72.3306 19.0612 cv
72.6406 19.0612 72.8006 18.9211 72.8006 18.6311 cv
72.8006 16.9911 li
68.0506 16.9911 li
68.0506 19.6711 li
67.2806 20.0911 li
67.3106 19.5612 67.3306 17.5311 67.3306 13.9911 cv
66.3706 14.9312 65.3206 15.7111 64.1806 16.3411 cv
64.0306 16.2011 li
64.9906 15.5111 65.8306 14.8011 66.5306 14.0612 cv
67.2406 13.3311 67.9106 12.4011 68.5706 11.2811 cv
65.7306 11.2811 li
65.2806 11.2811 64.8706 11.3211 64.4906 11.4211 cv
64.0306 10.9911 li
68.6706 10.9911 li
69.0506 10.2111 69.2906 9.57111 69.3906 9.07111 cv
70.6806 9.73114 li
70.1706 9.92114 li
69.9306 10.3511 69.7206 10.7111 69.5506 10.9911 cv
73.9306 10.9911 li
74.8106 10.2011 li
75.9906 11.2811 li
69.4406 11.2811 li
69.0706 11.9011 68.6706 12.4611 68.2606 12.9611 cv
72.6906 12.9611 li
73.1106 12.4911 li
73.9806 13.1011 li
73.5206 13.4312 li
73.5206 18.9611 li
73.5206 19.4611 73.1406 19.8411 72.3806 20.0911 cv
72.4206 19.7111 71.9506 19.4011 70.9906 19.1511 cv
cp
85.4306 11.4211 mo
85.0806 12.2311 84.7406 13.0711 84.4006 13.9511 cv
85.7406 13.9511 li
85.7406 13.2011 85.7206 12.5911 85.6906 12.1212 cv
86.8706 12.5911 li
86.4606 12.9611 li
86.4606 13.9511 li
87.3406 13.9511 li
87.9606 13.4312 li
88.8306 14.2311 li
86.4606 14.2311 li
86.4606 16.0612 li
87.5906 16.0612 li
88.2606 15.4911 li
89.1406 16.3411 li
86.4606 16.3411 li
86.4606 17.3411 86.4806 18.1311 86.5106 18.7311 cv
85.6906 19.0111 li
85.7206 18.2911 85.7406 17.4011 85.7406 16.3411 cv
84.8106 16.3411 li
84.3606 16.3411 83.9506 16.3811 83.5706 16.4811 cv
83.1106 16.0612 li
85.7406 16.0612 li
85.7406 14.2311 li
84.3506 14.2311 li
83.9806 14.6011 li
83.3106 13.9511 li
83.7806 13.7111 li
84.0206 13.2111 84.3306 12.4511 84.7106 11.4211 cv
84.2906 11.4211 83.9006 11.4611 83.5206 11.5612 cv
83.0606 11.1311 li
84.8106 11.1311 li
85.0806 10.2611 85.2606 9.59113 85.3306 9.12115 cv
86.4106 9.68115 li
86.0006 9.92114 li
85.8606 10.2611 85.7006 10.6711 85.5306 11.1311 cv
87.5406 11.1311 li
88.1606 10.5711 li
88.9906 11.4211 li
cp
81.6606 10.3411 mo
82.3506 10.8712 82.7506 11.2311 82.8506 11.4211 cv
82.9506 11.6011 83.0106 11.7411 83.0106 11.8411 cv
83.0106 12.0311 82.9306 12.1911 82.7706 12.3311 cv
82.6206 12.4711 82.5106 12.5411 82.4406 12.5411 cv
82.3306 12.5411 82.2706 12.4011 82.2306 12.1212 cv
82.1606 11.6812 81.9206 11.1212 81.5106 10.4312 cv
cp
80.5306 19.2011 mo
81.2206 18.7911 81.7706 18.4811 82.1806 18.2611 cv
82.1806 14.4611 li
81.8706 14.4611 81.5306 14.5111 81.1506 14.6011 cv
80.6806 14.1812 li
82.1306 14.1812 li
82.4906 13.7611 li
83.2606 14.3712 li
82.8506 14.6511 li
82.8506 18.2111 li
83.2606 18.6212 83.7806 18.8811 84.4006 19.0111 cv
85.0206 19.1311 85.6306 19.2011 86.2506 19.2011 cv
87.0106 19.2011 88.0106 19.1311 89.2406 19.0111 cv
89.2406 19.2011 li
88.7306 19.3211 88.4506 19.5612 88.4206 19.9011 cv
86.3206 19.9011 84.9706 19.7811 84.3706 19.5511 cv
83.7706 19.3112 83.3106 19.0411 83.0106 18.7311 cv
82.8706 18.6011 82.7306 18.5411 82.5906 18.5411 cv
82.3906 18.5411 82.1506 18.6711 81.8706 18.9411 cv
81.6006 19.2011 81.3706 19.4811 81.2006 19.7611 cv
cp
79.7106 18.1711 mo
81.4106 17.4211 li
81.5106 17.5612 li
80.3106 18.3411 79.6206 18.9511 79.4506 19.3811 cv
78.7806 18.7311 li
78.9506 18.5711 79.0206 18.3411 78.9806 18.0311 cv
78.9806 15.4911 li
78.8806 15.4911 li
78.4306 15.4911 78.0206 15.5411 77.6406 15.6311 cv
77.1806 15.2111 li
78.9806 15.2111 li
78.9806 13.3411 li
77.9506 13.3411 li
77.7106 13.6212 77.4706 13.8511 77.2306 14.0411 cv
77.1306 13.9511 li
77.8806 12.8211 78.5206 11.2611 79.0306 9.26111 cv
80.0706 9.82111 li
79.8606 9.95111 79.6906 10.1311 79.5506 10.3811 cv
79.4106 10.6311 79.2806 10.9211 79.1406 11.2311 cv
80.2706 11.2311 li
80.8906 10.5711 li
81.7706 11.5111 li
79.0306 11.5111 li
78.7306 12.0711 78.4206 12.5911 78.1106 13.0612 cv
80.1206 13.0612 li
80.7406 12.5411 li
81.5106 13.3411 li
79.7106 13.3411 li
79.7106 15.2111 li
80.3806 15.2111 li
80.9406 14.7011 li
81.7206 15.4911 li
79.7106 15.4911 li
cp
95.2806 9.21112 mo
95.4306 9.07111 li
96.5306 9.57111 97.0906 9.96112 97.1106 10.2411 cv
97.1206 10.5311 97.0606 10.7311 96.9006 10.8511 cv
96.7506 10.9811 96.6506 11.0411 96.6206 11.0411 cv
96.4806 11.0411 96.3606 10.9011 96.2606 10.6212 cv
96.0806 10.2111 95.7606 9.74115 95.2806 9.21112 cv
cp
90.6406 11.1311 mo
100.331 11.1311 li
101.161 10.3811 li
102.291 11.4211 li
92.2906 11.4211 li
91.8706 11.4211 91.4806 11.4611 91.1006 11.5612 cv
cp
94.3006 11.7011 mo
95.2306 12.4511 li
94.7106 12.5911 li
93.2006 13.8411 91.9106 14.6511 90.8406 15.0311 cv
90.7906 14.8811 li
91.6506 14.3511 92.4106 13.7811 93.0606 13.1511 cv
93.7106 12.5311 94.1306 12.0411 94.3006 11.7011 cv
cp
97.7506 12.0311 mo
97.8606 11.8411 li
99.0606 12.3411 99.9306 12.7411 100.461 13.0612 cv
100.991 13.3712 101.261 13.6812 101.261 13.9911 cv
101.261 14.0911 101.221 14.2311 101.131 14.4211 cv
101.041 14.6011 100.971 14.7011 100.901 14.7011 cv
100.791 14.7011 100.671 14.5911 100.541 14.3712 cv
100.261 13.9911 99.9306 13.6311 99.5306 13.2911 cv
99.1406 12.9511 98.5406 12.5311 97.7506 12.0311 cv
cp
99.2506 14.0411 mo
98.7306 14.2811 li
98.0806 15.6212 97.4106 16.6212 96.7206 17.2811 cv
98.2006 18.4911 100.121 19.0612 102.501 18.9611 cv
102.501 19.1011 li
101.951 19.3211 101.641 19.5911 101.571 19.9011 cv
99.2606 19.5911 97.5306 18.8511 96.3606 17.7011 cv
94.9206 18.7911 93.0406 19.5711 90.7406 20.0411 cv
90.6906 19.8511 li
92.8206 19.2611 94.5706 18.4011 95.9506 17.2811 cv
95.2306 16.3411 94.6106 15.1212 94.0906 13.6212 cv
94.3006 13.5711 li
94.9206 14.9211 95.6006 16.0111 96.3606 16.8511 cv
97.0806 16.0111 97.6506 14.8511 98.0606 13.3811 cv
cp
107.651 13.3411 mo
108.631 13.9911 li
108.171 14.1311 li
108.001 14.3511 107.821 14.5612 107.651 14.7411 cv
113.581 14.7411 li
114.051 14.3211 li
114.871 14.9811 li
114.411 15.2611 li
114.231 16.2611 114.091 17.0311 113.971 17.5811 cv
113.851 18.1311 113.691 18.6212 113.501 19.0612 cv
113.321 19.4911 112.811 19.7911 111.981 19.9511 cv
112.021 19.5711 111.571 19.2111 110.641 18.8712 cv
110.691 18.6812 li
111.451 18.8712 111.971 18.9611 112.271 18.9611 cv
112.561 18.9611 112.781 18.7911 112.941 18.4511 cv
113.091 18.1011 113.341 16.9611 113.681 15.0311 cv
112.141 15.0311 li
111.421 16.9011 110.461 18.1511 109.281 18.7811 cv
108.091 19.4011 106.901 19.8211 105.691 20.0411 cv
105.641 19.9011 li
107.081 19.4611 108.241 18.9111 109.121 18.2411 cv
110.001 17.5612 110.731 16.4911 111.311 15.0311 cv
109.771 15.0311 li
109.041 16.2411 108.251 17.1011 107.391 17.6011 cv
106.531 18.1011 105.661 18.4511 104.761 18.6311 cv
104.711 18.4911 li
105.741 18.1212 106.581 17.6711 107.211 17.1611 cv
107.851 16.6411 108.411 15.9312 108.891 15.0311 cv
107.451 15.0311 li
106.661 15.8411 105.691 16.4911 104.561 16.9911 cv
104.461 16.8511 li
105.801 16.0111 106.861 14.8411 107.651 13.3411 cv
cp
107.291 11.6511 mo
107.291 13.0111 li
112.191 13.0111 li
112.191 11.6511 li
cp
106.521 13.8511 mo
106.551 13.1711 106.571 12.4911 106.571 11.8411 cv
106.571 11.1812 106.551 10.3411 106.521 9.31116 cv
107.291 9.73114 li
112.091 9.73114 li
112.451 9.26111 li
113.321 9.82111 li
112.911 10.1511 li
112.911 11.9312 112.931 13.0612 112.961 13.5311 cv
112.191 13.8511 li
112.191 13.2911 li
107.291 13.2911 li
107.291 13.5711 li
cp
107.291 10.0111 mo
107.291 11.3712 li
112.191 11.3712 li
112.191 10.0111 li
cp
124.261 16.0612 mo
124.261 19.1511 li
126.111 19.1511 li
126.111 16.0612 li
cp
118.481 19.1511 mo
118.481 17.4011 118.461 16.1212 118.431 15.3112 cv
119.201 15.7811 li
126.011 15.7811 li
126.521 15.3112 li
127.251 15.9611 li
126.781 16.2911 li
126.781 19.1511 li
127.301 19.1511 li
127.971 18.5411 li
128.901 19.4312 li
118.531 19.4312 li
118.081 19.4312 117.671 19.4811 117.291 19.5711 cv
116.831 19.1511 li
cp
119.151 16.0612 mo
119.151 19.1511 li
121.061 19.1511 li
121.061 16.0612 li
cp
121.731 16.0612 mo
121.731 19.1511 li
123.581 19.1511 li
123.581 16.0612 li
cp
119.001 10.7111 mo
119.001 12.5311 119.011 13.7611 119.051 14.4211 cv
118.271 14.7411 li
118.311 13.5911 118.331 12.6911 118.331 12.0511 cv
118.331 11.4111 118.311 10.6812 118.271 9.87115 cv
119.361 10.3411 li
cp
121.421 10.0612 mo
121.421 12.7411 121.441 14.4312 121.471 15.1212 cv
120.701 15.4511 li
120.731 14.4211 120.751 13.3811 120.751 12.3311 cv
120.751 11.2811 120.731 10.2411 120.701 9.21112 cv
121.831 9.68115 li
cp
124.671 10.1511 mo
124.501 10.6511 124.361 11.0111 124.261 11.2311 cv
126.681 11.2311 li
127.351 10.6212 li
128.281 11.5111 li
124.151 11.5111 li
123.501 12.8211 122.831 13.8211 122.141 14.5111 cv
121.991 14.4211 li
122.571 13.4511 123.011 12.5612 123.301 11.7411 cv
123.591 10.9312 123.831 10.0911 124.001 9.21112 cv
125.181 9.82111 li
cp
124.871 12.1212 mo
125.841 12.7111 126.421 13.1611 126.631 13.4511 cv
126.831 13.7512 126.941 13.9911 126.941 14.1812 cv
126.941 14.3411 126.881 14.4911 126.781 14.6311 cv
126.681 14.7711 126.591 14.8411 126.521 14.8411 cv
126.391 14.8411 126.251 14.6711 126.111 14.3211 cv
125.911 13.8211 125.691 13.4211 125.471 13.1311 cv
125.241 12.8311 125.011 12.5411 124.771 12.2611 cv
cp
134.881 15.4011 mo
139.411 15.4011 li
140.031 14.8411 li
140.961 15.6812 li
138.131 15.6812 li
138.131 18.8211 li
140.451 18.8211 li
141.121 18.2111 li
142.101 19.1011 li
135.551 19.1011 li
135.101 19.1011 134.691 19.1511 134.311 19.2411 cv
133.851 18.8211 li
137.401 18.8211 li
137.401 15.6812 li
135.861 15.6812 li
135.291 15.7811 li
cp
137.251 13.1011 mo
136.181 14.0411 135.191 14.7311 134.261 15.1711 cv
134.161 15.0311 li
135.361 14.1511 136.271 13.2111 136.891 12.2111 cv
137.761 12.9611 li
cp
138.431 12.7311 mo
138.541 12.5911 li
139.571 12.9611 140.271 13.2711 140.651 13.5012 cv
141.031 13.7411 141.231 13.9811 141.241 14.2311 cv
141.261 14.4811 141.211 14.6711 141.091 14.7911 cv
140.971 14.9211 140.891 14.9811 140.861 14.9811 cv
140.721 14.9811 140.551 14.7911 140.341 14.4211 cv
140.071 13.9511 139.431 13.3811 138.431 12.7311 cv
cp
140.241 12.7311 mo
140.701 11.6511 li
135.501 11.6511 li
135.501 11.9312 135.481 12.1611 135.441 12.3311 cv
135.411 12.5012 135.321 12.6212 135.161 12.6812 cv
135.011 12.7411 134.891 12.7811 134.831 12.7811 cv
134.761 12.7811 134.671 12.7512 134.571 12.7011 cv
134.461 12.6611 134.411 12.6212 134.411 12.5911 cv
134.411 12.4911 134.521 12.3411 134.721 12.1212 cv
135.001 11.8112 135.191 11.3712 135.291 10.8112 cv
135.501 10.8112 li
135.501 11.3712 li
140.701 11.3712 li
141.121 10.9011 li
141.941 11.6511 li
141.531 11.6511 141.011 12.0411 140.391 12.8211 cv
cp
136.731 9.54114 mo
136.841 9.40112 li
137.561 9.68115 138.051 9.90112 138.311 10.0612 cv
138.561 10.2111 138.671 10.4011 138.621 10.6212 cv
138.561 10.8411 138.491 10.9811 138.411 11.0411 cv
138.181 11.1311 li
138.071 11.1311 137.971 11.0311 137.871 10.8112 cv
137.701 10.4911 137.321 10.0711 136.731 9.54114 cv
cp
134.571 13.9011 mo
132.871 14.8411 li
132.871 18.9211 li
132.831 19.4211 132.511 19.8112 131.891 20.0911 cv
131.891 19.7411 131.351 19.4211 130.291 19.1011 cv
130.291 18.9211 li
131.041 19.0411 131.541 19.0911 131.781 19.0612 cv
132.021 19.0311 132.141 18.7911 132.141 18.3511 cv
132.141 15.1711 li
131.181 15.6711 130.651 16.0111 130.551 16.2011 cv
129.931 15.3511 li
130.341 15.2611 131.081 15.0111 132.141 14.6011 cv
132.141 11.9811 li
131.061 11.9811 li
130.441 12.0711 li
130.031 11.7011 li
132.141 11.7011 li
132.141 10.5711 132.131 9.71112 132.091 9.12115 cv
133.381 9.6311 li
132.871 10.0111 li
132.871 11.7011 li
133.281 11.7011 li
133.791 11.2311 li
134.621 11.9811 li
132.871 11.9811 li
132.871 14.3712 li
134.461 13.7111 li
cp
143.441 16.5711 mo
150.401 16.5711 li
151.071 15.9611 li
152.051 16.8511 li
145.091 16.8511 li
144.671 16.8511 144.281 16.9011 143.901 16.9911 cv
cp
146.171 14.0411 mo
146.311 12.1311 146.381 10.9811 146.401 10.5711 cv
146.421 10.1711 146.431 9.70111 146.431 9.17114 cv
147.611 9.68115 li
147.201 9.96112 li
147.101 11.7011 li
153.131 11.7011 li
153.801 11.0911 li
154.781 11.9811 li
147.101 11.9811 li
146.941 14.1812 li
153.031 14.1812 li
153.441 13.6212 li
154.371 14.2311 li
153.901 14.6011 li
153.831 15.7611 153.731 16.7711 153.591 17.6311 cv
153.461 18.4911 153.211 19.0612 152.851 19.3611 cv
152.491 19.6611 152.011 19.8712 151.431 19.9911 cv
151.461 19.5911 150.901 19.2311 149.731 18.9211 cv
149.781 18.6812 li
150.531 18.8411 151.191 18.9211 151.741 18.9211 cv
152.291 18.9211 152.651 18.4511 152.821 17.5311 cv
152.991 16.6111 153.101 15.5911 153.131 14.4611 cv
146.991 14.4611 li
146.581 14.9312 li
145.761 14.3712 li
146.171 14.0411 li
cp
160.041 9.40112 mo
160.761 9.87115 161.171 10.2011 161.281 10.3811 cv
161.381 10.5711 161.431 10.7311 161.431 10.8511 cv
161.431 11.0111 161.361 11.1611 161.231 11.3011 cv
161.091 11.4411 160.981 11.5111 160.921 11.5111 cv
160.811 11.5111 160.731 11.3511 160.661 11.0411 cv
160.561 10.5711 160.311 10.0612 159.941 9.49115 cv
cp
159.581 11.8811 mo
161.901 11.8811 li
162.451 10.5111 162.741 9.60114 162.771 9.17114 cv
163.751 9.68115 li
163.481 9.81116 163.211 10.0711 162.951 10.4811 cv
162.691 10.8811 162.451 11.3511 162.211 11.8811 cv
163.131 11.8811 li
163.701 11.3712 li
164.531 12.1711 li
162.211 12.1711 li
162.211 15.5911 li
163.131 15.5911 li
163.131 13.9911 163.121 13.0612 163.081 12.7811 cv
164.061 13.1511 li
163.751 13.4312 li
163.751 14.8112 163.771 15.7311 163.801 16.2011 cv
163.131 16.4811 li
163.131 15.8712 li
162.211 15.8712 li
162.101 16.9312 161.771 17.8011 161.201 18.4711 cv
160.631 19.1411 159.751 19.6812 158.541 20.0911 cv
158.441 19.9911 li
159.581 19.4011 160.351 18.8011 160.761 18.1911 cv
161.171 17.5811 161.451 16.8112 161.591 15.8712 cv
160.561 15.8712 li
160.191 16.2011 li
159.581 15.6812 li
159.941 15.4511 li
159.941 13.9811 159.921 13.1011 159.881 12.8211 cv
160.921 13.2011 li
160.561 13.5311 li
160.561 15.5911 li
161.591 15.5911 li
161.591 12.1711 li
161.281 12.1711 li
160.831 12.1711 160.421 12.2111 160.041 12.3112 cv
cp
164.681 9.78113 mo
165.401 10.1511 li
167.051 10.1511 li
167.361 9.73114 li
168.131 10.2011 li
167.771 10.5311 li
167.771 18.6812 li
167.811 19.3712 167.451 19.8211 166.691 20.0411 cv
166.621 19.6011 166.161 19.3112 165.301 19.1511 cv
165.301 18.9611 li
165.681 18.9911 166.021 19.0111 166.331 19.0111 cv
166.541 19.0111 166.721 18.9911 166.871 18.9611 cv
167.031 18.9312 167.101 18.7611 167.101 18.4511 cv
167.101 15.4911 li
165.401 15.4911 li
165.371 16.6511 165.101 17.5911 164.601 18.3112 cv
164.101 19.0311 163.251 19.6311 162.051 20.1311 cv
161.951 20.0411 li
162.941 19.3811 163.631 18.7512 164.011 18.1411 cv
164.391 17.5311 164.611 16.8911 164.681 16.2211 cv
164.751 15.5511 164.771 14.5311 164.761 13.1711 cv
164.741 11.8112 164.711 10.6812 164.681 9.78113 cv
cp
165.401 10.4312 mo
165.401 12.7311 li
167.101 12.7311 li
167.101 10.4312 li
cp
165.401 13.0111 mo
165.401 15.2111 li
167.101 15.2111 li
167.101 13.0111 li
cp
159.471 11.7411 mo
158.891 14.6812 158.571 16.3511 158.521 16.7411 cv
158.471 17.1311 158.421 17.6011 158.391 18.1711 cv
158.361 18.7311 158.361 19.1311 158.391 19.3811 cv
158.421 19.5111 158.371 19.5711 158.231 19.5711 cv
158.131 19.5711 157.971 19.5311 157.741 19.4312 cv
157.521 19.3411 157.411 19.1711 157.411 18.9211 cv
157.411 18.7011 157.441 18.4811 157.511 18.2611 cv
157.621 17.9511 157.671 17.7111 157.671 17.5612 cv
157.671 17.3411 157.581 17.1711 157.411 17.0411 cv
157.241 16.9211 156.911 16.7911 156.431 16.6711 cv
156.431 16.5311 li
157.011 16.5612 157.381 16.5612 157.511 16.5511 cv
157.651 16.5311 157.811 16.3911 158.001 16.1311 cv
158.191 15.8611 158.611 14.3811 159.271 11.7011 cv
cp
156.531 12.3112 mo
157.431 12.7111 157.911 12.9911 157.981 13.1311 cv
158.051 13.2711 158.081 13.3712 158.081 13.4312 cv
158.081 13.5911 158.031 13.7411 157.931 13.8811 cv
157.821 14.0211 157.741 14.0911 157.671 14.0911 cv
157.561 14.0911 157.461 13.9611 157.361 13.7111 cv
157.191 13.3112 156.881 12.8712 156.431 12.4011 cv
cp
157.461 9.49115 mo
158.321 9.87115 158.801 10.1411 158.911 10.3112 cv
159.011 10.4911 159.061 10.6011 159.061 10.6711 cv
159.061 10.7911 159.001 10.9211 158.881 11.0612 cv
158.761 11.2011 158.661 11.2811 158.601 11.2811 cv
158.491 11.2811 158.391 11.1311 158.291 10.8511 cv
158.111 10.4511 157.811 10.0311 157.361 9.59113 cv
cp
176.441 12.3112 mo
176.441 13.6711 li
179.841 13.6711 li
179.841 12.3112 li
cp
176.441 13.9511 mo
176.441 15.3511 li
179.841 15.3511 li
179.841 13.9511 li
cp
176.021 16.4312 mo
176.951 17.0911 li
176.571 17.2411 176.181 17.5411 175.771 17.9811 cv
175.321 18.4211 174.651 18.9312 173.761 19.5311 cv
173.651 19.3811 li
174.891 18.2911 175.681 17.3112 176.021 16.4312 cv
cp
178.961 16.7611 mo
179.071 16.6212 li
180.201 17.2811 180.861 17.7111 181.051 17.9312 cv
181.241 18.1511 181.331 18.3511 181.331 18.5411 cv
181.331 18.7011 181.281 18.8811 181.181 19.0811 cv
181.081 19.2811 180.991 19.3811 180.921 19.3811 cv
180.821 19.3811 180.681 19.2011 180.511 18.8211 cv
180.271 18.2911 179.751 17.6011 178.961 16.7611 cv
cp
175.711 16.1511 mo
175.751 15.3411 175.771 14.5711 175.771 13.8511 cv
175.771 13.1311 175.751 12.4011 175.711 11.6511 cv
176.441 12.0311 li
177.161 12.0311 li
177.501 11.3112 177.711 10.7611 177.781 10.3811 cv
174.631 10.3811 li
174.631 11.6711 174.621 12.9011 174.611 14.0911 cv
174.591 15.2811 174.341 16.3411 173.861 17.2811 cv
173.381 18.2111 172.661 19.1011 171.691 19.9511 cv
171.591 19.8112 li
172.451 18.8411 173.051 17.8511 173.391 16.8311 cv
173.741 15.8112 173.911 14.5612 173.911 13.0811 cv
173.911 11.6011 173.891 10.4511 173.861 9.6311 cv
174.631 10.1011 li
179.991 10.1011 li
180.721 9.45111 li
181.701 10.3811 li
178.031 10.3811 li
178.861 10.8112 li
178.581 10.9011 178.371 11.0211 178.221 11.1611 cv
178.061 11.3011 177.811 11.5911 177.471 12.0311 cv
179.791 12.0311 li
180.151 11.5612 li
180.921 12.1711 li
180.511 12.4911 li
180.511 14.4312 180.531 15.5311 180.561 15.7811 cv
179.841 16.1011 li
179.841 15.6311 li
178.501 15.6311 li
178.501 18.7311 li
178.531 19.3511 178.171 19.7611 177.421 19.9511 cv
177.381 19.5111 176.971 19.2111 176.181 19.0612 cv
176.181 18.8712 li
176.631 18.9011 177.001 18.9211 177.311 18.9411 cv
177.621 18.9511 177.781 18.8411 177.781 18.5911 cv
177.781 15.6311 li
176.441 15.6311 li
176.441 15.8712 li
cp
173.501 10.9511 mo
172.431 14.3511 171.861 16.2611 171.771 16.6711 cv
171.681 17.0711 171.631 17.5612 171.621 18.1212 cv
171.601 18.6812 171.611 19.0711 171.641 19.2911 cv
171.641 19.4211 171.571 19.4811 171.431 19.4811 cv
171.331 19.4811 171.171 19.4411 170.941 19.3611 cv
170.721 19.2811 170.611 19.1212 170.611 18.8712 cv
170.611 18.6511 170.641 18.4312 170.711 18.2111 cv
170.821 17.9011 170.871 17.6511 170.871 17.4611 cv
170.871 17.2811 170.791 17.1212 170.641 16.9911 cv
170.481 16.8712 170.151 16.7411 169.631 16.6212 cv
169.631 16.4312 li
170.251 16.4911 170.641 16.5211 170.791 16.5012 cv
170.941 16.4911 171.121 16.3511 171.311 16.0811 cv
171.491 15.8112 172.161 14.0911 173.291 10.9011 cv
cp
169.631 12.2111 mo
170.831 12.7111 171.431 13.1212 171.431 13.4312 cv
171.431 13.7411 171.371 13.9711 171.231 14.1111 cv
171.091 14.2512 170.991 14.3211 170.921 14.3211 cv
170.821 14.3211 170.711 14.1711 170.611 13.8511 cv
170.441 13.4511 170.081 12.9511 169.531 12.3511 cv
cp
170.761 9.49115 mo
171.761 9.87115 172.311 10.1911 172.411 10.4511 cv
172.521 10.7211 172.491 10.9511 172.341 11.1611 cv
172.181 11.3611 172.071 11.4611 172.001 11.4611 cv
171.861 11.4611 171.761 11.3411 171.691 11.0911 cv
171.521 10.6812 171.181 10.2011 170.661 9.6311 cv
cp
192.521 15.2611 mo
189.691 15.4511 li
189.691 18.5411 li
189.761 19.2911 189.361 19.7811 188.501 19.9911 cv
188.501 19.4911 187.971 19.1311 186.901 18.9211 cv
186.901 18.7311 li
187.801 18.8211 188.371 18.8712 188.631 18.8712 cv
188.891 18.8712 189.001 18.6511 188.971 18.2111 cv
188.971 15.5411 li
188.001 15.6011 187.221 15.6911 186.621 15.8011 cv
186.021 15.9111 185.551 16.0311 185.201 16.1511 cv
184.691 15.2611 li
185.061 15.2311 185.661 15.0411 186.471 14.7011 cv
187.271 14.3511 188.401 13.7811 189.841 12.9611 cv
188.471 13.0911 187.511 13.2011 186.961 13.3112 cv
186.411 13.4211 185.961 13.5612 185.611 13.7111 cv
185.101 12.7811 li
185.581 12.7411 186.171 12.4911 186.881 12.0012 cv
187.581 11.5211 188.161 10.9811 188.611 10.3811 cv
186.581 10.5111 185.171 10.5711 184.381 10.5711 cv
184.381 10.3811 li
186.441 10.2311 188.121 10.0511 189.431 9.85114 cv
190.741 9.64111 191.841 9.3811 192.731 9.07111 cv
193.501 9.96112 li
192.991 9.93115 192.291 9.96112 191.421 10.0612 cv
190.541 10.1511 189.671 10.2411 188.811 10.3411 cv
189.841 10.8112 li
189.401 10.8712 188.791 11.1812 188.041 11.7411 cv
187.251 12.3112 186.651 12.6711 186.231 12.8211 cv
190.311 12.6812 li
190.961 12.2811 191.461 11.8712 191.801 11.4611 cv
192.781 12.2111 li
192.401 12.2411 191.971 12.3811 191.491 12.6311 cv
190.981 12.9211 190.111 13.3712 188.891 13.9911 cv
187.671 14.6212 186.771 15.0612 186.181 15.3112 cv
192.321 15.0311 li
191.801 14.5612 191.371 14.2111 191.031 13.9911 cv
191.131 13.8511 li
192.061 14.1711 192.741 14.4411 193.171 14.6711 cv
193.601 14.9111 193.821 15.1611 193.841 15.4211 cv
193.861 15.6911 193.791 15.9312 193.631 16.1511 cv
193.481 16.3712 193.321 16.3511 193.171 16.1011 cv
193.011 15.8511 192.801 15.5711 192.521 15.2611 cv
cp
190.511 16.4811 mo
192.131 17.1011 193.131 17.5411 193.531 17.7911 cv
193.921 18.0411 194.141 18.3112 194.171 18.6111 cv
194.211 18.9111 194.171 19.1311 194.041 19.2911 cv
193.921 19.4511 193.851 19.5311 193.811 19.5311 cv
193.641 19.5311 193.451 19.3411 193.251 18.9611 cv
192.901 18.4011 191.961 17.6212 190.411 16.6212 cv
cp
186.901 16.2911 mo
187.831 17.1311 li
187.561 17.1311 186.991 17.4312 186.131 18.0311 cv
185.271 18.6511 184.271 19.1812 183.141 19.6212 cv
183.041 19.4811 li
183.791 19.0711 184.521 18.6011 185.231 18.0511 cv
185.931 17.5012 186.491 16.9211 186.901 16.2911 cv
cp
203.041 9.26111 mo
203.151 9.12115 li
204.011 9.49115 204.491 9.80115 204.591 10.0311 cv
204.691 10.2711 204.661 10.4911 204.491 10.6911 cv
204.311 10.8911 204.191 10.9911 204.131 10.9911 cv
204.021 10.9911 203.941 10.8511 203.871 10.5711 cv
203.731 10.1311 203.461 9.70111 203.041 9.26111 cv
cp
200.981 14.1812 mo
201.361 14.0911 201.811 13.7311 202.351 13.1011 cv
202.881 12.4811 203.271 11.8811 203.511 11.3211 cv
202.371 11.3211 li
201.931 11.3211 201.511 11.3712 201.131 11.4611 cv
200.671 11.0411 li
206.241 11.0411 li
206.961 10.3811 li
207.841 11.3211 li
203.761 11.3211 li
204.541 11.8811 li
204.191 11.9811 203.831 12.2011 203.461 12.5411 cv
203.081 12.8811 202.541 13.4312 201.861 14.1812 cv
206.141 13.9911 li
205.761 13.5911 205.331 13.1812 204.851 12.7811 cv
204.951 12.6311 li
205.531 12.8811 206.061 13.1311 206.521 13.3811 cv
206.991 13.6311 207.241 13.8211 207.301 13.9511 cv
207.351 14.0711 207.371 14.2011 207.371 14.3211 cv
207.371 14.5111 207.331 14.6812 207.241 14.8411 cv
207.161 14.9911 207.081 15.0711 207.011 15.0711 cv
206.981 15.0711 206.931 15.0111 206.861 14.8811 cv
206.721 14.7011 206.551 14.4811 206.341 14.2311 cv
205.311 14.3211 204.341 14.4211 203.431 14.5311 cv
202.521 14.6411 201.861 14.8211 201.441 15.0711 cv
cp
202.681 14.6511 mo
203.461 14.5111 li
203.401 15.5911 li
203.301 17.1212 202.941 18.1611 202.321 18.7011 cv
201.701 19.2512 200.761 19.7011 199.481 20.0411 cv
199.431 19.9011 li
200.401 19.4611 201.101 19.0411 201.551 18.6311 cv
201.991 18.2311 202.291 17.7211 202.451 17.1111 cv
202.601 16.5012 202.681 15.6812 202.681 14.6511 cv
cp
204.691 14.3211 mo
205.361 14.2311 li
205.361 15.6311 li
205.361 18.5911 li
205.331 18.9911 205.591 19.1812 206.141 19.1511 cv
206.551 19.1511 li
206.891 19.1511 207.081 19.0211 207.121 18.7512 cv
207.151 18.4911 207.181 18.0311 207.221 17.3712 cv
207.481 17.3712 li
207.481 17.8712 207.511 18.2711 207.581 18.5612 cv
207.651 18.8611 207.801 19.0311 208.041 19.0612 cv
207.871 19.4911 207.531 19.7111 207.011 19.7111 cv
205.721 19.7111 li
205.041 19.7411 204.691 19.4611 204.691 18.8712 cv
cp
196.341 17.9811 mo
196.681 17.9511 197.221 17.8611 197.961 17.7211 cv
198.701 17.5811 199.731 17.3712 201.031 17.0911 cv
201.081 17.2811 li
200.361 17.4911 199.551 17.7512 198.661 18.0511 cv
197.771 18.3511 197.161 18.6511 196.861 18.9611 cv
cp
197.531 15.4911 mo
197.901 15.4611 199.021 15.3411 200.881 15.1212 cv
200.931 15.3112 li
200.101 15.4611 199.351 15.6311 198.661 15.8211 cv
197.971 16.0111 197.461 16.2311 197.111 16.4811 cv
196.491 15.4911 li
196.801 15.4312 197.231 15.1311 197.781 14.5811 cv
198.331 14.0311 198.811 13.4911 199.231 12.9611 cv
198.711 13.0612 198.261 13.1411 197.891 13.2211 cv
197.511 13.3011 197.151 13.4511 196.801 13.6711 cv
196.291 12.8712 li
196.671 12.7811 197.111 12.3511 197.631 11.5811 cv
198.141 10.8112 198.561 9.99115 198.871 9.12115 cv
199.851 9.73114 li
199.571 9.8811 199.261 10.2011 198.921 10.6711 cv
198.571 11.1711 197.991 11.9011 197.161 12.8712 cv
198.061 12.8112 198.801 12.7611 199.381 12.7311 cv
199.661 12.3811 199.931 11.9312 200.211 11.3712 cv
201.131 12.0311 li
200.831 12.1511 200.381 12.5411 199.791 13.2011 cv
199.181 13.8511 198.421 14.6212 197.531 15.4911 cv
cp
f
112.384 226.651 mo
98.2106 226.651 li
98.2106 184.131 li
112.384 184.131 li
112.384 226.651 li
99.9807 194.769 mo
99.9807 197.131 li
110.611 197.131 li
110.611 194.769 li
99.9807 194.769 li
/1 
[/DeviceCMYK] /CSA add_res
level3{
gsave
clp
[44.82 0 0 -44.82 98.2106 184.131 ]ct
/0 
<<
/ShadingType 3 
/ColorSpace /1 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~zzzzzz!<E3$!<E3$!s/N(!s/N("9S`+"9S`+"U"r."pG/1#6b82#mLS6$4$n;$OI+>$jm:@%LNOC%gra
F&If-K'+YQQ'G(`S((h&W(D7;[(_[M^)\`qc)\j%e*>TCj*u>^n+W)$r+rV@",odm)-64*,-lsE0.N]`
4/Ku><0-_Y@0I7tE1F=CJ1aaUM2^p-T3%??W3\2`\4"Vr_4>&/b4YJAe4tnSh5VXnl5r((n68L:q68L=
r6SpOu6o?b#75cq%75cq%7Q3.(7Q3.(7lWC,7lWC,7lWC,8NA^08NA^0~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[44.82 0 0 -44.82 98.2106 184.131 ]ct
clp
/0 {
/1 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~zzzzzzz!!**%!WiE)!WrN,!s8W-!sA`0"9er4"U5/8"pYA=#RLeD#mgqG$47.K$O[@O%1NdW%Ls![&.f
Ec&eYik',)&o'bqK"()@]&(Ddo*)&aD3)B'P6*#ot>*ZcCF+<VgN+X&!Q,:"N\,paia-7:/h-n-Sp.kE
5'/M8Y/0/"t40ekF>1G^gD2)R9N2`EZT3&ru[3]];`4$,Md4?P_h4Ztqk5!D1q5X7S"5s[e&5s[e&6:+
"*6UO4.6psF26psF277BX677BX67Rfj:7Rfj:7Rfj:7n6*@84Z9B~>
<~zzzzzzz!!**$!<E3%!<N<(!WiE)!WrN,!sA`0"9\i1"9er4"U5/9#6tM?#RC_C#mgnE#mgqG$47.K$k*
RS%Ls![%hB3_&.fEc&J5Wg&eYik',)&o'GM8s'bqK"()@]&(Ddo*(`=20)B0V8*#oq=*??.A*Zc@E+<_
mP+sJ3U,:"N\,paia-71&e-R^Al.4H\q.P!##/1`>(/M/P,/hSb00/"t30JG170ekC;1,:U?1,:U?1G^
gC1c.$G2)R6K2)R6K2E!HO2E!HO2`EZS2`EZS2`EZS3&ilW3&ilW~>
<~zzzzzzz!!**$!<E3%!<N<(!WiE)!WrN,!sA`0"9\i1"9er4"U5/9#6tM?#RC\A#RC_C#mgqG$47.K$O[
@O%1NaU%1NdW%Ls![&.fEc&J5Wg&eYik',)&o'bqK"()@]&(Ddo*(`=20)B0V8*#oq=*??.A*Zc@E+!;
[L+X&!Q+sS<X,U=W],paia-7:/h-n$Jm.4H\q.Olnu.k<,$/1`>(/M/P+/hSb//hSb/0/"t30JG170ek
C;1,:U?1,:U?1,:U?1G^gC1G^gC1c.'I2)R6K2)R6K2E!HO2E!HO~>
0 ]
>>
0 0 0 0 0 1 [
]true true []
/DeviceCMYK
RadialShade
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
.14 lw
98.2106 226.651 mo
112.384 226.651 li
112.384 184.131 li
98.2106 184.131 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
99.6206 216.021 mo
110.961 216.021 li
99.6206 219.001 mo
110.961 219.001 li
99.6206 221.981 mo
110.961 221.981 li
1 /0 /CSD get_res sepcs
.412 sep
@
101.041 191.101 mo
104.231 191.101 li
104.361 190.521 104.941 190.151 105.531 190.281 cv
105.941 190.371 106.261 190.691 106.361 191.101 cv
109.541 191.101 li
110.131 191.101 110.611 190.631 110.611 190.041 cv
110.611 189.451 110.131 188.981 109.541 188.981 cv
101.041 188.981 li
100.451 188.981 99.9806 189.451 99.9806 190.041 cv
99.9806 190.631 100.451 191.101 101.041 191.101 cv
cp
level3{
gsave
[1 0 0 -1 -52.0294 742.471 ]ct
<<
/PatternType 2
/Shading
/1 
<<
/ShadingType 2 
/ColorSpace /1 /CSA get_res
/Coords [157.32 555.62 157.32 551.37 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~8NA^0:-:Q;;*R/C<'ieL=@GOV>Y%9`?;!cg@STMqAPc)$BN.b-CfaO8E*H<BFBquKG@4VTH=L7]I:cmf
JSJ]qKPb?%LN$u.Mf`e9Nd#FBP'_6MQ%*uXR"BVaS;)ImT8A.$U5Xd/VN?W>WKW8JXHnnWY*kCbYa^gl
ZCR7![%Nd.[\K<<\YYlI\u22T];VG\]rRqi^9"1t^os_-_Qg.:_mHOG`O;sTa1/EbaLSZnah,!%bItE2
c+gi?cGI5Ld)<\YdDj%fd`97leB,_$f$)73g!@mBgX4?Nh9s]Xi76Agj4N"uk1\S+khY+7leg[CmGR$K
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~mGR$Kleg[CkhY+7k1\S+j4N"ui76Agh9s]XgX4?Ng!@mBf$)73eB,_$d`97ldDj%fd)<\YcGI5Lc+gi?
bItE2ah,!%aLSZna1/Eb`O;sT_mHOG_Qg.:^os_-^9"1t]rRqi];VG\\u22T\YYlI[\K<<[%Nd.ZCR7!
Ya^glY*kCbXHnnWWKW8JVN?W>U5Xd/T8A.$S;)ImR"BVaQ%*uXP'_6MNd#FBMf`e9LN$u.KPb?%JSJ]q
I:cmfH=L7]G@4VTFBquKE*H<BCfaO8BN.b-APc)$@STMq?;!cg>Y%9`=@GOV<'ieL;*R/C:-:Q;8NA^0
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~8NA^0:-:Q;;*R/C<'ieL=@GOV>Y%9`?;!cg@STMqAPc)$BN.b-CfaO8E*H<BFBquKG@4VTH=L7]I:cmf
JSJ]qKPb?%LN$u.Mf`e9Nd#FBP'_6MQ%*uXR"BVaS;)ImT8A.$U5Xd/VN?W>WKW8JXHnnWY*kCbYa^gl
ZCR7![%Nd.[\K<<\YYlI\u22T];VG\]rRqi^9"1t^os_-_Qg.:_mHOG`O;sTa1/EbaLSZnah,!%bItE2
c+gi?cGI5Ld)<\YdDj%fd`97leB,_$f$)73g!@mBgX4?Nh9s]Xi76Agj4N"uk1\S+khY+7leg[CmGR$K
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~mGR$Kleg[CkhY+7k1\S+j4N"ui76Agh9s]XgX4?Ng!@mBf$)73eB,_$d`97ldDj%fd)<\YcGI5Lc+gi?
bItE2ah,!%aLSZna1/Eb`O;sT_mHOG_Qg.:^os_-^9"1t]rRqi];VG\\u22T\YYlI[\K<<[%Nd.ZCR7!
Ya^glY*kCbXHnnWWKW8JVN?W>U5Xd/T8A.$S;)ImR"BVaQ%*uXP'_6MNd#FBMf`e9LN$u.KPb?%JSJ]q
I:cmfH=L7]G@4VTFBquKE*H<BCfaO8BN.b-APc)$@STMq?;!cg>Y%9`=@GOV<'ieL;*R/C:-:Q;8NA^0
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.24902 .49412 .5 .50588 .75098 ]
/Encode [1 0 1 0 1 0 1 0 1 0 1 0 ]
>>
>> /Gradient add_res /1 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 -52.0294 742.471 ]ct
/1 {
/1 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~m-Eltj5AbJg"+[$dEp1`bK7iG`P]R.^:h.i\[SrOYcb(-Vk]oUR?j%uN/<7?IsZE_Ec,W(@piSG<`;gg
8kr5`=^5<CASH"$FE`%[JV8i;O->ltSY2aUWiWA-ZF%*O]">Yi^r"".a2lBGc-F\`daZn%gYUoMk3;7!
m-O*'k2bLXgY(3.da?Fec-+5Ma2Ps5^qRLo]",;WZEUL5Wi)VbSXGe-O,JgIJUVohFE)/3AR]"O=]J<o
8k`&[<a&d:@qKInEclVRItEB2N0'6hR@U"GVlHi$Yd1XF\[oDd^;.V'`Q-'AbK\>ZdF-Oqg"Y?@j6#Rk
~>
<~hr!8Df[\EtccjMO`l,a/]t:hb[^<<CXK/:tV5'`US!fV-Oc>6RK7J>pF`MA8BOkOX>Zk'):JFGO6pX!u
3BTMm77^'H;,gY%?!q/TC2Is4G^P$oLPh(RPa@f-StVpUVl?`!YHkOD\@K5b^r"%0a3)ZQdF6\!gYLcE
hr!>IgXt*+dEg([a2Z'7^qI@j\@/cMYH=k)Vkp/^Ssu.7P`^r_LP(,)G][qBC1h$a?!CE1;,0bT77'4$
3BKDj6q9jD:Jt1q>[CiLBPVL+Fa8@bK85>DOd)3#S"?=KV5L8mXKSn9[^`l[]t_G&`lH3FcdC1kf\50=
~>
<~io/bKf[\BqbfRlB_S<ap\@/cMYH=k)VPKrZSt)47PECocMM?b5H['XPDJNos@UEAC<`Dpk91_T@5s@@j
2`a&c6:FC:9i+bg=Bf*?A7oXoE-->OItNK5NK93cQC487TVA6[WN3/*ZF%'M]"Pnr`5g$FcdLCtgu%,N
io8tTgtC9,ccsVQ`59=']"#2UZEUI3WMcPdTUq[AQBRGlNJ`ICIsZE^E,B?&A78eK=B/9r9hIoE69dRn
2`Wr`5t"16928>`<`r[7@V'4gDK0cCH[g[&MN*[ZPEqW,StMgRVQ$VuYHkOD\@T>f_SaC8bg4\ef\>9A
~>
<~bK7`>^:CVSWhc2PP`CNMH?3n5>uj`l69I+[.jcDY(D@;e#R(80zzzzzzzzzzzz!!3<0$P*me)^-OZ0fD
-]8PiJpAo;a=K8G\TR@pFYZ*q9Z_T'aAbKJ&J_S<^kZ)jgqR?`kjK7%fZAmSP88OGTu0e=Xp)]'.u$O?
n;zzzzzzzzzzzz!!!'(#R_.V(E4ME.krnD6:amQ?"@bmH@^j3Pa@r:Wire?^;7e1~>
]
>>
157.32 555.62 157.32 551.37 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/1 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
101.041 191.101 mo
104.231 191.101 li
104.361 190.521 104.941 190.151 105.531 190.281 cv
105.941 190.371 106.261 190.691 106.361 191.101 cv
109.541 191.101 li
110.131 191.101 110.611 190.631 110.611 190.041 cv
110.611 189.451 110.131 188.981 109.541 188.981 cv
101.041 188.981 li
100.451 188.981 99.9806 189.451 99.9806 190.041 cv
99.9806 190.631 100.451 191.101 101.041 191.101 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
106.661 205.391 mo
106.661 204.641 106.051 204.031 105.291 204.031 cv
104.541 204.031 103.931 204.641 103.931 205.391 cv
103.931 206.151 104.541 206.761 105.291 206.761 cv
106.051 206.761 106.661 206.151 106.661 205.391 cv
cp
level3{
gsave
[1.9313 0 0 -1.9313 105.291 205.391 ]ct
<<
/PatternType 2
/Shading
/2 
<<
/ShadingType 3 
/ColorSpace /1 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~RfNHgRfNHgS,iQhS,iQhRfNHgS,iQhS,iQhSH/ZiSH/ZiSH/ZiSH/ZiSH/ZiSH/ZiSH/ZiSH/ZiSH/Zi
ScJcjScJcjT)elkT)elkTE+ulT`G&lU&b)kU&auhU&aidUB'reU]BudV#]l_V?#o^VZ>u^VuYu\W;toX
WW:rWWrV#WX8q&VX8prSXT6uRXoQuPYQ3/QYlN5QZ2i8PZN/>PZiJGQ[K+SQ\,aeS\H'kS\cBqS]*6:V
]*cUZ]FW$_]G&6a]bnWe]c+`f^)k)j^*(2k^EUAl^a6\p^aQep_(*%s_(*"r_(<+s_CiA!_(N7u_D&M#
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
>> /Gradient add_res /2 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1.9313 0 0 -1.9313 105.291 205.391 ]ct
/2 {
/1 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~R[T\6R[]e9S"#n:S"#n:S"#n:S"#n:S"-"=S=H+>S=H+>S=H+>S=H+>S=H+>S=H+>S=H+>S=H+>S=Q4A
SXl=BSXl@DSt;OFSt;RHT:_dLTV/!PTqS0RTqS0RTqS3TU8"EXUSFW\Unji`V5:&dVP^8hVl-JlW2Q\p
WMuksWiE)"X/i;%X/i;&XK8M*Xf\_.Y-5%5Yct@:Z*CR>ZEgdBZa7!F['d<M[^W`U\@B&Z\[f8^]"5Ja
]"5Ja]=Y\e]=Y\e]Y(ni]Y(ni]tM+m]tM+m^:q=q^V@Ou^V@Ou^qdb$^qdb$^qdb$_83t(_83t(_83t(
~>
<~zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz!<N?,"pYD?$OdIS%hK<c'GVB"(`4,.)B0
Y:*ZcCF+<VgN+sS<X,pjrd-n$Mn.4H\p.Olr!/1`A)/M/P+/hSe1~>
<~s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W)trr2lpr;?HgqYBp\p@\(Mo^qeJoCMPCn*]Q/lg*j$lK[Wuki_*ijQ#4X
i8EPNhr!>JhVI#CgY1B7g"=s/f%&=#eC<!se'ldoda?Ihd*U.ccd0q`cd'h\c-=MXc-=MWbfn;SbK@rJ
aN2HDa2c6@`l?!:`5KR2_SX1,_83t(^qdb$^V@Ls]tM+m]tD"i]"5Ja]"5Ja\[f8]\@B&Y\@B&Y\@B&Y
~>
0 ]
>>
0 0 0 0 0 1 [
]true true []
/DeviceCMYK
RadialShade
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/2 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
110.611 197.131 mo
99.9807 197.131 li
99.9807 194.769 li
110.611 194.769 li
110.611 197.131 li
level3{
gsave
clp
[44.82 0 0 -44.82 98.2106 184.131 ]ct
/3 
<<
/ShadingType 3 
/ColorSpace /1 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~4"Vr_4"Vr_4"Vr_4>&/b4>&/b4>&/b4>&/b4>&/b4YJAe4YJAe4YJAe4YJAe4tnSh4tnSh4tnSh5;=bj
5;=bj5Vatm5Vatm5r11p5r11p68L=r6SpOu6SpOu6o?b#75cq%75cq%7Q3.(7lWC,8NA^08NA^0905*5
9KY<8:-:Q;:H^c>:d-uA:d-uA;*R/C;F!AF;aESI<'ieL<'ieL<C9"O=%#=S=@GLU=@GLU=[k^X=[k^X
>":p[>":p[>=_-^>=_-^>Y.?a>Y.?a>tRQd>tRQd>tRQd?;!cg?;!cg?;!cg?;!cg?;!cg?VEuj?VEuj
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[44.82 0 0 -44.82 98.2106 184.131 ]ct
clp
/3 {
/1 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~3]];_3]];_3]fDb4$,Mc4$,Mc4$,Mc4$,Mc4$5Vf4?P_g4?P_g4?P_g4?Yhj4Ztqk4Ztqk4[)%n5!D.o
5!D1q5<h@s5<hCu5X7S"5X7V$5s[h(6:+"*6:+%,6UO706psF26psI477B[87Rfm<84Z9B84Z<D8kM`L
91qoO9MJ5V:/4P[:JXb^:JXb_:f'tc;,L1g;GpCk;c?Un;c?Uo<)cgs<E<.%='&I)='&I*=BJ[-=BJ[.
=]nm1=]nm1>$>*5>$>*5>?b<9>?b<9>[1N=>[1N=>[1N=?!U`A?!U`A?!U`A?!U`A?!U`A?=$rE?=$rE
~>
<~/1`>'/1`>'/1iG*/M/P+/M/P+/M/P+/M/P+/M8Y./hSb//hSb//hSb//h\k20/"t30/"t30/,(60JG17
0JG490ekC;0ekF=1,:U?1,:U?1,:XA1G^gC1G^jE1c.'I2)R6K2)R9M2E!KQ2`E]U3&ilW3&ioY3]]>a
4$,Mc4$,Md4?P_h4Ztqk4Ztql5!D.p5<h@t5X7S#5s[e&5s[e'6:+"+6UO4/6psF26psF377BX677BX7
7Rfj:7Rfj:7n6'>7n6'>84Z9B84Z9B8P)KF8P)KF8P)KF8kM]J8kM]J8kM]J8kM]J8kM]J91qoN91qoN
~>
<~.Olnt.Olnt.P!#".k<,#.k<,#.k<,#.k<,#.kE5&/1`>'/1`>'/1`>'/1iG*/M/P+/M/P+/M/P+/M/P+
/M/S-/hSb//hSe10/"t30/#"50JG490ekC;0ekF=1,:U?1,:U?1,:XA1G^jE2)R9M2E!HO2E!KQ2`E]U
3&ilX3B9)\3]];`4$,Mc4$,Mc4$,Md4?P_h4Ztql5!D.o5!D.p5<h@t5X7S"5X7S"5X7S#5s[e&5s[e'
6:+"*6:+"*6UO4.6UO4.6psF26psF277BX677BX677BX67Rfj:7Rfj:7Rfj:7Rfj:7Rfj:7n6'>7n6'>
~>
0 ]
>>
0 0 0 0 0 1 [
]true true []
/DeviceCMYK
RadialShade
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
99.9806 197.131 mo
110.611 197.131 li
110.611 194.769 li
99.9806 194.769 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
100.901 196.161 mo
109.691 196.161 li
109.801 196.161 109.901 196.061 109.901 195.951 cv
109.901 195.831 109.801 195.731 109.691 195.731 cv
100.901 195.731 li
100.781 195.731 100.691 195.831 100.691 195.951 cv
100.691 196.061 100.781 196.161 100.901 196.161 cv
cp
level3{
gsave
[1 0 0 -1 -52.0294 742.471 ]ct
<<
/PatternType 2
/Shading
/4 
<<
/ShadingType 2 
/ColorSpace /1 /CSA get_res
/Coords [157.32 547.16 157.32 546.31 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~8NA^0:-:Q;;*R/C<'ieL=@GOV>Y%9`?;!cg@STMqAPc)$BN.b-CfaO8E*H<BFBquKG@4VTH=L7]I:cmf
JSJ]qKPb?%LN$u.Mf`e9Nd#FBP'_6MQ%*uXR"BVaS;)ImT8A.$U5Xd/VN?W>WKW8JXHnnWY*kCbYa^gl
ZCR7![%Nd.[\K<<\YYlI\u22T];VG\]rRqi^9"1t^os_-_Qg.:_mHOG`O;sTa1/EbaLSZnah,!%bItE2
c+gi?cGI5Ld)<\YdDj%fd`97leB,_$f$)73g!@mBgX4?Nh9s]Xi76Agj4N"uk1\S+khY+7leg[CmGR$K
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~mGR$Kleg[CkhY+7k1\S+j4N"ui76Agh9s]XgX4?Ng!@mBf$)73eB,_$d`97ldDj%fd)<\YcGI5Lc+gi?
bItE2ah,!%aLSZna1/Eb`O;sT_mHOG_Qg.:^os_-^9"1t]rRqi];VG\\u22T\YYlI[\K<<[%Nd.ZCR7!
Ya^glY*kCbXHnnWWKW8JVN?W>U5Xd/T8A.$S;)ImR"BVaQ%*uXP'_6MNd#FBMf`e9LN$u.KPb?%JSJ]q
I:cmfH=L7]G@4VTFBquKE*H<BCfaO8BN.b-APc)$@STMq?;!cg>Y%9`=@GOV<'ieL;*R/C:-:Q;8NA^0
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~8NA^0:-:Q;;*R/C<'ieL=@GOV>Y%9`?;!cg@STMqAPc)$BN.b-CfaO8E*H<BFBquKG@4VTH=L7]I:cmf
JSJ]qKPb?%LN$u.Mf`e9Nd#FBP'_6MQ%*uXR"BVaS;)ImT8A.$U5Xd/VN?W>WKW8JXHnnWY*kCbYa^gl
ZCR7![%Nd.[\K<<\YYlI\u22T];VG\]rRqi^9"1t^os_-_Qg.:_mHOG`O;sTa1/EbaLSZnah,!%bItE2
c+gi?cGI5Ld)<\YdDj%fd`97leB,_$f$)73g!@mBgX4?Nh9s]Xi76Agj4N"uk1\S+khY+7leg[CmGR$K
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~mGR$Kleg[CkhY+7k1\S+j4N"ui76Agh9s]XgX4?Ng!@mBf$)73eB,_$d`97ldDj%fd)<\YcGI5Lc+gi?
bItE2ah,!%aLSZna1/Eb`O;sT_mHOG_Qg.:^os_-^9"1t]rRqi];VG\\u22T\YYlI[\K<<[%Nd.ZCR7!
Ya^glY*kCbXHnnWWKW8JVN?W>U5Xd/T8A.$S;)ImR"BVaQ%*uXP'_6MNd#FBMf`e9LN$u.KPb?%JSJ]q
I:cmfH=L7]G@4VTFBquKE*H<BCfaO8BN.b-APc)$@STMq?;!cg>Y%9`=@GOV<'ieL;*R/C:-:Q;8NA^0
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.24902 .49412 .5 .50588 .75098 ]
/Encode [1 0 1 0 1 0 1 0 1 0 1 0 ]
>>
>> /Gradient add_res /4 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 -52.0294 742.471 ]ct
/4 {
/1 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~m-Eltj5AbJg"+[$dEp1`bK7iG`P]R.^:h.i\[SrOYcb(-Vk]oUR?j%uN/<7?IsZE_Ec,W(@piSG<`;gg
8kr5`=^5<CASH"$FE`%[JV8i;O->ltSY2aUWiWA-ZF%*O]">Yi^r"".a2lBGc-F\`daZn%gYUoMk3;7!
m-O*'k2bLXgY(3.da?Fec-+5Ma2Ps5^qRLo]",;WZEUL5Wi)VbSXGe-O,JgIJUVohFE)/3AR]"O=]J<o
8k`&[<a&d:@qKInEclVRItEB2N0'6hR@U"GVlHi$Yd1XF\[oDd^;.V'`Q-'AbK\>ZdF-Oqg"Y?@j6#Rk
~>
<~hr!8Df[\EtccjMO`l,a/]t:hb[^<<CXK/:tV5'`US!fV-Oc>6RK7J>pF`MA8BOkOX>Zk'):JFGO6pX!u
3BTMm77^'H;,gY%?!q/TC2Is4G^P$oLPh(RPa@f-StVpUVl?`!YHkOD\@K5b^r"%0a3)ZQdF6\!gYLcE
hr!>IgXt*+dEg([a2Z'7^qI@j\@/cMYH=k)Vkp/^Ssu.7P`^r_LP(,)G][qBC1h$a?!CE1;,0bT77'4$
3BKDj6q9jD:Jt1q>[CiLBPVL+Fa8@bK85>DOd)3#S"?=KV5L8mXKSn9[^`l[]t_G&`lH3FcdC1kf\50=
~>
<~io/bKf[\BqbfRlB_S<ap\@/cMYH=k)VPKrZSt)47PECocMM?b5H['XPDJNos@UEAC<`Dpk91_T@5s@@j
2`a&c6:FC:9i+bg=Bf*?A7oXoE-->OItNK5NK93cQC487TVA6[WN3/*ZF%'M]"Pnr`5g$FcdLCtgu%,N
io8tTgtC9,ccsVQ`59=']"#2UZEUI3WMcPdTUq[AQBRGlNJ`ICIsZE^E,B?&A78eK=B/9r9hIoE69dRn
2`Wr`5t"16928>`<`r[7@V'4gDK0cCH[g[&MN*[ZPEqW,StMgRVQ$VuYHkOD\@T>f_SaC8bg4\ef\>9A
~>
<~bK7`>^:CVSWhc2PP`CNMH?3n5>uj`l69I+[.jcDY(D@;e#R(80zzzzzzzzzzzz!!3<0$P*me)^-OZ0fD
-]8PiJpAo;a=K8G\TR@pFYZ*q9Z_T'aAbKJ&J_S<^kZ)jgqR?`kjK7%fZAmSP88OGTu0e=Xp)]'.u$O?
n;zzzzzzzzzzzz!!!'(#R_.V(E4ME.krnD6:amQ?"@bmH@^j3Pa@r:Wire?^;7e1~>
]
>>
157.32 547.16 157.32 546.31 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/4 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
100.901 196.161 mo
109.691 196.161 li
109.801 196.161 109.901 196.061 109.901 195.951 cv
109.901 195.831 109.801 195.731 109.691 195.731 cv
100.901 195.731 li
100.781 195.731 100.691 195.831 100.691 195.951 cv
100.691 196.061 100.781 196.161 100.901 196.161 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
188.844 226.581 mo
174.811 226.581 li
174.811 184.201 li
188.844 184.201 li
188.844 226.581 li
176.511 194.769 mo
176.511 197.131 li
187.141 197.131 li
187.141 194.769 li
176.511 194.769 li
level3{
gsave
clp
[44.82 0 0 -44.82 174.741 184.131 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[44.82 0 0 -44.82 174.741 184.131 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
174.741 226.651 mo
174.741 226.581 li
188.844 226.581 li
188.844 184.201 li
174.811 184.201 li
174.811 226.651 li
174.741 226.651 li
174.741 226.581 li
174.741 226.651 li
174.671 226.651 li
174.671 184.131 li
174.691 184.082 li
174.741 184.061 li
188.914 184.061 li
188.963 184.082 li
188.984 184.131 li
188.984 226.651 li
188.963 226.701 li
188.914 226.721 li
174.741 226.721 li
174.691 226.701 li
174.671 226.651 li
174.741 226.651 li
1 /0 /CSD get_res sepcs
1 sep
f
176.161 216.021 mo
187.501 216.021 li
176.161 219.001 mo
187.501 219.001 li
176.161 221.981 mo
187.501 221.981 li
1 /0 /CSD get_res sepcs
.412 sep
@
177.581 191.101 mo
180.771 191.101 li
180.901 190.521 181.481 190.151 182.071 190.281 cv
182.481 190.371 182.801 190.691 182.891 191.101 cv
186.081 191.101 li
186.671 191.101 187.141 190.631 187.141 190.041 cv
187.141 189.451 186.671 188.981 186.081 188.981 cv
177.581 188.981 li
176.991 188.981 176.511 189.451 176.511 190.041 cv
176.511 190.631 176.991 191.101 177.581 191.101 cv
cp
level3{
gsave
[1 0 0 -1 -52.0294 742.471 ]ct
<<
/PatternType 2
/Shading
/5 
<<
/ShadingType 2 
/ColorSpace /1 /CSA get_res
/Coords [233.86 555.62 233.86 551.37 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~8NA^0:-:Q;;*R/C<'ieL=@GOV>Y%9`?;!cg@STMqAPc)$BN.b-CfaO8E*H<BFBquKG@4VTH=L7]I:cmf
JSJ]qKPb?%LN$u.Mf`e9Nd#FBP'_6MQ%*uXR"BVaS;)ImT8A.$U5Xd/VN?W>WKW8JXHnnWY*kCbYa^gl
ZCR7![%Nd.[\K<<\YYlI\u22T];VG\]rRqi^9"1t^os_-_Qg.:_mHOG`O;sTa1/EbaLSZnah,!%bItE2
c+gi?cGI5Ld)<\YdDj%fd`97leB,_$f$)73g!@mBgX4?Nh9s]Xi76Agj4N"uk1\S+khY+7leg[CmGR$K
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~mGR$Kleg[CkhY+7k1\S+j4N"ui76Agh9s]XgX4?Ng!@mBf$)73eB,_$d`97ldDj%fd)<\YcGI5Lc+gi?
bItE2ah,!%aLSZna1/Eb`O;sT_mHOG_Qg.:^os_-^9"1t]rRqi];VG\\u22T\YYlI[\K<<[%Nd.ZCR7!
Ya^glY*kCbXHnnWWKW8JVN?W>U5Xd/T8A.$S;)ImR"BVaQ%*uXP'_6MNd#FBMf`e9LN$u.KPb?%JSJ]q
I:cmfH=L7]G@4VTFBquKE*H<BCfaO8BN.b-APc)$@STMq?;!cg>Y%9`=@GOV<'ieL;*R/C:-:Q;8NA^0
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~8NA^0:-:Q;;*R/C<'ieL=@GOV>Y%9`?;!cg@STMqAPc)$BN.b-CfaO8E*H<BFBquKG@4VTH=L7]I:cmf
JSJ]qKPb?%LN$u.Mf`e9Nd#FBP'_6MQ%*uXR"BVaS;)ImT8A.$U5Xd/VN?W>WKW8JXHnnWY*kCbYa^gl
ZCR7![%Nd.[\K<<\YYlI\u22T];VG\]rRqi^9"1t^os_-_Qg.:_mHOG`O;sTa1/EbaLSZnah,!%bItE2
c+gi?cGI5Ld)<\YdDj%fd`97leB,_$f$)73g!@mBgX4?Nh9s]Xi76Agj4N"uk1\S+khY+7leg[CmGR$K
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~mGR$Kleg[CkhY+7k1\S+j4N"ui76Agh9s]XgX4?Ng!@mBf$)73eB,_$d`97ldDj%fd)<\YcGI5Lc+gi?
bItE2ah,!%aLSZna1/Eb`O;sT_mHOG_Qg.:^os_-^9"1t]rRqi];VG\\u22T\YYlI[\K<<[%Nd.ZCR7!
Ya^glY*kCbXHnnWWKW8JVN?W>U5Xd/T8A.$S;)ImR"BVaQ%*uXP'_6MNd#FBMf`e9LN$u.KPb?%JSJ]q
I:cmfH=L7]G@4VTFBquKE*H<BCfaO8BN.b-APc)$@STMq?;!cg>Y%9`=@GOV<'ieL;*R/C:-:Q;8NA^0
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.24902 .49412 .5 .50588 .75098 ]
/Encode [1 0 1 0 1 0 1 0 1 0 1 0 ]
>>
>> /Gradient add_res /5 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 -52.0294 742.471 ]ct
/5 {
/1 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~m-Eltj5AbJg"+[$dEp1`bK7iG`P]R.^:h.i\[SrOYcb(-Vk]oUR?j%uN/<7?IsZE_Ec,W(@piSG<`;gg
8kr5`=^5<CASH"$FE`%[JV8i;O->ltSY2aUWiWA-ZF%*O]">Yi^r"".a2lBGc-F\`daZn%gYUoMk3;7!
m-O*'k2bLXgY(3.da?Fec-+5Ma2Ps5^qRLo]",;WZEUL5Wi)VbSXGe-O,JgIJUVohFE)/3AR]"O=]J<o
8k`&[<a&d:@qKInEclVRItEB2N0'6hR@U"GVlHi$Yd1XF\[oDd^;.V'`Q-'AbK\>ZdF-Oqg"Y?@j6#Rk
~>
<~hr!8Df[\EtccjMO`l,a/]t:hb[^<<CXK/:tV5'`US!fV-Oc>6RK7J>pF`MA8BOkOX>Zk'):JFGO6pX!u
3BTMm77^'H;,gY%?!q/TC2Is4G^P$oLPh(RPa@f-StVpUVl?`!YHkOD\@K5b^r"%0a3)ZQdF6\!gYLcE
hr!>IgXt*+dEg([a2Z'7^qI@j\@/cMYH=k)Vkp/^Ssu.7P`^r_LP(,)G][qBC1h$a?!CE1;,0bT77'4$
3BKDj6q9jD:Jt1q>[CiLBPVL+Fa8@bK85>DOd)3#S"?=KV5L8mXKSn9[^`l[]t_G&`lH3FcdC1kf\50=
~>
<~io/bKf[\BqbfRlB_S<ap\@/cMYH=k)VPKrZSt)47PECocMM?b5H['XPDJNos@UEAC<`Dpk91_T@5s@@j
2`a&c6:FC:9i+bg=Bf*?A7oXoE-->OItNK5NK93cQC487TVA6[WN3/*ZF%'M]"Pnr`5g$FcdLCtgu%,N
io8tTgtC9,ccsVQ`59=']"#2UZEUI3WMcPdTUq[AQBRGlNJ`ICIsZE^E,B?&A78eK=B/9r9hIoE69dRn
2`Wr`5t"16928>`<`r[7@V'4gDK0cCH[g[&MN*[ZPEqW,StMgRVQ$VuYHkOD\@T>f_SaC8bg4\ef\>9A
~>
<~bK7`>^:CVSWhc2PP`CNMH?3n5>uj`l69I+[.jcDY(D@;e#R(80zzzzzzzzzzzz!!3<0$P*me)^-OZ0fD
-]8PiJpAo;a=K8G\TR@pFYZ*q9Z_T'aAbKJ&J_S<^kZ)jgqR?`kjK7%fZAmSP88OGTu0e=Xp)]'.u$O?
n;zzzzzzzzzzzz!!!'(#R_.V(E4ME.krnD6:amQ?"@bmH@^j3Pa@r:Wire?^;7e1~>
]
>>
233.86 555.62 233.86 551.37 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/5 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
177.581 191.101 mo
180.771 191.101 li
180.901 190.521 181.481 190.151 182.071 190.281 cv
182.481 190.371 182.801 190.691 182.891 191.101 cv
186.081 191.101 li
186.671 191.101 187.141 190.631 187.141 190.041 cv
187.141 189.451 186.671 188.981 186.081 188.981 cv
177.581 188.981 li
176.991 188.981 176.511 189.451 176.511 190.041 cv
176.511 190.631 176.991 191.101 177.581 191.101 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
183.191 205.391 mo
183.191 204.641 182.581 204.031 181.831 204.031 cv
181.071 204.031 180.461 204.641 180.461 205.391 cv
180.461 206.151 181.071 206.761 181.831 206.761 cv
182.581 206.761 183.191 206.151 183.191 205.391 cv
cp
level3{
gsave
[1.9313 0 0 -1.9313 181.831 205.391 ]ct
<<
/PatternType 2
/Shading
/2 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1.9313 0 0 -1.9313 181.831 205.391 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/2 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
187.141 197.131 mo
176.511 197.131 li
176.511 194.769 li
187.141 194.769 li
187.141 197.131 li
level3{
gsave
clp
[44.82 0 0 -44.82 174.741 184.131 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[44.82 0 0 -44.82 174.741 184.131 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
176.511 197.131 mo
187.141 197.131 li
187.141 194.769 li
176.511 194.769 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
177.431 196.161 mo
186.221 196.161 li
186.341 196.161 186.431 196.061 186.431 195.951 cv
186.431 195.831 186.341 195.731 186.221 195.731 cv
177.431 195.731 li
177.321 195.731 177.221 195.831 177.221 195.951 cv
177.221 196.061 177.321 196.161 177.431 196.161 cv
cp
level3{
gsave
[1 0 0 -1 -52.0294 742.471 ]ct
<<
/PatternType 2
/Shading
/6 
<<
/ShadingType 2 
/ColorSpace /1 /CSA get_res
/Coords [233.86 547.16 233.86 546.31 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~8NA^0:-:Q;;*R/C<'ieL=@GOV>Y%9`?;!cg@STMqAPc)$BN.b-CfaO8E*H<BFBquKG@4VTH=L7]I:cmf
JSJ]qKPb?%LN$u.Mf`e9Nd#FBP'_6MQ%*uXR"BVaS;)ImT8A.$U5Xd/VN?W>WKW8JXHnnWY*kCbYa^gl
ZCR7![%Nd.[\K<<\YYlI\u22T];VG\]rRqi^9"1t^os_-_Qg.:_mHOG`O;sTa1/EbaLSZnah,!%bItE2
c+gi?cGI5Ld)<\YdDj%fd`97leB,_$f$)73g!@mBgX4?Nh9s]Xi76Agj4N"uk1\S+khY+7leg[CmGR$K
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~mGR$Kleg[CkhY+7k1\S+j4N"ui76Agh9s]XgX4?Ng!@mBf$)73eB,_$d`97ldDj%fd)<\YcGI5Lc+gi?
bItE2ah,!%aLSZna1/Eb`O;sT_mHOG_Qg.:^os_-^9"1t]rRqi];VG\\u22T\YYlI[\K<<[%Nd.ZCR7!
Ya^glY*kCbXHnnWWKW8JVN?W>U5Xd/T8A.$S;)ImR"BVaQ%*uXP'_6MNd#FBMf`e9LN$u.KPb?%JSJ]q
I:cmfH=L7]G@4VTFBquKE*H<BCfaO8BN.b-APc)$@STMq?;!cg>Y%9`=@GOV<'ieL;*R/C:-:Q;8NA^0
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~8NA^0:-:Q;;*R/C<'ieL=@GOV>Y%9`?;!cg@STMqAPc)$BN.b-CfaO8E*H<BFBquKG@4VTH=L7]I:cmf
JSJ]qKPb?%LN$u.Mf`e9Nd#FBP'_6MQ%*uXR"BVaS;)ImT8A.$U5Xd/VN?W>WKW8JXHnnWY*kCbYa^gl
ZCR7![%Nd.[\K<<\YYlI\u22T];VG\]rRqi^9"1t^os_-_Qg.:_mHOG`O;sTa1/EbaLSZnah,!%bItE2
c+gi?cGI5Ld)<\YdDj%fd`97leB,_$f$)73g!@mBgX4?Nh9s]Xi76Agj4N"uk1\S+khY+7leg[CmGR$K
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~mGR$Kleg[CkhY+7k1\S+j4N"ui76Agh9s]XgX4?Ng!@mBf$)73eB,_$d`97ldDj%fd)<\YcGI5Lc+gi?
bItE2ah,!%aLSZna1/Eb`O;sT_mHOG_Qg.:^os_-^9"1t]rRqi];VG\\u22T\YYlI[\K<<[%Nd.ZCR7!
Ya^glY*kCbXHnnWWKW8JVN?W>U5Xd/T8A.$S;)ImR"BVaQ%*uXP'_6MNd#FBMf`e9LN$u.KPb?%JSJ]q
I:cmfH=L7]G@4VTFBquKE*H<BCfaO8BN.b-APc)$@STMq?;!cg>Y%9`=@GOV<'ieL;*R/C:-:Q;8NA^0
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.24902 .49412 .5 .50588 .75098 ]
/Encode [1 0 1 0 1 0 1 0 1 0 1 0 ]
>>
>> /Gradient add_res /6 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 -52.0294 742.471 ]ct
/6 {
/1 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~m-Eltj5AbJg"+[$dEp1`bK7iG`P]R.^:h.i\[SrOYcb(-Vk]oUR?j%uN/<7?IsZE_Ec,W(@piSG<`;gg
8kr5`=^5<CASH"$FE`%[JV8i;O->ltSY2aUWiWA-ZF%*O]">Yi^r"".a2lBGc-F\`daZn%gYUoMk3;7!
m-O*'k2bLXgY(3.da?Fec-+5Ma2Ps5^qRLo]",;WZEUL5Wi)VbSXGe-O,JgIJUVohFE)/3AR]"O=]J<o
8k`&[<a&d:@qKInEclVRItEB2N0'6hR@U"GVlHi$Yd1XF\[oDd^;.V'`Q-'AbK\>ZdF-Oqg"Y?@j6#Rk
~>
<~hr!8Df[\EtccjMO`l,a/]t:hb[^<<CXK/:tV5'`US!fV-Oc>6RK7J>pF`MA8BOkOX>Zk'):JFGO6pX!u
3BTMm77^'H;,gY%?!q/TC2Is4G^P$oLPh(RPa@f-StVpUVl?`!YHkOD\@K5b^r"%0a3)ZQdF6\!gYLcE
hr!>IgXt*+dEg([a2Z'7^qI@j\@/cMYH=k)Vkp/^Ssu.7P`^r_LP(,)G][qBC1h$a?!CE1;,0bT77'4$
3BKDj6q9jD:Jt1q>[CiLBPVL+Fa8@bK85>DOd)3#S"?=KV5L8mXKSn9[^`l[]t_G&`lH3FcdC1kf\50=
~>
<~io/bKf[\BqbfRlB_S<ap\@/cMYH=k)VPKrZSt)47PECocMM?b5H['XPDJNos@UEAC<`Dpk91_T@5s@@j
2`a&c6:FC:9i+bg=Bf*?A7oXoE-->OItNK5NK93cQC487TVA6[WN3/*ZF%'M]"Pnr`5g$FcdLCtgu%,N
io8tTgtC9,ccsVQ`59=']"#2UZEUI3WMcPdTUq[AQBRGlNJ`ICIsZE^E,B?&A78eK=B/9r9hIoE69dRn
2`Wr`5t"16928>`<`r[7@V'4gDK0cCH[g[&MN*[ZPEqW,StMgRVQ$VuYHkOD\@T>f_SaC8bg4\ef\>9A
~>
<~bK7`>^:CVSWhc2PP`CNMH?3n5>uj`l69I+[.jcDY(D@;e#R(80zzzzzzzzzzzz!!3<0$P*me)^-OZ0fD
-]8PiJpAo;a=K8G\TR@pFYZ*q9Z_T'aAbKJ&J_S<^kZ)jgqR?`kjK7%fZAmSP88OGTu0e=Xp)]'.u$O?
n;zzzzzzzzzzzz!!!'(#R_.V(E4ME.krnD6:amQ?"@bmH@^j3Pa@r:Wire?^;7e1~>
]
>>
233.86 547.16 233.86 546.31 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/6 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
177.431 196.161 mo
186.221 196.161 li
186.341 196.161 186.431 196.061 186.431 195.951 cv
186.431 195.831 186.341 195.731 186.221 195.731 cv
177.431 195.731 li
177.321 195.731 177.221 195.831 177.221 195.951 cv
177.221 196.061 177.321 196.161 177.431 196.161 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
265.454 226.651 mo
251.281 226.651 li
251.281 184.131 li
265.454 184.131 li
265.454 226.651 li
253.051 194.769 mo
253.051 197.131 li
263.681 197.131 li
263.681 194.769 li
253.051 194.769 li
level3{
gsave
clp
[44.82 0 0 -44.82 251.281 184.131 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[44.82 0 0 -44.82 251.281 184.131 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
251.281 226.651 mo
265.454 226.651 li
265.454 184.131 li
251.281 184.131 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
252.691 216.021 mo
264.031 216.021 li
252.691 219.001 mo
264.031 219.001 li
252.691 221.981 mo
264.031 221.981 li
1 /0 /CSD get_res sepcs
.412 sep
@
254.111 191.101 mo
257.301 191.101 li
257.431 190.521 258.021 190.151 258.601 190.281 cv
259.011 190.371 259.331 190.691 259.431 191.101 cv
262.621 191.101 li
263.201 191.101 263.681 190.631 263.681 190.041 cv
263.681 189.451 263.201 188.981 262.621 188.981 cv
254.111 188.981 li
253.521 188.981 253.051 189.451 253.051 190.041 cv
253.051 190.631 253.521 191.101 254.111 191.101 cv
cp
level3{
gsave
[1 0 0 -1 -52.0294 742.471 ]ct
<<
/PatternType 2
/Shading
/7 
<<
/ShadingType 2 
/ColorSpace /1 /CSA get_res
/Coords [310.39 555.62 310.39 551.37 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~8NA^0:-:Q;;*R/C<'ieL=@GOV>Y%9`?;!cg@STMqAPc)$BN.b-CfaO8E*H<BFBquKG@4VTH=L7]I:cmf
JSJ]qKPb?%LN$u.Mf`e9Nd#FBP'_6MQ%*uXR"BVaS;)ImT8A.$U5Xd/VN?W>WKW8JXHnnWY*kCbYa^gl
ZCR7![%Nd.[\K<<\YYlI\u22T];VG\]rRqi^9"1t^os_-_Qg.:_mHOG`O;sTa1/EbaLSZnah,!%bItE2
c+gi?cGI5Ld)<\YdDj%fd`97leB,_$f$)73g!@mBgX4?Nh9s]Xi76Agj4N"uk1\S+khY+7leg[CmGR$K
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~mGR$Kleg[CkhY+7k1\S+j4N"ui76Agh9s]XgX4?Ng!@mBf$)73eB,_$d`97ldDj%fd)<\YcGI5Lc+gi?
bItE2ah,!%aLSZna1/Eb`O;sT_mHOG_Qg.:^os_-^9"1t]rRqi];VG\\u22T\YYlI[\K<<[%Nd.ZCR7!
Ya^glY*kCbXHnnWWKW8JVN?W>U5Xd/T8A.$S;)ImR"BVaQ%*uXP'_6MNd#FBMf`e9LN$u.KPb?%JSJ]q
I:cmfH=L7]G@4VTFBquKE*H<BCfaO8BN.b-APc)$@STMq?;!cg>Y%9`=@GOV<'ieL;*R/C:-:Q;8NA^0
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~8NA^0:-:Q;;*R/C<'ieL=@GOV>Y%9`?;!cg@STMqAPc)$BN.b-CfaO8E*H<BFBquKG@4VTH=L7]I:cmf
JSJ]qKPb?%LN$u.Mf`e9Nd#FBP'_6MQ%*uXR"BVaS;)ImT8A.$U5Xd/VN?W>WKW8JXHnnWY*kCbYa^gl
ZCR7![%Nd.[\K<<\YYlI\u22T];VG\]rRqi^9"1t^os_-_Qg.:_mHOG`O;sTa1/EbaLSZnah,!%bItE2
c+gi?cGI5Ld)<\YdDj%fd`97leB,_$f$)73g!@mBgX4?Nh9s]Xi76Agj4N"uk1\S+khY+7leg[CmGR$K
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~mGR$Kleg[CkhY+7k1\S+j4N"ui76Agh9s]XgX4?Ng!@mBf$)73eB,_$d`97ldDj%fd)<\YcGI5Lc+gi?
bItE2ah,!%aLSZna1/Eb`O;sT_mHOG_Qg.:^os_-^9"1t]rRqi];VG\\u22T\YYlI[\K<<[%Nd.ZCR7!
Ya^glY*kCbXHnnWWKW8JVN?W>U5Xd/T8A.$S;)ImR"BVaQ%*uXP'_6MNd#FBMf`e9LN$u.KPb?%JSJ]q
I:cmfH=L7]G@4VTFBquKE*H<BCfaO8BN.b-APc)$@STMq?;!cg>Y%9`=@GOV<'ieL;*R/C:-:Q;8NA^0
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.24902 .49412 .5 .50588 .75098 ]
/Encode [1 0 1 0 1 0 1 0 1 0 1 0 ]
>>
>> /Gradient add_res /7 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 -52.0294 742.471 ]ct
/7 {
/1 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~m-Eltj5AbJg"+[$dEp1`bK7iG`P]R.^:h.i\[SrOYcb(-Vk]oUR?j%uN/<7?IsZE_Ec,W(@piSG<`;gg
8kr5`=^5<CASH"$FE`%[JV8i;O->ltSY2aUWiWA-ZF%*O]">Yi^r"".a2lBGc-F\`daZn%gYUoMk3;7!
m-O*'k2bLXgY(3.da?Fec-+5Ma2Ps5^qRLo]",;WZEUL5Wi)VbSXGe-O,JgIJUVohFE)/3AR]"O=]J<o
8k`&[<a&d:@qKInEclVRItEB2N0'6hR@U"GVlHi$Yd1XF\[oDd^;.V'`Q-'AbK\>ZdF-Oqg"Y?@j6#Rk
~>
<~hr!8Df[\EtccjMO`l,a/]t:hb[^<<CXK/:tV5'`US!fV-Oc>6RK7J>pF`MA8BOkOX>Zk'):JFGO6pX!u
3BTMm77^'H;,gY%?!q/TC2Is4G^P$oLPh(RPa@f-StVpUVl?`!YHkOD\@K5b^r"%0a3)ZQdF6\!gYLcE
hr!>IgXt*+dEg([a2Z'7^qI@j\@/cMYH=k)Vkp/^Ssu.7P`^r_LP(,)G][qBC1h$a?!CE1;,0bT77'4$
3BKDj6q9jD:Jt1q>[CiLBPVL+Fa8@bK85>DOd)3#S"?=KV5L8mXKSn9[^`l[]t_G&`lH3FcdC1kf\50=
~>
<~io/bKf[\BqbfRlB_S<ap\@/cMYH=k)VPKrZSt)47PECocMM?b5H['XPDJNos@UEAC<`Dpk91_T@5s@@j
2`a&c6:FC:9i+bg=Bf*?A7oXoE-->OItNK5NK93cQC487TVA6[WN3/*ZF%'M]"Pnr`5g$FcdLCtgu%,N
io8tTgtC9,ccsVQ`59=']"#2UZEUI3WMcPdTUq[AQBRGlNJ`ICIsZE^E,B?&A78eK=B/9r9hIoE69dRn
2`Wr`5t"16928>`<`r[7@V'4gDK0cCH[g[&MN*[ZPEqW,StMgRVQ$VuYHkOD\@T>f_SaC8bg4\ef\>9A
~>
<~bK7`>^:CVSWhc2PP`CNMH?3n5>uj`l69I+[.jcDY(D@;e#R(80zzzzzzzzzzzz!!3<0$P*me)^-OZ0fD
-]8PiJpAo;a=K8G\TR@pFYZ*q9Z_T'aAbKJ&J_S<^kZ)jgqR?`kjK7%fZAmSP88OGTu0e=Xp)]'.u$O?
n;zzzzzzzzzzzz!!!'(#R_.V(E4ME.krnD6:amQ?"@bmH@^j3Pa@r:Wire?^;7e1~>
]
>>
310.39 555.62 310.39 551.37 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/7 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
254.111 191.101 mo
257.301 191.101 li
257.431 190.521 258.021 190.151 258.601 190.281 cv
259.011 190.371 259.331 190.691 259.431 191.101 cv
262.621 191.101 li
263.201 191.101 263.681 190.631 263.681 190.041 cv
263.681 189.451 263.201 188.981 262.621 188.981 cv
254.111 188.981 li
253.521 188.981 253.051 189.451 253.051 190.041 cv
253.051 190.631 253.521 191.101 254.111 191.101 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
259.731 205.391 mo
259.731 204.641 259.121 204.031 258.361 204.031 cv
257.611 204.031 257.001 204.641 257.001 205.391 cv
257.001 206.151 257.611 206.761 258.361 206.761 cv
259.121 206.761 259.731 206.151 259.731 205.391 cv
cp
level3{
gsave
[1.9313 0 0 -1.9313 258.361 205.391 ]ct
<<
/PatternType 2
/Shading
/2 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1.9313 0 0 -1.9313 258.361 205.391 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/2 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
263.681 197.131 mo
253.051 197.131 li
253.051 194.769 li
263.681 194.769 li
263.681 197.131 li
level3{
gsave
clp
[44.82 0 0 -44.82 251.281 184.131 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[44.82 0 0 -44.82 251.281 184.131 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
253.051 197.131 mo
263.681 197.131 li
263.681 194.769 li
253.051 194.769 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
253.971 196.161 mo
262.761 196.161 li
262.871 196.161 262.971 196.061 262.971 195.951 cv
262.971 195.831 262.871 195.731 262.761 195.731 cv
253.971 195.731 li
253.851 195.731 253.761 195.831 253.761 195.951 cv
253.761 196.061 253.851 196.161 253.971 196.161 cv
cp
level3{
gsave
[1 0 0 -1 -52.0294 742.471 ]ct
<<
/PatternType 2
/Shading
/8 
<<
/ShadingType 2 
/ColorSpace /1 /CSA get_res
/Coords [310.39 547.16 310.39 546.31 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~8NA^0:-:Q;;*R/C<'ieL=@GOV>Y%9`?;!cg@STMqAPc)$BN.b-CfaO8E*H<BFBquKG@4VTH=L7]I:cmf
JSJ]qKPb?%LN$u.Mf`e9Nd#FBP'_6MQ%*uXR"BVaS;)ImT8A.$U5Xd/VN?W>WKW8JXHnnWY*kCbYa^gl
ZCR7![%Nd.[\K<<\YYlI\u22T];VG\]rRqi^9"1t^os_-_Qg.:_mHOG`O;sTa1/EbaLSZnah,!%bItE2
c+gi?cGI5Ld)<\YdDj%fd`97leB,_$f$)73g!@mBgX4?Nh9s]Xi76Agj4N"uk1\S+khY+7leg[CmGR$K
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~mGR$Kleg[CkhY+7k1\S+j4N"ui76Agh9s]XgX4?Ng!@mBf$)73eB,_$d`97ldDj%fd)<\YcGI5Lc+gi?
bItE2ah,!%aLSZna1/Eb`O;sT_mHOG_Qg.:^os_-^9"1t]rRqi];VG\\u22T\YYlI[\K<<[%Nd.ZCR7!
Ya^glY*kCbXHnnWWKW8JVN?W>U5Xd/T8A.$S;)ImR"BVaQ%*uXP'_6MNd#FBMf`e9LN$u.KPb?%JSJ]q
I:cmfH=L7]G@4VTFBquKE*H<BCfaO8BN.b-APc)$@STMq?;!cg>Y%9`=@GOV<'ieL;*R/C:-:Q;8NA^0
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
mGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$KmGR$K
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~8NA^0:-:Q;;*R/C<'ieL=@GOV>Y%9`?;!cg@STMqAPc)$BN.b-CfaO8E*H<BFBquKG@4VTH=L7]I:cmf
JSJ]qKPb?%LN$u.Mf`e9Nd#FBP'_6MQ%*uXR"BVaS;)ImT8A.$U5Xd/VN?W>WKW8JXHnnWY*kCbYa^gl
ZCR7![%Nd.[\K<<\YYlI\u22T];VG\]rRqi^9"1t^os_-_Qg.:_mHOG`O;sTa1/EbaLSZnah,!%bItE2
c+gi?cGI5Ld)<\YdDj%fd`97leB,_$f$)73g!@mBgX4?Nh9s]Xi76Agj4N"uk1\S+khY+7leg[CmGR$K
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~mGR$Kleg[CkhY+7k1\S+j4N"ui76Agh9s]XgX4?Ng!@mBf$)73eB,_$d`97ldDj%fd)<\YcGI5Lc+gi?
bItE2ah,!%aLSZna1/Eb`O;sT_mHOG_Qg.:^os_-^9"1t]rRqi];VG\\u22T\YYlI[\K<<[%Nd.ZCR7!
Ya^glY*kCbXHnnWWKW8JVN?W>U5Xd/T8A.$S;)ImR"BVaQ%*uXP'_6MNd#FBMf`e9LN$u.KPb?%JSJ]q
I:cmfH=L7]G@4VTFBquKE*H<BCfaO8BN.b-APc)$@STMq?;!cg>Y%9`=@GOV<'ieL;*R/C:-:Q;8NA^0
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.24902 .49412 .5 .50588 .75098 ]
/Encode [1 0 1 0 1 0 1 0 1 0 1 0 ]
>>
>> /Gradient add_res /8 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 -52.0294 742.471 ]ct
/8 {
/1 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~m-Eltj5AbJg"+[$dEp1`bK7iG`P]R.^:h.i\[SrOYcb(-Vk]oUR?j%uN/<7?IsZE_Ec,W(@piSG<`;gg
8kr5`=^5<CASH"$FE`%[JV8i;O->ltSY2aUWiWA-ZF%*O]">Yi^r"".a2lBGc-F\`daZn%gYUoMk3;7!
m-O*'k2bLXgY(3.da?Fec-+5Ma2Ps5^qRLo]",;WZEUL5Wi)VbSXGe-O,JgIJUVohFE)/3AR]"O=]J<o
8k`&[<a&d:@qKInEclVRItEB2N0'6hR@U"GVlHi$Yd1XF\[oDd^;.V'`Q-'AbK\>ZdF-Oqg"Y?@j6#Rk
~>
<~hr!8Df[\EtccjMO`l,a/]t:hb[^<<CXK/:tV5'`US!fV-Oc>6RK7J>pF`MA8BOkOX>Zk'):JFGO6pX!u
3BTMm77^'H;,gY%?!q/TC2Is4G^P$oLPh(RPa@f-StVpUVl?`!YHkOD\@K5b^r"%0a3)ZQdF6\!gYLcE
hr!>IgXt*+dEg([a2Z'7^qI@j\@/cMYH=k)Vkp/^Ssu.7P`^r_LP(,)G][qBC1h$a?!CE1;,0bT77'4$
3BKDj6q9jD:Jt1q>[CiLBPVL+Fa8@bK85>DOd)3#S"?=KV5L8mXKSn9[^`l[]t_G&`lH3FcdC1kf\50=
~>
<~io/bKf[\BqbfRlB_S<ap\@/cMYH=k)VPKrZSt)47PECocMM?b5H['XPDJNos@UEAC<`Dpk91_T@5s@@j
2`a&c6:FC:9i+bg=Bf*?A7oXoE-->OItNK5NK93cQC487TVA6[WN3/*ZF%'M]"Pnr`5g$FcdLCtgu%,N
io8tTgtC9,ccsVQ`59=']"#2UZEUI3WMcPdTUq[AQBRGlNJ`ICIsZE^E,B?&A78eK=B/9r9hIoE69dRn
2`Wr`5t"16928>`<`r[7@V'4gDK0cCH[g[&MN*[ZPEqW,StMgRVQ$VuYHkOD\@T>f_SaC8bg4\ef\>9A
~>
<~bK7`>^:CVSWhc2PP`CNMH?3n5>uj`l69I+[.jcDY(D@;e#R(80zzzzzzzzzzzz!!3<0$P*me)^-OZ0fD
-]8PiJpAo;a=K8G\TR@pFYZ*q9Z_T'aAbKJ&J_S<^kZ)jgqR?`kjK7%fZAmSP88OGTu0e=Xp)]'.u$O?
n;zzzzzzzzzzzz!!!'(#R_.V(E4ME.krnD6:amQ?"@bmH@^j3Pa@r:Wire?^;7e1~>
]
>>
310.39 547.16 310.39 546.31 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/8 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
253.971 196.161 mo
262.761 196.161 li
262.871 196.161 262.971 196.061 262.971 195.951 cv
262.971 195.831 262.871 195.731 262.761 195.731 cv
253.971 195.731 li
253.851 195.731 253.761 195.831 253.761 195.951 cv
253.761 196.061 253.851 196.161 253.971 196.161 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
217.261 98.8411 mo
217.261 93.2911 201.401 88.7911 181.831 88.7911 cv
162.261 88.7911 146.401 93.2911 146.401 98.8411 cv
146.401 104.391 162.261 108.891 181.831 108.891 cv
201.401 108.891 217.261 104.391 217.261 98.8411 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.75 lw
217.261 98.8411 mo
217.261 93.2911 201.401 88.7911 181.831 88.7911 cv
162.261 88.7911 146.401 93.2911 146.401 98.8411 cv
146.401 104.391 162.261 108.891 181.831 108.891 cv
201.401 108.891 217.261 104.391 217.261 98.8411 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
190.391 74.8811 mo
172.851 74.8811 li
172.851 102.361 li
190.391 102.361 li
190.391 74.8811 li
cp
170.181 74.8811 mo
152.641 74.8811 li
152.641 102.361 li
170.181 102.361 li
170.181 74.8811 li
cp
193.121 74.8811 mo
193.121 102.361 li
210.661 102.361 li
210.661 74.8811 li
193.121 74.8811 li
cp
183.281 65.8611 mo
183.281 74.8811 li
190.391 74.8811 li
190.391 93.3311 li
193.121 93.3311 li
193.121 74.8811 li
200.821 74.8811 li
200.821 65.8611 li
183.281 65.8611 li
cp
183.281 65.8611 mo
190.421 65.8611 li
190.421 58.1212 li
172.881 58.1212 li
172.881 65.8611 li
180.021 65.8611 li
180.021 74.8811 li
183.281 74.8811 li
183.281 65.8611 li
cp
180.021 65.8611 mo
162.481 65.8611 li
162.481 74.8811 li
170.181 74.8811 li
170.181 93.3311 li
172.851 93.3311 li
172.851 74.8811 li
180.021 74.8811 li
180.021 65.8611 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
190.391 74.8811 mo
172.851 74.8811 li
172.851 102.361 li
190.391 102.361 li
190.391 74.8811 li
cp
170.181 74.8811 mo
152.641 74.8811 li
152.641 102.361 li
170.181 102.361 li
170.181 74.8811 li
cp
193.121 74.8811 mo
193.121 102.361 li
210.661 102.361 li
210.661 74.8811 li
193.121 74.8811 li
cp
183.281 65.8611 mo
183.281 74.8811 li
190.391 74.8811 li
190.391 93.3311 li
193.121 93.3311 li
193.121 74.8811 li
200.821 74.8811 li
200.821 65.8611 li
183.281 65.8611 li
cp
183.281 65.8611 mo
190.421 65.8611 li
190.421 58.1212 li
172.881 58.1212 li
172.881 65.8611 li
180.021 65.8611 li
180.021 74.8811 li
183.281 74.8811 li
183.281 65.8611 li
cp
180.021 65.8611 mo
162.481 65.8611 li
162.481 74.8811 li
170.181 74.8811 li
170.181 93.3311 li
172.851 93.3311 li
172.851 74.8811 li
180.021 74.8811 li
180.021 65.8611 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
207.441 89.5012 mo
207.441 88.9111 206.961 88.4411 206.381 88.4411 cv
205.791 88.4411 205.321 88.9111 205.321 89.5012 cv
205.321 90.0811 205.791 90.5612 206.381 90.5612 cv
206.961 90.5612 207.441 90.0811 207.441 89.5012 cv
cp
199.881 93.3712 mo
207.441 93.3712 li
207.441 92.6611 li
199.881 92.6611 li
199.881 93.3712 li
cp
199.881 95.5411 mo
207.441 95.5411 li
207.441 94.8311 li
199.881 94.8311 li
199.881 95.5411 li
cp
199.881 97.7111 mo
207.441 97.7111 li
207.441 96.9911 li
199.881 96.9911 li
199.881 97.7111 li
cp
186.951 89.5012 mo
186.951 88.9111 186.481 88.4411 185.891 88.4411 cv
185.311 88.4411 184.831 88.9111 184.831 89.5012 cv
184.831 90.0811 185.311 90.5612 185.891 90.5612 cv
186.481 90.5612 186.951 90.0811 186.951 89.5012 cv
cp
179.401 93.3712 mo
186.951 93.3712 li
186.951 92.6611 li
179.401 92.6611 li
179.401 93.3712 li
cp
179.401 95.5411 mo
186.951 95.5411 li
186.951 94.8311 li
179.401 94.8311 li
179.401 95.5411 li
cp
179.401 97.7111 mo
186.951 97.7111 li
186.951 96.9911 li
179.401 96.9911 li
179.401 97.7111 li
cp
167.131 89.5012 mo
167.131 88.9111 166.651 88.4411 166.071 88.4411 cv
165.481 88.4411 165.011 88.9111 165.011 89.5012 cv
165.011 90.0811 165.481 90.5612 166.071 90.5612 cv
166.651 90.5612 167.131 90.0811 167.131 89.5012 cv
cp
159.571 93.3712 mo
167.131 93.3712 li
167.131 92.6611 li
159.571 92.6611 li
159.571 93.3712 li
cp
159.571 95.5411 mo
167.131 95.5411 li
167.131 94.8311 li
159.571 94.8311 li
159.571 95.5411 li
cp
159.571 97.7111 mo
167.131 97.7111 li
167.131 96.9911 li
159.571 96.9911 li
159.571 97.7111 li
cp
ef
106.711 177.051 mo
111.031 165.981 li
112.411 167.091 li
149.271 121.021 li
147.891 119.911 li
157.731 113.271 li
153.421 124.331 li
152.031 123.231 li
115.181 169.301 li
116.561 170.411 li
106.711 177.051 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.24 lw
106.711 177.051 mo
111.031 165.981 li
112.411 167.091 li
149.271 121.021 li
147.891 119.911 li
157.731 113.271 li
153.421 124.331 li
152.031 123.231 li
115.181 169.301 li
116.561 170.411 li
106.711 177.051 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
256.951 177.051 mo
252.631 165.981 li
251.251 167.091 li
214.391 121.021 li
215.771 119.911 li
205.921 113.271 li
210.241 124.331 li
211.621 123.231 li
248.481 169.301 li
247.101 170.411 li
256.951 177.051 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
256.951 177.051 mo
252.631 165.981 li
251.251 167.091 li
214.391 121.021 li
215.771 119.911 li
205.921 113.271 li
210.241 124.331 li
211.621 123.231 li
248.481 169.301 li
247.101 170.411 li
256.951 177.051 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
181.831 174.211 mo
178.991 162.871 li
180.411 162.871 li
180.411 127.441 li
178.991 127.441 li
181.831 116.101 li
184.661 127.441 li
183.251 127.441 li
183.251 162.871 li
184.661 162.871 li
181.831 174.211 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
181.831 174.211 mo
178.991 162.871 li
180.411 162.871 li
180.411 127.441 li
178.991 127.441 li
181.831 116.101 li
184.661 127.441 li
183.251 127.441 li
183.251 162.871 li
184.661 162.871 li
181.831 174.211 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: CDIBHN+SimSun-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (CDIBHN+SimSun-GBK-EUC-H)
%%Title: (CDIBHN+SimSun-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /CDIBHN+SimSun-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-8.00001 -141 1000 859} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 28793 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 7 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
11521 <001C60D8A8C9B5EE3103810B1C4CBC1C33C866CA07582FD7F641E2C82
96B29639CB974BB0E16C954DA047900B167284552B2C79DC0CFA552023C7ACAE
413C356866A4E670C43D9690CE3B462A7B40E23332D63AC396806A16B38827E9
CE3955976E27D5AE0E15A454AE829B8393BEB13EC2552AA0FCE4A76562AC8903
9BDA20AE7F97B5CCD5BFC4EE31C5BD4CF9F60C77782E9C33C2E613AC724F5080
E4560F0FC973B5931A193D75851C39054B77870F4D5D1C3380F65F89E213F17F
583F977AEDE502ACA45AE76C50858F408FF5AF8C6ADE81A14DC0CA71EB5822C2
CE3186FF40E3A1A6CF63FD226C50304E2E8B59291B18620BC1A914D6029C7936
EF206FE224F522780ACB12E10BD825AB560F325E2BF588256B3946D> |
6615 <001C60D8A8C9B5EE31027CAD67CEC802B12240EA84FE047966011276DD
CECE77ED752D5708548F686280DED73ED022750643227BDEBDA9426C2D198CC3
3FEFD0DEC907091A3CA592C8744EC95318F95183A052EABAB14793C64614301F
7A302A2F81C050DF6D8C54C12A3D56302FD2BA6953AA4A3077100BEB52E18E39
028946FBA34F9DA73F8827BAD57EA7727F3DF87F63A659504300750F3A1E6797
D9025DA8DBAFDB79EADD94031802EB1C1CDEBBA0B5754116FDD2AC18DF1D3EA9
678EC8F16C527C436626C2F4B323C7957256B3C39579BF9EB39B81EE9B55E371
57C4E2EA452E615E4A9D65165D7D805D2704F0646CB9135EFBF13F19B377C522
0B9BFB7E272A616F8493EBC11D951741DE6142F3970667CE83DF592FC43AFF0A
77E87C647AFDACBE1926D4C00419DA926DEB8F775E1FC59BE0E64C3EC2176435
937C4E577E4EFCA23A2C429D7C25D48ADBBD3E8FB4727B20D6F1E2EF4DFEE9AB
777D27FFEFABCDCC3BA903974ABE25C4AC69B2834129DBEA80ECFA4C83BC7BE7
F53C9A> |
13099 <001C60D8A8C9B5EE3103318D4E0E07772F888858E2D9450925ABAB7FD
78D1B5E22A9DE3F244AFC6DB55BF1EB1A3734A506A3B27C527D71EC7CD3B2A1D
A0A087BB6FEC1F3739490A05031E54356790CF3F85183928E0A642F971E12BF4
06B5D9FE7A1365212D276250258492465470F2DACF968FBF093EDD969A2B64D6
DE5CC7E67258DBA66243B3195A1060D0BFF6BE95FA16784A7C8B2973C5562A15
2C3F24A608CBCC381BAFB99D96AD8A784D591F962A63CCC1523FBBA0BF4BB735
F69AECE4E0BA3696E5DFA880B763E7E527171F05D10FEAA055C49D1B1441CD16
2C3550126CA37DC72CE26474C632F03934318769D40F7D23C4DC2A6A0F41AF7D
D9542F4BF2B0B5DC5395E3D229A568C1133F90951A8A91096B70AB55B5C8EA02
DEE632A59F48085134D717122097C61908D4064167862E34F9B2270F60A22FF2
98D50824C34404B71CB7A6DDA9F56422DD2995F6BB9E2175710FEECF73CC8174
2535607> |
13583 <001C60D8A8C9B5EE3103EE1893EBE3A1CF46FEE4E36245125685CD2AD
BD4AA74EC17A0BE8275E40CE3830DC4E5C42B65A3791506BCD555048AC0FAF1A
2A4F6C9277E0F2E01E7358CBA2A493C845614B4F3B4C74E41E2957F0C7FE3996
A97C89ECA90F6CDFC20E13FB7A9986E905800034716852930B222044C644E4D9
4972DCA5DB88EC58714FF72D23B3EA7C4F9ACA39846B7A58405CFB350D40BBDE
7E3752A643FEC7AB2E1EF777F140EF4198246EF02DC72E09A33075D9A82A2CB1
535191508FC5D976D561B893EAB027A08D17F4CD74CB52BA716ACEC771631ADC
72C9F2863A8A4315448A830A9AFFEA3383ED764229A4EA353D0BBC8B81D98F66
F3260F92A39AE5BE1D8D1531F53E21281171A9569575C9D4D493A4AE3D968C93
C421C1DA8A1FD6923951F717F24E35F69454DA3354FAE76F1E3C34942D525124
B4ADF5522D7D563B6B167E346BA535C55EB45330190E990D02656300C3379E08
2E7E65CB71B5B11BAE954A0F7C64EF93D4174EF9913FB9DD658290A6AE7A9318
FEC13CDCD449747FC221DC9923ACD8D2480F1886EFCFD63FC6CE8800ECCE20B5
A35A61B2F587134D6C3797274C14365AF41B4886C2A7246B433E6117AABBED45
A8D576012CB8CE07C378DE12EC2> |
2622 <001C60D8A8C9B5EE313CDCAAEAF760DC59F6E685310735A815A05A7651
F6A8D454DD639521EE8082454F1C047A49E3C3421E430A3B4076A63C4121D7DA
A92742366A55887E4E6495B12C92486ECF7DE36994D854E0231B3C38090B91F6
A6DB49A2EB97AF0BC4B5D080743AF7E6EA665C6172A71B9A4C108E3D647DDE63
CC1321650AD596B96086FB44C340E7CE09A6A77283A09F8C79357B0E94AFA046
4463CAEB6CF5519D2675F5984C8C47897D6C> |
12575 <001C60D8A8C9B5EE310217118280789CCBEB2C1EC91E7030B682F2640
6ACFC2B7531E1902F94F049F41B6FE17F2CF769A53A54DDA08837D8651FB8220
C11327B01545EC8D8FCFB25F5D4F628B79BD3941DF311F470D86CF7169ADD302
8E4A033D39C0F3D5CD1F8FB6A76A131188B3F7CB9C17F6F76B8E9EAAE8BDAE6C
6F65282C1E4DD23F0D357E1E02F1C70D905720CA6564835BA624F40DF5C2BA35
72D313408459A79B4AD0121690830C28E015B94A1BA0E0C3F8B0FDA6FFF77B27
E3137891E2607CBA697E21E84F70F8590050D465A7D5AA5FD2EC44592E953AB0
77C64960DD515F868FEF3C830CC15ECF289DB69024CCB4F9356E0FD5581125BD
3D05A80F4188E29970848F247591AD9F93855265CD2A1F9A19E2A7B1D57E874C
6A6AACC20AFF47B8A815C2B1E858E9E1AB42207411C76A8D46030BD60282B702
187E3614061EDB1DA1684297987DC51C7200AE4FCF925C962D2A4E68C7CC42E3
F91C2E39E72DF5B0DD3FD6002789EE4CFF75B21EC4C2CCC1553A5F1EA5E06C62
48BA62808ECF961DE991B35> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /CDIBHN+SimSun-GBK-EUC-H-Identity-H /Identity-H 0 [/CDIBHN+SimSun-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/CDIBHN+SimSun-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
146.741 50.1911 mo
(-\001\031\3273+5\017\012>1\037)sh
%ADOBeginSubsetFont: CDIBHN+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/CDIBHN+SimSun-GBK-EUC-H 4 GetGlyphDirectory
3061 <001C60D8A8C9B5EE31023AD540F76AEFBF7810F9DFC86D7BCB7CCD4FF4
B0DF62D636CEBCA5ECAC30E2FA21CF6A5D68C064415EFE57286BC35692B6DE43
1AC22113A44C3CB8D2D458E2CF105391BC9D655AF1938DDBCB866A910DD6BB71
DC2D43861AE4CAC0DBDF3A0620D85A391EB17C11A5FE28D5C4B0D5F4FC0AD8C9
B8E421BA5A80B71C274B76D3068F8DEACA0C52E1A67740B3AD4001FD930FC0C7
138895168EA16648ECFA7840108C622808B63262CF2ABADECBC9EA918D29E3E4
34FCC8D50F7ABB7DAA82E74464B51BEBF178C9513B0BACE54C42387F67FDB327
7F8AB68FD04778C808258AA3D856A011420480AB4974FECAE9DA65ABEC76ECE6
CC6D27C751C98C0632B4059C566A19B3021F9AE6555976323A1604DD5AB30559
B6A8CA2970A36C07C12644CD496E54E8F3D74227FEFBA72B04C34689F5895A7F
05E3B9FF3A97D16A5A0D984E0FD429A3DA0979D4E26858CE1D3A9F0BE19B8E19
B06DD8> |
6610 <001C60D8A8C9B5EE310337A99AA654A498206B49DE9F544F2B20E177D6
C9B3449F30E43C077BC4F81F3D0CF3F8511744840EBE5E9FE4DE31C6EC115E0F
CDDA68448EC7A58962479E3B05819199F472F319983CF1ACCFE0C900C7AD507C
48A280D58EBF5D15CC2BC5A2018BD01E7E20A32EFAC644948C7E532687319823
B92A1AA122B54EC8174877237F061DA725958F1B109D2CD5535B64E0529707FD
5C34C7E369AD4033FCDFDBC7A4243E4D9BD0F882C730B5A31ABF01D7394CC618
CB4B4D7ADDBCEAC0318A2D006BFEEA735C10AD95E49BC2F6505576630ECB140A
972EF865C3C436425007A0C913430B417C82A27C6736BEA97C118DD39E594DC0
3F55F7690227C1715F95F73C505CD06E5292FC756DF9D0662F6BEC61EA565191
9F4750732D362E4BC2FA59B3345146609609EC4ABC2F25D107A492A6954D5222
F70ACD37474BD5F73CF57DFC75CEE7CD143F879ABA08BB8CEAA3499FBD83C1B3
C69C5ACB18D2245B11400C1F09F84C021D33CA9A78525AE9FDD1D6D647445D99
9D58D21F30EB1C017B44AA51C181447B30055A64AD024781E58E76> |
14514 <001C60D8A8C9B5EE3102E39FC5B7AC7A841112DE2AF987764C538E48B
BC1FCF1B6C2639F32AB531545F1780D38C932ADA6AC8EA89E20DF0FD3ABEE375
2465D4FF6A17E7937F7B2F190C2D330E272A3BC50F8FD8D67CDDDB3D6F4AD8D3
1BBC2A273CA2453FBEFE86B2743C7269955755C8E61C4367E69713F32CEE580D
63C468536D4C575759715334F3CC44AC9C09E64B19E9D55B7845A15D97BEA21C
37577616FCE3DFE29C9C3758E25CB4E44B568BBBCD73ED635A8EBE08CD4E5036
7EA76646DB2074730D4> |
9961 <001C60D8A8C9B5EE31039870B7A02538711CB3206578209DD97BEBE624
9DB648C8B25BA8873270831CC3BABF3A0CE9F45E42B4CAF400094911820FC7AA
1A00FC994193A744CCF2BC5796D2B5D0856D6A8C690599524C6E25F2E2E64250
8A5400CE583579DD721591F371122F4DDE0CB2BEADFEE1C65F7052046B3E0A2F
12323BFA05AC48E4720491702DDDF9892AE3B6518B9B33EEF3B2E374D4ADE206
37ADAE1551CFC590025CF1F1A8C8CCB25E13349F58E11399EB076743EA22B7DB
E4D9633AE392EC1D3E798C437A9B70E9278000B76CF57A0D321410CD67280171
CC4E622D14CF125E32760B679C35AB23D0E6A3EF848585A52E508AA040EEC06D
D7BB0C6BE3EA232F64C2B1DA76E467B3511891E8BC02613E9393D04767A94B13
EB8BE0B7D51FF0C3A0573616293DEE6AC7D3F458BC5CDFF8B34CF52CC3089D7E> |
!
end
end end
%ADOEndSubsetFont
/CDIBHN+SimSun-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
124.831 209.051 mo
(\013\365\031\3228\262&\351)sh
/CDIBHN+SimSun-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
37.8026 209.051 mo
(\013\365\031\3228\262&\351)
[12.024 12.024 12.024 0 ]xsh
/CDIBHN+SimSun-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
275.981 209.051 mo
(\013\365\031\3228\262&\351)sh
%ADOBeginSubsetFont: CDIBHO+SimSun-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (CDIBHO+SimSun-GBK-EUC-H)
%%Title: (CDIBHO+SimSun-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /CDIBHO+SimSun-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-8.00001 -141 1000 859} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 28793 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 4 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
53 <001C60D8A8C9B7A73DB6A60C55392047798BE3CC3FA64EEF810415694F99
06E515A311F816BEF6973F5016C62AEDEEC5718E9D73B956B99BE2FA5D6A8D34
3DB06F0FADDC518E52DB873DFCDDF12CBE1F8D7472DDD46734C72252EB4ABA27
7540D325C24771AA6820795D96D42CFA07C654D178447A4CA31B9699CEA601FB
AF5E0B8F16878E3FD84F1E9D41CE49B6B5EDA7C21106CFEC2AB1F8798DEC660A
9311BD9D6E28C3ED7676336A299C0307CB51299015C21BBBB51CF2CC17C04435
0B7CE042> |
51 <001C60D8A8C9B7A73DB987322EDD44B1DF5405863ACED3B083D42BDC3CA1
425C498E01AE29E2F8D6006DEBE28C3E3167B8B0B15C9979E8BC6F967EAE4108
594879B55E7B2B0C1613F0727FC5D41CF3A18A5C9AF47127977CC09BADEA25A0
5207E3A29DB2A627E71F0DE62BA33B64393D52499CD3D050DB6353DA7F8BAAC4
50A2F546392BEFE2730B572B57EA1E5C6F260C4358B586673BB20F89AC3C5FB2
7145> |
38 <001C60D8A8C9B7A73DB6A70B0D1171EB2B05716A57A36051BCA4F091B1BF
0612F84D61B7DDA7F028930F1B6F2F65D4AF025FB356DB3FD0FC479702D6A6CF
2BC6311F323FDF5960098F810067E24461B5E628FAC38FC6B3F649788906E6CF
CA2B4C8EFA16DAEBEEF141C78F612FBA19BF360D1C1F97D12E3FA36ABF6ED73D
718360F1D64BA33C9F6A6A1DD16EF3EF2010718698CC942A333C> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /CDIBHO+SimSun-GBK-EUC-H-Identity-H /Identity-H 0 [/CDIBHO+SimSun-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/CDIBHO+SimSun-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
109.511 146.501 mo
(\0005\0003\000&)sh
/CDIBHO+SimSun-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
239.071 146.501 mo
(\0005\0003\000&)sh
1 /0 /CSD get_res sepcs
1 sep
/CDIBHO+SimSun-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
188.021 146.501 mo
(\0005\0003\000&)sh
13.7916 68.7311 mo
13.7906 98.3511 li
13.7906 101.891 22.3956 104.761 33.0096 104.761 cv
43.6246 104.761 52.2306 101.891 52.2306 98.3511 cv
52.2306 68.6611 li
52.2306 72.2011 43.6246 75.0711 33.0096 75.0711 cv
22.4766 75.0711 13.9056 72.2411 13.7916 68.7311 cv
cp
52.2306 68.6611 mo
52.2306 65.1212 43.6246 62.2411 33.0096 62.2411 cv
22.3956 62.2411 13.7906 65.1212 13.7906 68.6611 cv
13.7906 72.2011 22.3956 75.0711 33.0096 75.0711 cv
43.6246 75.0711 52.2306 72.2011 52.2306 68.6611 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.75 lw
13.7916 68.7311 mo
13.7906 98.3511 li
13.7906 101.891 22.3956 104.761 33.0096 104.761 cv
43.6246 104.761 52.2306 101.891 52.2306 98.3511 cv
52.2306 68.6611 li
52.2306 72.2011 43.6246 75.0711 33.0096 75.0711 cv
22.4766 75.0711 13.9056 72.2411 13.7916 68.7311 cv
cp
52.2306 68.6611 mo
52.2306 65.1212 43.6246 62.2411 33.0096 62.2411 cv
22.3956 62.2411 13.7906 65.1212 13.7906 68.6611 cv
13.7906 72.2011 22.3956 75.0711 33.0096 75.0711 cv
43.6246 75.0711 52.2306 72.2011 52.2306 68.6611 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: CDIBHN+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/CDIBHN+SimSun-GBK-EUC-H 3 GetGlyphDirectory
7072 <001C60D8A8C9B5EE31020F8211AF203B409BE69AC0B68B446FD4EE9ED1
4721CF2A9A21B88FDA7D8E37AAC73F35FE4084653B0B95E319EB8703812C2A0C
108D9092AFC18B1940DD2ED6AF36C6F1B98EEE247BC4A963065CFE72FB103B46
B523DBD7E07735C163D7413F2644CC28C6F92F85D0B39EA0D65AF3B4E4B78F55
D6FC49CE4D92F27CEEAC3024668CF3462A4AA4E8573702C758E552BCBE8F0414
EB253C2B7733024541CAE5388922865026D9C7E8A9ACD0C992348DD3F8D4CBC6
0622E7F2161951BFF34079ED8A8E67A25A5F1E11988BE535306FD2CA77DD87D4
D01BE4CA3ECDB0FCD161FE2ECFD9293096DBD24EE4C0F004279A015A08EF5EA4
45F0121066CDD05C304BDE9236870555C977C75D4739DBB42868E680B64AA37B
AE2401958310E87EA4454855BF081799704840DF55FF247D5DC9A48274AB8C60
835B6E7E86EDB425F69F049E974A425D9839A7D556A7244FCF74B36520B3DEC0
C69225DD2EDA65064DE6D781BE0E52E6019E6CD07C93F97A3C40589A375F23EF
61599F097FDD1C00369B8831B391879B210A664175977AE6DF10243B958940CA
DC480B0DCF74760E5300BFB15AA118D97F29E6AFBA54EF39A4F382CE16DE5FC0
7DBA65943CF9E0383993316CFAEC6C9728F1341EE3C4CA8305EF8D7085C3EF7B
9983E5692DB195A932D80484D2890D19> |
6558 <001C60D8A8C9B5EE3102820CDF2059AE7E38A7DD18C49A35420DB1B091
122739BEE0A32333A53DA02BFB714548CF1E0E1DF60B241A30D0E145F324C703
AE6BA40AE7367E8F21EA0F895A1A694E0B1E2B95885487CB92CFDEC1E2ED11BD
F2A7DBB72F5444265C5E8CDEA08DFED3052C81B6BBB72AF4591784C70BE7200D
1AB7ED97BE9C64CF192F912D7354C4FC588801B4F164B79208B016F221435034
0368B5CEF714699166C38AC42E0CCA0FA1C090F3438CA38CFF62B62408B0FC66
1CED7047AA4C28E7CE51EF328B4A242D039B9E86CFF81B0EDB18BD659F822BAB
9AB06551093EE0FE1EFA44BE7E8A9488CA8FC87D41DC769F16898A16C300C034
E8999E3F32045143E4882EF8548B1BC02A3DF2D6FD591734B19E9905316166B0
88D1AE54C0DEDAFC3AE73A2E8B291D796FF1536C4768D97BC0D916F0190CF71C
0C> |
5315 <001C60D8A8C9B5EE3100AE813BA6B9A6B5D511777002DFE643C9E10ACF
97412E6CD010A4F99EB7F16F660C48A4B47D5F5EF7BA4CCFD1BC672B4CD94F02
895B8DE06E4B185E38E5029F7574AC905DC81E55F5AA49B4877D628DDC48F302
30FB1FC5D358635DAA7EA95481F8FDFB80F8F0C2715CE7A65AFE5AB140CF5245
5221EED1CC9ED94D66196F831B55E8DA0D9DBB2D6A02A2FA020C22A414E1E46B
1CAAE212123C4A261B30C29E7E6089D8902126C38A4E64D3DA43342473C47715
28D8F72BF1650E6331258ED1FDE1171322EC5859F16F845E7FF8782539D6435B
9DCE584BBD7084B379F9790E67EE60EACE7138B6A1F843D5D79B1CFFC0608EFE
CB9E60C90ED320A3D2A22D72B8EE200C0EAB> |
!
end
end end
%ADOEndSubsetFont
/CDIBHN+SimSun-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
15.0266 51.7711 mo
(\033\240\031\236\024\303)sh
62.1806 83.5012 mo
73.5206 77.8411 li
73.5206 80.6711 li
124.541 80.6711 li
124.541 77.8411 li
135.881 83.5012 li
124.541 89.1711 li
124.541 86.3411 li
73.5206 86.3411 li
73.5206 89.1711 li
62.1806 83.5012 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.24 lw
62.1806 83.5012 mo
73.5206 77.8411 li
73.5206 80.6711 li
124.541 80.6711 li
124.541 77.8411 li
135.881 83.5012 li
124.541 89.1711 li
124.541 86.3411 li
73.5206 86.3411 li
73.5206 89.1711 li
62.1806 83.5012 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
59.0606 309.071 mo
37.8686 309.071 li
30.7106 322.981 li
30.7106 343.921 li
66.1406 343.921 li
66.1406 322.981 li
59.0606 309.071 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.75 lw
30.7106 322.981 mo
66.1406 322.981 li
59.0606 309.071 mo
37.8686 309.071 li
30.7106 322.981 li
30.7106 343.921 li
66.1406 343.921 li
66.1406 322.981 li
59.0606 309.071 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
115.751 309.071 mo
94.5606 309.071 li
87.4006 322.981 li
87.4006 343.921 li
122.841 343.921 li
122.841 322.981 li
115.751 309.071 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
87.4006 322.981 mo
122.841 322.981 li
115.751 309.071 mo
94.5606 309.071 li
87.4006 322.981 li
87.4006 343.921 li
122.841 343.921 li
122.841 322.981 li
115.751 309.071 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
172.441 309.071 mo
151.251 309.071 li
144.101 322.981 li
144.101 343.921 li
179.531 343.921 li
179.531 322.981 li
172.441 309.071 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
144.101 322.981 mo
179.531 322.981 li
172.441 309.071 mo
151.251 309.071 li
144.101 322.981 li
144.101 343.921 li
179.531 343.921 li
179.531 322.981 li
172.441 309.071 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: CDIBHN+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/CDIBHN+SimSun-GBK-EUC-H 4 GetGlyphDirectory
2256 <001C60D8A8C9B5EE314491FDC47D27C72D7456A01D84E3679ABA30D968
A29ACD6AAD8E0DF1A0D702FD3D34F0190383490CED320E0ACFD7AB5692148560
341EB700348BCFE41FC02A60AC146DB44FF8C4F3F34E4A90197A59B7D9B050BD
922E160F2C61CF407C76C1F891999E6CC900434628B933B5C1ECD2174F83C34F
4C6E69AB6B8A565BE498B9A13ECA40B2832B1A36E048C3E3BC6D244D533DD7E8
CEF03F3BF0FCA6B6BEC82C305A7A04379D2EA962572544EAD21D9D62E20AE347
38C5D45F24B9E66336916E24C39C3C6113FDAF08D7D5707865EFCE87C9007770
AF5BF8861B> |
4598 <001C60D8A8C9B5EE310D278B80DA186E5C6DB7E15CCFEE5E893896A0FB
0B1F4F9C0CC934E8B8AE7A1E91515F404135A210638D053DF0020805E210712C
9F902EE9FE035591ABDAA036275F387314A939678E594BF5D098391DBA473B57
28D2D8EE9DAA1C63B61AF0C967813967B6B7E5401C17E6738825AD006CFA7D48
93236C0CB56C093DEF76206FFEDE868E547D327468BCE6DD550A128F80BA9575
BBC406906D5B173EC9ED18C7FA8E0A18435D6EE05D98E0A7893D2B3E19031FE2
D63E08A4500F8744E574C6DA5F7E7C0C8718E57D0E6A5F704016478C3E24B7D3
E5F37BF2B0551D161A7C9EA6131FE2E5FD7A69DAC3F53C8F4E93273D0C0DB837
522A4012DE1FB377A9B41522996C2361E437FCE32092E4068A9562484F36DD89
AF9DA1302B2686513018DA76C7DB6260445895BCA2B7739FFD685813B358D78A
AC59E45656DFF76DE39E2E73B62FF6BD96C02BDA828B4721B941BCA58F4AA08E
615310ED333994375D8B5DDEE72522DBA36D8120170E8273D2E3CE40C9C57728
321B03B5305F70D4489A79D13E56E4C497A68235BB561DD23662B2803B76CA3B
AF1100244ADA3E4ED5EF5DE3C4E9F796926B0E1DC4727577D36D7D1B84C4FA28
A28B21BCBB1EBD74390090BA80B4BF90C63EC092246846CD51AAF94CCEF4BCE8
A157844477B41E5792D323D5C5C5> |
17239 <001C60D8A8C9B5EE310DBA1EA5356A7A3030825AFF55D008D29F20CAA
61F0A5824F0F66A7CE92DA8D04263D543CD788064219CB547116D163B08F7B8C
E2124B5DCD693466036CF821FAD9E88821067108395955293991A8CBC8FE43AD
D21EC5AAE53F6BC4EA3475B0B467FD2B65664489666A6047EF663BD66771BD64
C90A555653889E23B398F28AD3DE69DEDA98FD68652188FA48B5F4AEA423C728
C262FBA78C33EFB7A30E86FB723C7989777A9534D2FAC367D6789F1F4024EECD
5613EFDFA66745B68649BB0AA315DBB06C8BFF8A93D4CC0E9F734796F6C630F4
98228A7B010C6601EF1AB069C9B04B330B30BA02581363F9C980D9B3B8C73899
AFEA202BC7E888964DF5F4FD1542EA57BF2E48B92CE90B27F3E117AF104B5300
3385E9F43E414C0C96DBF6F3FDAA227819E4254EA9FCE66C181D6FB1D059A119
280081F55B825DF96F697F91D9941A410DAAE03469AF20DDDB98C560F0BE387D
413E6CBDEF2774E0F8BF6> |
5169 <001C60D8A8C9B5EE3103EE1639224BDE4B4C51CD225ED083F0B67CFDBB
8902CE44660AD673A522142E3571F7C9BEDD236B0BD20818D009CF7EDB674CFF
8AF3D8264261E479A7271EA3991C6CE44F6C6FB8B2A17E1EF8065AD66126AD57
E97DE7572686B2908EEDFBFF290942B471138EF55A6D33856938EF5FC246FAAE
1CD36A4E04B4202FE888ECE8E1E3F29725865720A0FCB5CE21B4F387F27B0501
858E201E5D184EB0> |
!
end
end end
%ADOEndSubsetFont
/CDIBHN+SimSun-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
55.7306 376.301 mo
(\010\320\021\366CW\0241)sh
%ADOBeginSubsetFont: CDIBHO+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/CDIBHO+SimSun-GBK-EUC-H 1 GetGlyphDirectory
36 <001C60D8A8C9B7A73DB9D2D67B1D3A224FA5A13E5765A8D80B57077B7C0D
5EE80C38C0844F83D9CA4CA31034FE59C812CD484095B8A40CCCF60348FE6542
AEECC5DF128F41BF95D8C6533892661C89C22DE13F3D89E1913522615585C3AB
6D875343A34A7AB5ED5C2D9FD86132CBE3128CF0C0176E3F3851618B1DF70F4C
0BB9F3BEFB258F9A88910575AC54> |
!
end
end end
%ADOEndSubsetFont
/CDIBHO+SimSun-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
103.731 376.301 mo
(\000$)sh
%ADOBeginSubsetFont: CDIBHN+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/CDIBHN+SimSun-GBK-EUC-H 2 GetGlyphDirectory
13697 <001C60D8A8C9B5EE31027CA2D4085EAC61ADE8F7BCBC48596F2C46EAF
DC07DEE6C6963FB0446C694D1D38DC89A5C1C5C5D1B9F93AD51761D1161F6537
F9549EEC8C30217F538F607BCE83C4EC2891EBBC280081AE660AEF644168F240
D6D838995E35DFB10F72A7E1B066936C4C4B8F5F27BD3FBD01783EE0FDB9485D
16EA8707DA409FB5924A06218E523F3F7C6CCF356042D1E431A5F7DF81E18FBA
B37E63FD915CA1FF85D00D0B79A961677CD4866C779577584A030E33C3CF42F4
04C0FAAE379158E14A5CA639BB744DED4E8D8EB061B15A6E2D9666AD060A92C8
09CB3EFFA969DE4E6F2D3FD30FCCC67DC0BD9852CFE2616619324D9E92EE22FC
AF664745171AB85B313E2DFB960E2CD57EABC5452E1B5CF5CAA520BE76406781
5A9C5176AB7A2DAFD3BE0A87E9193A5> |
13580 <001C60D8A8C9B5EE3102A9F7DB715D5656D1E3A4CDF72215DCD41377F
5A16CD1E22EE1708B4C6D7AFDCFDD1962F501C1A74ED1869686C07440EE34654
F19470E21E8CBB1D4C12294380ED886BB52070C8AEC1C74818C9330703A690C6
676669FC12BD3E69A1BB1728A6D3FF74B71E0E409FFC54EF64BC5E1A65EDC91C
D11B62A00B8AD3C15DBE085D7DF09547B9869FA431B352602DC0442CEE8A5421
276E2B62360ECF25740D30AEEB3C917EDCD2781840910A8054D5425267B51498
DE31BA4B73871076FA30E108AE452452830AC86D6E8433511315494A808ACDBA
DCFE65F1381C53141CCB07FAF8C2A260F3F4376420F15222C0A9B37E240A71F4
29311530D47B6469406935E773F578EBFA321C308285EA41F73E36AB46424AB5
838968D388615CB9BAA4543BA10471ADC8F3309DDC200B5740E7F8A88C773217
AF32B19D1D786DBBF603F4189EF3C4629896130F3AA9BE33C8B0FC8B101C8CA2
532621B76> |
!
end
end end
%ADOEndSubsetFont
/CDIBHN+SimSun-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
109.731 376.301 mo
(5\2015\0148\262&\351)sh
/CDIBHN+SimSun-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
256.491 372.051 mo
(\010\320\021\366CW\0241)sh
%ADOBeginSubsetFont: CDIBHO+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/CDIBHO+SimSun-GBK-EUC-H 1 GetGlyphDirectory
37 <001C60D8A8C9B7A73DB9BF769AE369657D1B0F7247A75E7E0F995EE1EF75
369258FF953DAE669D70FBC5C1F916F62E5AE51933C872290F79AC44408D238E
612291FF5287058196492FB08F0A72ED903936BAC4FE3F8C27DB7229FFB87373
A794BDCA1B0DED0B99423524E30C2AFF81498E2649EB4D80D6B059BD81D5F3FF
9BE6155E29A6AFD3D199971B07FA3BBE6A543AA6CBEBA95EF9BCAF1EEF286C99
F05EB8EB08DE387756649A60B36FA67E9C666BF8F159A5C00D51A262E23E2F66
29EFFFD582E77B8E9E8BA18C465E70654123A0083C68B1C178E7C07C90> |
!
end
end end
%ADOEndSubsetFont
/CDIBHO+SimSun-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
304.491 372.051 mo
(\000%)sh
/CDIBHN+SimSun-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
310.491 372.051 mo
(5\2015\0148\262&\351)
[12.024 12.024 12.024 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: CDIBHO+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/CDIBHO+SimSun-GBK-EUC-H 1 GetGlyphDirectory
17 <001C60D8A8C9B7A73DB91CE24174F2CF611360AC54B6CDE32A3106439273
5D7CA4A7A886BDB7AF1F2941CD8DBC8BE2C2D14C6C9983983EB9DFB9D2C6495F
FF30BC926D91EE3877> |
!
end
end end
%ADOEndSubsetFont
/CDIBHO+SimSun-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
192.171 327.391 mo
(\000\021\000\021\000\021)sh
106.711 296.101 mo
103.881 284.761 li
105.291 284.761 li
105.291 249.331 li
103.881 249.331 li
106.711 237.991 li
109.541 249.331 li
108.131 249.331 li
108.131 284.761 li
109.541 284.761 li
106.711 296.101 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.24 lw
106.711 296.101 mo
103.881 284.761 li
105.291 284.761 li
105.291 249.331 li
103.881 249.331 li
106.711 237.991 li
109.541 249.331 li
108.131 249.331 li
108.131 284.761 li
109.541 284.761 li
106.711 296.101 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
293.801 300.361 mo
291.891 288.631 li
290.311 289.421 li
272.101 253.011 li
273.691 252.221 li
265.451 243.661 li
267.351 255.391 li
268.941 254.601 li
287.141 291.011 li
285.561 291.801 li
293.801 300.361 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
293.801 300.361 mo
291.891 288.631 li
290.311 289.421 li
272.101 253.011 li
273.691 252.221 li
265.451 243.661 li
267.351 255.391 li
268.941 254.601 li
287.141 291.011 li
285.561 291.801 li
293.801 300.361 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: CDIBHN+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/CDIBHN+SimSun-GBK-EUC-H 2 GetGlyphDirectory
2431 <001C60D8A8C9B5EE310226F95185CA5EB457DCE66611B59813142C7922
6D44F1B012CDFE00FF5A181175713B3E0616EC88237F6FF3D9222D35BB7E0C9F
31F9AA44B419F5180251CB8CE00D558CBA94E8CE8ED556D25B150C6899B31043
E60852B6C468EE0C47959902378C4607651A272A1E6E1513DE5877909F47F204
5FF2A32485DCC2F911F1ED498B08809A2D95FB964BF143737722FA6D3A7A2218
5E91933F31A6F53CAEAFFA6F5DD989AAF63DB511B272EE2FA7E1061FB20CE1F1
B39A66F3C27D145044C56A9532C431FEB1BC6AE3822572303C0F6B9CBF440CC3
226D452D4CE1C0B8E0AA48C7935F41A2849120C1BFA7FCDA2A8D0C0E0B36FE61
A687ECD7BEEF420BE4E28E2D10106EEFFBD5F61540BEF48669BA0C70B485F64A
E866B9DDB8632838AFDB0A16B850C02CBCC6CDAC50D89ABAA294BFE55BBF573D
0DF1> |
16862 <001C60D8A8C9B5EE3102AD24B9E3148F902C7E7B2A149CE781676F82C
273E2B11E10DF12B204C76863C94116633AAC62919EE46FA0114D78A14962868
861651BAC5141A90C741CD14F3E8F6D3959968C927319601647F8415C6FC30BB
0A8ED5AC0940558FBAFA8DDF8C85ACE7EDCE3585092C3F757D8D1A6117740CC0
20A6E22116F5F18381A0B076D7D78C4BB569C714D17F5AF731AB9B86B4F4588D
11E6D59A9901024449DABC4894CF402D84F8AAA37971C550D11FABCE31218A04
E2B05CC5229512769E675444985BA7F6C3BF72E2CD05BEE5E4D1F20D24C8B827
763992DE1220DC7F46557885006BCE30CCB4C4E73E961109A588CA7D5D136A6E
FC1BF39EE20F7399E696B37FB4709010F2EF58494FEC215> |
!
end
end end
%ADOEndSubsetFont
/CDIBHN+SimSun-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
56.4006 271.571 mo
(\011\177A\336)
[12 0 ]xsh
/CDIBHO+SimSun-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
80.4006 271.571 mo
(\000$)sh
/CDIBHN+SimSun-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
290.641 267.011 mo
(\011\177A\336)
[12 0 ]xsh
/CDIBHO+SimSun-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
314.641 267.011 mo
(\000%)sh
.75 lw
71.2106 326.501 mo
82.3306 326.501 li
@
66.1406 326.501 mo
68.6806 326.351 71.0406 325.171 72.6806 323.231 cv
71.6506 325.291 71.6506 327.711 72.6806 329.771 cv
71.0406 327.831 68.6806 326.641 66.1406 326.501 cv
cp
ef
87.4006 326.501 mo
84.8706 326.641 82.5006 327.831 80.8606 329.771 cv
81.8906 327.711 81.8906 325.291 80.8606 323.231 cv
82.5006 325.171 84.8706 326.351 87.4006 326.501 cv
cp
ef
139.031 326.501 mo
127.901 326.501 li
@
144.101 326.501 mo
141.561 326.641 139.201 327.831 137.561 329.771 cv
138.591 327.711 138.591 325.291 137.561 323.231 cv
139.201 325.171 141.561 326.351 144.101 326.501 cv
cp
ef
122.841 326.501 mo
125.371 326.351 127.741 325.171 129.381 323.231 cv
128.351 325.291 128.351 327.711 129.381 329.771 cv
127.741 327.831 125.371 326.641 122.841 326.501 cv
cp
ef
267.751 306.321 mo
246.561 306.321 li
239.401 320.231 li
239.401 341.161 li
274.841 341.161 li
274.841 320.231 li
267.751 306.321 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
239.401 320.231 mo
274.841 320.231 li
267.751 306.321 mo
246.561 306.321 li
239.401 320.231 li
239.401 341.161 li
274.841 341.161 li
274.841 320.231 li
267.751 306.321 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
324.441 306.321 mo
303.251 306.321 li
296.101 320.231 li
296.101 341.161 li
331.531 341.161 li
331.531 320.231 li
324.441 306.321 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
296.101 320.231 mo
331.531 320.231 li
324.441 306.321 mo
303.251 306.321 li
296.101 320.231 li
296.101 341.161 li
331.531 341.161 li
331.531 320.231 li
324.441 306.321 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
381.141 306.321 mo
359.951 306.321 li
352.791 320.231 li
352.791 341.161 li
388.221 341.161 li
388.221 320.231 li
381.141 306.321 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
352.791 320.231 mo
388.221 320.231 li
381.141 306.321 mo
359.951 306.321 li
352.791 320.231 li
352.791 341.161 li
388.221 341.161 li
388.221 320.231 li
381.141 306.321 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
279.901 323.741 mo
291.031 323.741 li
@
274.841 323.741 mo
277.371 323.591 279.741 322.411 281.381 320.471 cv
280.351 322.531 280.351 324.951 281.381 327.011 cv
279.741 325.071 277.371 323.891 274.841 323.741 cv
cp
ef
296.101 323.741 mo
293.561 323.891 291.201 325.071 289.561 327.011 cv
290.591 324.951 290.591 322.531 289.561 320.471 cv
291.201 322.411 293.561 323.591 296.101 323.741 cv
cp
ef
347.721 323.741 mo
336.601 323.741 li
@
352.791 323.741 mo
350.251 323.891 347.891 325.071 346.251 327.011 cv
347.281 324.951 347.281 322.531 346.251 320.471 cv
347.891 322.411 350.251 323.591 352.791 323.741 cv
cp
ef
331.531 323.741 mo
334.071 323.591 336.431 322.411 338.071 320.471 cv
337.041 322.531 337.041 324.951 338.071 327.011 cv
336.431 325.071 334.071 323.891 331.531 323.741 cv
cp
ef
135.061 294.691 mo
139.781 284.001 li
140.901 284.871 li
166.661 251.741 li
165.541 250.871 li
174.741 243.661 li
170.021 254.351 li
168.901 253.481 li
143.141 286.611 li
144.261 287.481 li
135.061 294.691 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.24 lw
135.061 294.691 mo
139.781 284.001 li
140.901 284.871 li
166.661 251.741 li
165.541 250.871 li
174.741 243.661 li
170.021 254.351 li
168.901 253.481 li
143.141 286.611 li
144.261 287.481 li
135.061 294.691 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/CDIBHN+SimSun-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
163.591 271.951 mo
(\011\177A\336)
[12 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
/CDIBHO+SimSun-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
187.591 271.951 mo
(\000$)sh
322.931 64.7311 mo
284.931 64.7311 li
284.931 90.0911 li
322.931 90.0911 li
322.931 64.7311 li
cp
324.981 102.281 mo
318.601 94.2811 li
288.841 94.2811 li
282.461 102.281 li
324.981 102.281 li
cp
307.061 90.0911 mo
300.381 90.0911 li
300.381 94.2811 li
307.061 94.2811 li
307.061 90.0911 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.75 lw
322.931 64.7311 mo
284.931 64.7311 li
284.931 90.0911 li
322.931 90.0911 li
322.931 64.7311 li
cp
324.981 102.281 mo
318.601 94.2811 li
288.841 94.2811 li
282.461 102.281 li
324.981 102.281 li
cp
307.061 90.0911 mo
300.381 90.0911 li
300.381 94.2811 li
307.061 94.2811 li
307.061 90.0911 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
287.401 87.8112 mo
320.527 87.8112 li
320.527 67.2502 li
287.401 67.2502 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
287.401 87.8112 mo
320.527 87.8112 li
320.527 67.2502 li
287.401 67.2502 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
317.281 97.5311 mo
315.391 97.5311 li
316.451 98.7011 li
318.481 98.7011 li
317.281 97.5311 li
cp
315.141 95.4411 mo
313.511 95.4411 li
314.651 96.7011 li
316.441 96.7011 li
315.141 95.4411 li
cp
314.371 97.5311 mo
312.481 97.5311 li
313.311 98.7011 li
315.351 98.7011 li
314.371 97.5311 li
cp
312.641 95.4411 mo
311.011 95.4411 li
311.901 96.7011 li
313.691 96.7011 li
312.641 95.4411 li
cp
311.471 97.5311 mo
309.581 97.5311 li
310.181 98.7011 li
312.221 98.7011 li
311.471 97.5311 li
cp
310.141 95.4411 mo
308.511 95.4411 li
309.161 96.7311 li
310.951 96.7311 li
310.141 95.4411 li
cp
308.561 97.5311 mo
306.671 97.5311 li
307.051 98.7011 li
309.081 98.7011 li
308.561 97.5311 li
cp
307.671 95.5311 mo
306.031 95.5311 li
306.421 96.7311 li
308.211 96.7311 li
307.671 95.5311 li
cp
305.651 97.5311 mo
303.761 97.5311 li
303.911 98.7011 li
305.951 98.7011 li
305.651 97.5311 li
cp
305.171 95.6311 mo
303.521 95.6311 li
303.671 96.8011 li
305.471 96.8011 li
305.171 95.6311 li
cp
302.631 95.6311 mo
300.981 95.6311 li
300.901 96.8011 li
302.701 96.8011 li
302.631 95.6311 li
cp
302.751 97.5311 mo
300.861 97.5311 li
300.781 98.7011 li
302.821 98.7011 li
302.751 97.5311 li
cp
300.091 95.6311 mo
298.441 95.6311 li
298.141 96.8011 li
299.941 96.8011 li
300.091 95.6311 li
cp
299.841 97.5311 mo
297.951 97.5311 li
297.651 98.7011 li
299.681 98.7011 li
299.841 97.5311 li
cp
310.211 99.4511 mo
296.871 99.4511 li
296.531 100.631 li
310.781 100.631 li
310.211 99.4511 li
cp
297.551 95.6311 mo
295.901 95.6311 li
295.371 96.8011 li
297.171 96.8011 li
297.551 95.6311 li
cp
296.931 97.5311 mo
295.041 97.5311 li
294.511 98.7011 li
296.551 98.7011 li
296.931 97.5311 li
cp
295.011 95.6311 mo
293.361 95.6311 li
292.601 96.8011 li
294.401 96.8011 li
295.011 95.6311 li
cp
294.031 97.5311 mo
292.141 97.5311 li
291.381 98.7011 li
293.421 98.7011 li
294.031 97.5311 li
cp
292.471 95.6311 mo
290.821 95.6311 li
289.841 96.8011 li
291.631 96.8011 li
292.471 95.6311 li
cp
291.121 97.5311 mo
289.231 97.5311 li
288.241 98.7011 li
290.281 98.7011 li
291.121 97.5311 li
cp
ef
%ADOBeginSubsetFont: CDIBHO+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/CDIBHO+SimSun-GBK-EUC-H 7 GetGlyphDirectory
43 <001C60D8A8C9B7A73DB68473D21241B1BC365AD3697D345663FF30DC6FDC
6D0A3D5CCCDF5EBCCE3C0990E35B0ED2618CE94DFD217B29149B4C3E2B1AD4A6
731254CB43AF3F2151D0C93BF2489BAC0F828C3A1F3F803BC3914B00E2748DD0
018ACC08EF176250F048DA7AC3C39A9A607B8D626AF32C1A6FDDEAB8F87D6DC6
84652AF58FC268139AF85B0B3F5ABCDB3676CE0AF7B312BADAC57440DE027C7C
2DA6C30BBBEFE290E494B242E7EBD22B31450C1CE27544B1AA888651826B6801
E5D4EC> |
55 <001C60D8A8C9B7A73DB9D5181D8B2E9B717FF670137DD5C74B01C45437E1
9CDD270110C87A6C8B51852CD7A5F8C89E9502C8B78539C3E37CD4EAF21FA206
78904092A16ACC99DA5D861280ABD1338C7C4CC5B2952ABA760CA055734C633F
4ADB41979DD18C1944E40D420356879C7F93510D96BA98EBD63086E2DD58B871
FCD2274E17> |
18 <001C60D8A8C9B7A73DB6DB4828B0D4C553B6C887D64213DAADB494> |
45 <001C60D8A8C9B7A73DB994958A480E6E68177A39DDAE9A161BA9A752EB12
3AE3EC24323DE49287891A05174EFA0605CFCBFFC764FE43D64F763CCF22437D
4A71DF2949B3D141AE340F1D7AC0C51B0066E930DEEBD355FDC4959F485A039A
B6B446D65D220DB4918D3A7F05F5D305E3428E769DE98D90D6186A2E9C4CAE34
C4156F387E03D6C2329C09A4335D773DA619A0F0B8EDCC2DF4C789729E> |
54 <001C60D8A8C9B7A73DB9D42B5CFCEC7F01981AFE517801773FF8AAF15E7C
4CB81154613C5FD1D562CDDE0EE4B2DAF879E403D864479CE189144ADF8E91EE
92B02765232E00139453EA1282D56AFE97EA9944DCEFDCA33912CFC91F718CF3
8695EB5A489DB0F386655B77C93690B3CBA172BCF76AEA68C342A5AB080E96A1
B7F4FF7B91F4DC4899DAAB0BFA5518431FA6DD33F2B7B3F167C016858873F122
28ADBBB7B15314E534A36AD4CB224A2D0B1287F28FF844C6570FD53B740AFC97
655868483C6FED558A5D1250F9D6D1D2E8961E60B1743758E5F657FB6C585A09
A0464FA3> |
50 <001C60D8A8C9B7A73DB90D9D7B6F2EAACBB1E0BB43A8C97B9C7EB9EACEFA
55564EDFEF7E6244E0144A5E44A3116FE10720D1E81294E1699A6AEE7013E62B
306D092BFDBCA4F23B2DFA9DFAE29C576F6D14009D1262438A5A6441248CDB8B
8E14329C730A160536AC5D52DA3F89968225C6081F9E313312DB5EF74B9F1037
4748806E5E933E42F6> |
49 <001C60D8A8C9B7A73DB93195A86F52FD7D9C2F46D3FA2E27C4D24800770C
533F8FDB0AA36F3C1E93160F91A509B1A9F5614C6ECB93756B7DF7665152CAA4
54E77552C6E740ED8DAD365EDF86BD0CE9BFA648F3C363D015EAD09D758720A8
1C1FC14BA91B4AD13685AB4A696A6F97AE0FE70C8BCB5F459F6BCEDD6F128470
3E3B632320982FEA4989C9B8> |
!
end
end end
%ADOEndSubsetFont
/CDIBHO+SimSun-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
221.931 75.8712 mo
(\000+\0007\0007\0003\000\022\000-\0006\0002\0001)sh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: CDIBHN+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/CDIBHN+SimSun-GBK-EUC-H 2 GetGlyphDirectory
4562 <001C60D8A8C9B5EE3103EA5F386B55F9339683993BBF1C832E008A8D5D
0E80442DECA027D5A3AA41BB35CFAE2FCD2B83857EB4327DCCE60FC96E4A75DE
736B500F196E9764306AD7A47BC2B37FD32CF6E9143E701DBF17CD8CF4D980A6
855105A705FB438BC88CE3BAE8F33148E873A737B1A1A80E64174B2627F721DB
C54C7B4251993BE9FB8C6F450D406893CB6B2191EBAF14B2314BBEDCF4049942
65A66B59EB1AFDA4A2FB79E6E1A5232D78CDBF1ACFC9612F77826051BF14D899
CB87A7B25A363B3EE0EFBC13B7C1893B4A7E139B9D5D256790F2A6E47DB7F41B
19E54FB58CB202DB721B1794590ED3D5AEF40187B54AFF561B3C6EB588DE22CD
2FC761B91BD635FC6A7BC14D58FD9BE5E403F05D9E82D140B45C080BC25E6D93
824CCE7AF856AF283BDF03E7B0C2E2793043B398925516053257D94815C17215
F20DD9E580E8FDE1DE8C1FEA0529> |
6247 <001C60D8A8C9B5EE310366CF9D3A5DBD83A75670FEE48A3F8FEFF4D8BA
34E9FDA01926F70F3C27368833BB6124C03AFEF6B0B6B243C8B82F88BF1348BE
9B645803E8FE9207FE2DFE1BAA4A373F38CC5F048E6E2D864D9DF9766EDA153B
1AC74BBF354409B3D8FAB31BD60AB5561805E76920AB986708824BA1E9B74032
99C77825A60D3D8271450A804C6E50> |
!
end
end end
%ADOEndSubsetFont
/CDIBHN+SimSun-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
268.111 50.1911 mo
(3+5\017\021\322\030g1\037)sh
217.261 83.5012 mo
228.601 77.8411 li
228.601 80.6711 li
271.121 80.6711 li
271.121 77.8411 li
282.461 83.5012 li
271.121 89.1711 li
271.121 86.3411 li
228.601 86.3411 li
228.601 89.1711 li
217.261 83.5012 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.24 lw
217.261 83.5012 mo
228.601 77.8411 li
228.601 80.6711 li
271.121 80.6711 li
271.121 77.8411 li
282.461 83.5012 li
271.121 89.1711 li
271.121 86.3411 li
228.601 86.3411 li
228.601 89.1711 li
217.261 83.5012 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
324.981 83.5012 mo
334.861 89.3112 li
334.331 89.9711 li
353.541 105.481 li
354.071 104.821 li
361.831 113.271 li
351.941 107.461 li
352.471 106.801 li
333.271 91.2911 li
332.731 91.9511 li
324.981 83.5012 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
324.981 83.5012 mo
334.861 89.3112 li
334.331 89.9711 li
353.541 105.481 li
354.071 104.821 li
361.831 113.271 li
351.941 107.461 li
352.471 106.801 li
333.271 91.2911 li
332.731 91.9511 li
324.981 83.5012 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
386.831 106.331 mo
386.831 103.901 383.801 101.931 380.071 101.931 cv
376.331 101.931 373.311 103.901 373.311 106.331 cv
373.311 108.771 376.331 110.741 380.071 110.741 cv
383.801 110.741 386.831 108.771 386.831 106.331 cv
cp
387.821 111.931 mo
372.151 111.931 li
369.121 111.931 366.651 113.541 366.651 115.511 cv
366.651 128.021 li
370.941 128.021 li
370.941 120.741 li
372.371 120.741 li
372.371 137.361 li
379.351 137.361 li
379.351 129.931 li
379.351 129.681 379.671 129.471 380.071 129.471 cv
380.461 129.471 380.781 129.681 380.781 129.931 cv
380.781 137.361 li
388.171 137.361 li
388.171 120.711 li
389.601 120.711 li
389.601 128.021 li
393.321 128.021 li
393.321 115.511 li
393.321 113.541 390.851 111.931 387.821 111.931 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.75 lw
386.831 106.331 mo
386.831 103.901 383.801 101.931 380.071 101.931 cv
376.331 101.931 373.311 103.901 373.311 106.331 cv
373.311 108.771 376.331 110.741 380.071 110.741 cv
383.801 110.741 386.831 108.771 386.831 106.331 cv
cp
387.821 111.931 mo
372.151 111.931 li
369.121 111.931 366.651 113.541 366.651 115.511 cv
366.651 128.021 li
370.941 128.021 li
370.941 120.741 li
372.371 120.741 li
372.371 137.361 li
379.351 137.361 li
379.351 129.931 li
379.351 129.681 379.671 129.471 380.071 129.471 cv
380.461 129.471 380.781 129.681 380.781 129.931 cv
380.781 137.361 li
388.171 137.361 li
388.171 120.711 li
389.601 120.711 li
389.601 128.021 li
393.321 128.021 li
393.321 115.511 li
393.321 113.541 390.851 111.931 387.821 111.931 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: CDIBHN+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/CDIBHN+SimSun-GBK-EUC-H 1 GetGlyphDirectory
11096 <001C60D8A8C9B5EE310352EECF602406C0329E1B650528DB4C10B129B
B86AB3C12935CB6FB7137A27A4BA4BEB46A65DAD78F0FC83B360EEE112A0140E
5C390E0E8EA3F7C92786B3B9AEC46703437C6A2C28887BC820512583CC7836E1
6D9ED939B7910787CC00FECD1FAB2728E0DD9BB16E5A032E9D9C282EE7E5018D
8A717D033E0D418BFBCD53BB45AE5E336455171952814514E50B44AA1AEE4E2B
A7EABEE344264E734E0036C35C14833C943CA22B41707903D5915EBE3D492EC> |
!
end
end end
%ADOEndSubsetFont
/CDIBHN+SimSun-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
368.761 153.821 mo
(+X\030g)
[12 0 ]xsh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
[/Gradient [/0 /1 /2 /3 /4 /5 /6 /7 /8 ]]
] del_res
/CDIBHO+SimSun-GBK-EUC-H-Identity-H uf
/CDIBHO+SimSun-GBK-EUC-H /CIDFont ur
/CDIBHN+SimSun-GBK-EUC-H-Identity-H uf
/CDIBHN+SimSun-GBK-EUC-H /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
