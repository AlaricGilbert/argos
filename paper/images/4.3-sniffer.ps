%!PS-Adobe-3.1
%ADO_DSC_Encoding: Windows Roman
%%Title: image-visio.pdf
%%Creator: Adobe Acrobat 21.7.0
%%For: Alaric
%%CreationDate: 2022/5/24, 11:47:56
%%BoundingBox: -1 0 519 401
%%HiResBoundingBox: 0 0 518.7172 400.4686
%%CropBox: 0 0 518.7172 400.4686
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1132 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.0-c000 79.1357c9e, 2021/07/14-00:39:56        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   pdf:Producer="Microsoft® Visio® 2019"
   pdf:Keywords=""
   dc:format="application/pdf"
   xmp:CreatorTool="Microsoft® Visio® 2019"
   xmp:CreateDate="2022-05-24T11:46:06+08:00"
   xmp:ModifyDate="2022-05-24T11:46:06+08:00"
   xmpMM:DocumentID="uuid:597F38CF-DA4E-4F0E-8B8D-66493EE432E0"
   xmpMM:InstanceID="uuid:597F38CF-DA4E-4F0E-8B8D-66493EE432E0">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>许 皓钦</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 3 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
<</PageSize [518.717 400.469 ] >> setpagedevice
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -400.469 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-1.52588e-5 0 mo
-1.52588e-5 400.469 li
518.717 400.469 li
518.717 0 li
cp
clp
gsave
-.131592 400.938 mo
518.868 400.938 li
518.868 -.0618286 li
-.131592 -.0618286 li
cp
clp
gsave
-54.1316 710.938 mo
541.068 710.938 li
541.068 -130.862 li
-54.1316 -130.862 li
cp
eclp
.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
-54.1316 711.028 mo
541.148 711.028 li
541.148 -130.862 li
-54.1316 -130.862 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
@
grestore
196.248 30.7082 mo
238.768 30.7082 li
246.598 30.7082 252.938 24.3682 252.938 16.5381 cv
252.938 8.70819 246.598 2.36816 238.768 2.36816 cv
196.248 2.36816 li
188.418 2.36816 182.078 8.70819 182.078 16.5381 cv
182.078 24.3682 188.418 30.7082 196.248 30.7082 cv
cp
false sop
1 /0 /CSD get_res sepcs
0 sep
ef
.24 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
196.248 30.7082 mo
238.768 30.7082 li
246.598 30.7082 252.938 24.3682 252.938 16.5381 cv
252.938 8.70819 246.598 2.36816 238.768 2.36816 cv
196.248 2.36816 li
188.418 2.36816 182.078 8.70819 182.078 16.5381 cv
182.078 24.3682 188.418 30.7082 196.248 30.7082 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: DISKGF+SimSun-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (DISKGF+SimSun-GBK-EUC-H)
%%Title: (DISKGF+SimSun-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /DISKGF+SimSun-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-8.00001 -141 1000 859} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 28793 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 7 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
2655 <001C60D8A8C9B5EE310314E146674EB7001DDF8FE142437E94210DDA67
5478A06CD9B2E86D8A93B745262723D0B42C41822A8E20935683938CBA83338B
908BF3BD6B316A3657065031EF1FA80A7DF16B8D09E5799784DB66F35D3B2B40
DC820CEC225A5455FCBB4E613B5868D0AB42218EA2BC0F524F303B45692C7769
60B1410FD33BB4D32829C28DF5FF62A2C3CB1F404E41C39DB2FD502D295D86C3
8CA0F7288D2E5FD7387981DE24D88CB3FAC9BA52AE9B02577A0374C9ABD793BF
30699178E7D482A8D9469CFBDCB8C824ED419F205E20B15A7B2CE3E6D4E30924> |
2264 <001C60D8A8C9B5EE310304C98BC5A35ECEC8479ECD967F3F4B172E655F
2B1FAA7B6B6BE4A0A5106EE68C2EEA72372DCD7FD1CDA537C7F03197BC0F8AB5
941BD8BBF4B5BE676D459A256DDA2317456A7D859F2A5B3664C7C183912BBDFF
F13CD54B5C5C2835A4CE1654025D80D1234D6DFC83A797BBD3E382C19CC4F9E8
D7383D5FA87128B3ED19F0391C9227ACAC0C77804C28FAC34028CA68648C1A53
0D4CADD5C6D6941205AF439A55E650F2B710DE87ED0D1D775BEDE5C7882BCFCB
6E1D06275A4DFB5C9645A9033F31C0B103EA53B62557BD49878CF1EB59BF8BF2
A7C81FAF3DC7EBC5B3AD9C00DB8F6E39761E6F59E00A83CAC6FA918FF2BEC393
1C0083BDC37EC8ED0FC434322509C91F8C3E27C6178A8620BFF7AFCE3BE1F360
4177FFF22BF64C2F0D5B> |
3061 <001C60D8A8C9B5EE31023AD540F76AEFBF7810F9DFC86D7BCB7CCD4FF4
B0DF62D636CEBCA5ECAC30E2FA21CF6A5D68C064415EFE57286BC35692B6DE43
1AC22113A44C3CB8D2D458E2CF105391BC9D655AF1938DDBCB866A910DD6BB71
DC2D43861AE4CAC0DBDF3A0620D85A391EB17C11A5FE28D5C4B0D5F4FC0AD8C9
B8E421BA5A80B71C274B76D3068F8DEACA0C52E1A67740B3AD4001FD930FC0C7
138895168EA16648ECFA7840108C622808B63262CF2ABADECBC9EA918D29E3E4
34FCC8D50F7ABB7DAA82E74464B51BEBF178C9513B0BACE54C42387F67FDB327
7F8AB68FD04778C808258AA3D856A011420480AB4974FECAE9DA65ABEC76ECE6
CC6D27C751C98C0632B4059C566A19B3021F9AE6555976323A1604DD5AB30559
B6A8CA2970A36C07C12644CD496E54E8F3D74227FEFBA72B04C34689F5895A7F
05E3B9FF3A97D16A5A0D984E0FD429A3DA0979D4E26858CE1D3A9F0BE19B8E19
B06DD8> |
6610 <001C60D8A8C9B5EE310337A99AA654A498206B49DE9F544F2B20E177D6
C9B3449F30E43C077BC4F81F3D0CF3F8511744840EBE5E9FE4DE31C6EC115E0F
CDDA68448EC7A58962479E3B05819199F472F319983CF1ACCFE0C900C7AD507C
48A280D58EBF5D15CC2BC5A2018BD01E7E20A32EFAC644948C7E532687319823
B92A1AA122B54EC8174877237F061DA725958F1B109D2CD5535B64E0529707FD
5C34C7E369AD4033FCDFDBC7A4243E4D9BD0F882C730B5A31ABF01D7394CC618
CB4B4D7ADDBCEAC0318A2D006BFEEA735C10AD95E49BC2F6505576630ECB140A
972EF865C3C436425007A0C913430B417C82A27C6736BEA97C118DD39E594DC0
3F55F7690227C1715F95F73C505CD06E5292FC756DF9D0662F6BEC61EA565191
9F4750732D362E4BC2FA59B3345146609609EC4ABC2F25D107A492A6954D5222
F70ACD37474BD5F73CF57DFC75CEE7CD143F879ABA08BB8CEAA3499FBD83C1B3
C69C5ACB18D2245B11400C1F09F84C021D33CA9A78525AE9FDD1D6D647445D99
9D58D21F30EB1C017B44AA51C181447B30055A64AD024781E58E76> |
8273 <001C60D8A8C9B5EE310D991F82D8FC606D8F35C5B69427E6274A939C88
D01B05A52977427C91BD6A5BEBE2445B8801FBB3FCD81F655E2E5857D5DA5143
DE9CFD2A0E26F3B18C58D69C8B3F74C372A08664AB91409804538EC27395A273
1BDA4BF0FDB7623D4A5DFAC59413573DE1C8E4F7FBA66E7B685D4749EDC6C763
219CC1B695B7B892CBE8D997B68D977A9E3305495D166899FDDBE133B6D8B8C3
CA7349493EF83B63FB2CF6034C28F457801C9B80B4C1A831021C19DB280A05D0
11FD4FC019EC4252ED6CF1FE4B012F36D93897490B17F11146664896938A65A2
D07E114950CB45F30C44FCD1F98B684D97E8BE4CDEBFDC5A1C6EB02FE63DC59A
8317A98320E8EF0648D06323935482296C485DA44754BBE4409280F89A675105
B6164E773F74D78DDB7D41B37F2780052AD651E9F0E7AC6647834E20A322BB80
DD7D6213D361C5AC329E343F0ECEC3DD659FABC8FC19461E5D1E5EA144A9C90C
9CFF73B00B3749099CFE747426547BB3DA005431CAE908DEB8DBB03B269BC49A
382560F84696092A5485685951257773B8638542A25F1C> |
3463 <001C60D8A8C9B5EE31036D2478CBD6273F3C01A077B79B04CFCE186016
E6AE5C0B4D7233B415FC23E4A90A8C8BA54F3B6F5F13512D8FAE7D93FAA2D95D
246BF6F07C04D1150EA08583929BC089D5F8D7B627786CC8ABC2C0CFE6A3A599
01037040627E1E12715D9BC9E43834EFAA956A13A116B6346DF9081C00B15020
8DD292787E9121EDB236DB0DD118488DF62B9B9884B40BAED9DA36A7E73BC0C4
71C75B917BCE1F6A9BD062E7781A2B08E79DF872893582188ADC5FC1C202E50F
E54BFDDA05341CD4121680966CA14D2276739D8B728FAAD7062E82DCACC7EC60
9C69CE2FF9B676FB62C7BB2ABA38D60EE15B1314A1C355BECA8906DE28657E2F
DBF44B072EFA111FBB468526> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /DISKGF+SimSun-GBK-EUC-H-Identity-H /Identity-H 0 [/DISKGF+SimSun-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
193.548 18.9682 mo
(\012_\010\330\013\365\031\322 Q\015\207)
[8.03999 7.91942 8.03998 8.04001 7.9194 0 ]xsh
2.56141 163.118 mo
108.861 163.118 li
108.861 134.772 li
2.56141 134.772 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
2.56141 163.118 mo
108.861 163.118 li
108.861 134.772 li
2.56141 134.772 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: DISKGF+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DISKGF+SimSun-GBK-EUC-H 2 GetGlyphDirectory
5575 <001C60D8A8C9B5EE3102EBA4A567A08BEE7C2DFDBF1C0EEC6087B8C500
D4E9AED2B39BB065348D71F064E24AC06533C14171E455D3F0E751CDCCDB6342
9D8B04FCD406D1ACBC9024187F8B1EC79BBDF63B422F646B16FF27B2B0B39977
222C59E956C19496A0E2C0C29B7A313EBF3EDC5E089DEDE3FF4E0BEC551105B6
25D17FF38605FFC5342B182B13FA16D721BDC1B06F76CC1506C73C33C83FC78F
6CF1B04F0F396C8A380D59B5C6F81F5B15D700EE230E5E981F031847602CD516
EA42B28904D9A4E4289DAD74525F7DC4ECF417B1C68FDEE09D6051BAA09B3661
7D8834A42F965722623AA4E5BD30DC8BDB5D7684A7BDAD7B1DF6CE6469E296FA
158FD9514FAE395F8D263A29E15397CA58A83516A86800323C3AFA35E9E94EA8
8C1FC8022B0A18ABC8538377F6D56DCE21F13B02B351214AF1871F8204A31BA8
DABC7E2C4247C0151E075250096CAE112BC453F2218A610BD7> |
2144 <001C60D8A8C9B5EE3127F1A26D8102AC97454C099C0604BBFC5A87A1B8
03056AAC8EED5559C147F259F291F2026576A69FBCF5512465B42369E5509678
1F78635DE188B0BA6860812FD176D4444AA79CCE882E1C632D2D3C37B322E4AC
B203B68B554DB899C81B25F026EF52E2510D6636AEE02E5923D41D167D7C4484
40C92F77B6F5B1ADFCDCC15690BC997ACD7C18319129F8AA027BCA9427370F4C
8F1C553FEDBDCDF5B791C551A37270649EDAB160A0E8AB3A1BFD65B6CB450758
4A78426858059C3D40B74C42A8163AF54C3C27434724A3C7364081D8F1889B8C
0B56909CBDC18DF9C30F05FEC8157C771F8FFEFACAAD0EC9F0AB498361D13F6A
EC31F343E75882FECDC0C5FB36B4A44F2EAD7AD628AF69B219D23BB55BCFC689
58AC14F92A3B9298C418D4BEEF474E25> |
!
end
end end
%ADOEndSubsetFont
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
7.71641 151.378 mo
(\025\307\010`)
[8.04 0 ]xsh
%ADOBeginSubsetFont: DISKGF+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DISKGF+SimSun-GBK-EUC-H 1 GetGlyphDirectory
708 <001C60D8A8C9B5EE3103BF0CF9C90B27C7418D73AEC3724353C301B4F95
5A3AFBBE53C0836A80A54A7C7EABA491AD7020B7047AA350926C74431CC86A1E
EAD0ACEF1E6ABDF84AB3DCCE2F607EB04A343EFC2C9F2FF7721D14D34CB8778A
B708BCA01D75D> |
!
end
end end
%ADOEndSubsetFont
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
23.7244 151.378 mo
(\002\304)sh
%ADOBeginSubsetFont: DISKGG+SimSun-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (DISKGG+SimSun-GBK-EUC-H)
%%Title: (DISKGG+SimSun-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /DISKGG+SimSun-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-8.00001 -141 1000 859} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 28793 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 3 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
44 <001C60D8A8C9B7A73DB9696D477FC5C77CC13F785D0DEFFCFE399F815467
2C738C7542738E124DFEDA4F33708349FE4D7ECBEDDDE92AFC81C7A51B45AEEC
CE4AEBB160C3CBB2056F1DB3B4BB9EAEADC6349A0E672BA304F2323994F5EFB4
AD37BAA9> |
51 <001C60D8A8C9B7A73DB987322EDD44B1DF5405863ACED3B083D42BDC3CA1
425C498E01AE29E2F8D6006DEBE28C3E3167B8B0B15C9979E8BC6F967EAE4108
594879B55E7B2B0C1613F0727FC5D41CF3A18A5C9AF47127977CC09BADEA25A0
5207E3A29DB2A627E71F0DE62BA33B64393D52499CD3D050DB6353DA7F8BAAC4
50A2F546392BEFE2730B572B57EA1E5C6F260C4358B586673BB20F89AC3C5FB2
7145> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /DISKGG+SimSun-GBK-EUC-H-Identity-H /Identity-H 0 [/DISKGG+SimSun-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/DISKGG+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
31.7164 151.378 mo
(\000,\0003)
[3.96 0 ]xsh
%ADOBeginSubsetFont: DISKGF+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DISKGF+SimSun-GBK-EUC-H 1 GetGlyphDirectory
712 <001C60D8A8C9B5EE310D16C9BDDE67CCF2E7F7F1335373641ADDC8E48C4
BD3315F1731506CF5A4DDDF48AFBFF21A2F093311B104EB9ED655AB55377118A
205E08BD91D637D4E86F85986ABE22223468E767986F984E65AFAAB61557FF77
75E69CE20D37AC884E85CCF331105C5C2FAF6A8> |
!
end
end end
%ADOEndSubsetFont
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
39.7324 151.378 mo
(\002\310)sh
%ADOBeginSubsetFont: DISKGF+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DISKGF+SimSun-GBK-EUC-H 2 GetGlyphDirectory
12575 <001C60D8A8C9B5EE310217118280789CCBEB2C1EC91E7030B682F2640
6ACFC2B7531E1902F94F049F41B6FE17F2CF769A53A54DDA08837D8651FB8220
C11327B01545EC8D8FCFB25F5D4F628B79BD3941DF311F470D86CF7169ADD302
8E4A033D39C0F3D5CD1F8FB6A76A131188B3F7CB9C17F6F76B8E9EAAE8BDAE6C
6F65282C1E4DD23F0D357E1E02F1C70D905720CA6564835BA624F40DF5C2BA35
72D313408459A79B4AD0121690830C28E015B94A1BA0E0C3F8B0FDA6FFF77B27
E3137891E2607CBA697E21E84F70F8590050D465A7D5AA5FD2EC44592E953AB0
77C64960DD515F868FEF3C830CC15ECF289DB69024CCB4F9356E0FD5581125BD
3D05A80F4188E29970848F247591AD9F93855265CD2A1F9A19E2A7B1D57E874C
6A6AACC20AFF47B8A815C2B1E858E9E1AB42207411C76A8D46030BD60282B702
187E3614061EDB1DA1684297987DC51C7200AE4FCF925C962D2A4E68C7CC42E3
F91C2E39E72DF5B0DD3FD6002789EE4CFF75B21EC4C2CCC1553A5F1EA5E06C62
48BA62808ECF961DE991B35> |
2579 <001C60D8A8C9B5EE310337A891C2D47E2711CF26560A417EB40B284B8F
541C41D98DD9CC89810C7F6AFA663CBCDA046C1B3FECD657475A00CBAD5868B3
72B1A1290AEC9493091530C8A89195A969F828F00702> |
!
end
end end
%ADOEndSubsetFont
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
47.7284 151.378 mo
(1\037\012\023)
[8.04 0 ]xsh
%ADOBeginSubsetFont: DISKGF+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DISKGF+SimSun-GBK-EUC-H 1 GetGlyphDirectory
709 <001C60D8A8C9B5EE310275428E0ED5099F9F1E8D088CC64B9C725348739
C9FD3403BAED6A799C66E9AC709C6D22220A676D21EBAA12AE2454955AA4E066
78B98718C8DDE28F13064822D5FEA4F3D7A01387060106777632C0B3BBBDE050
E75FCB383E714> |
!
end
end end
%ADOEndSubsetFont
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
63.7284 151.378 mo
(\002\305)sh
%ADOBeginSubsetFont: DISKGF+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DISKGF+SimSun-GBK-EUC-H 4 GetGlyphDirectory
1993 <001C60D8A8C9B5EE310366CF86B17E1CD9CDA90422AEEE16CFD44B19C9
80200DD3377F6A6F02B5220A74BAA755EA22C960D508F2C14F39AE91E35CB4D2
AF060D10C7D74917C3EFCDD7026FA77D0E21BA8A20F6468A7CB4AF0EA156E006
9C0100899761F610EF12D9AABA0846C9F5C088BE7B05A21F65B31F2234BD2775
C016D0B2F0207100BB9EB786AED0DC379EB31DAB104CB0DC6EB302BFAB879811
E46BE89665379D160E5792DF987C69EB64DD9CE3ADA33EEF1D30969070B92A58
A9DCCD5B74F786241F1C2D869BC29C4C5C90DEE4E7F3955F90692D9AECA0ACE2
DD30C3531EBB5046A088FEBC33A2B020> |
1941 <001C60D8A8C9B5EE31020D2067681CF82BBB8FD13ED0046D1DF500CF15
0B50BA82B160D023B0F29B4ADD81948FCA2E1F58D798AD29FC3D5F985B2C9329
0DADDB9A11CE34DD2D76BAE09076EADDBDD2C41C8A20687A4E0B693682092E05
36F49D166501D9DE3C54C55B9F8DB065897E79486D7BE0D2E5A87FFD8FEFCB3F
216A> |
17994 <001C60D8A8C9B5EE3102EB2368AA8B31FE31A072BD4DAAA45037A5A46
9DD926437332A22FD7A5B52606FD98D719D1C30992C941A8B1EFE4A6875DA3AC
A3B5CF27EC0A54654A99C9EF39A6A535B36A09FF005CF8E7EB5A5F1914DCB32C
1549D100C9D9ECD95F827C9E970FAFC7EFD08C5D29F9536F577583960DFA7AA3
C99F0103256240EE634F71E1F1415395EBA0C3118E8B839D51BE147A69D4C895
2EEB52DF4B2D32E8C842C1EA6534B7E37AD6058D8081799B69D3BE1CA74711DA
66E7512EBDEC0C143AEDA9FADE2DB424E897B6BC19EFD20097660BE58986F10A
E532C3507B03D6D285D6EFB5BD7373A7E9D2ABDB51F21FB1028F095C61B91E9E
72BDC858A0AE48207C5E40F630851756A92A51DE8B87F7DDD04BF6CFB2829ED9
2A0F2CC2D044C6850258FFCEC8DEE7BAEA605775D8CEBA8A8004210210EE7B1E
CA069DB7830F66BB956912F7930341098F509BC0CECD70CE1BB602ABB94069D0
AA3065F705137A9A85406E4B9F9985A1E82242956C7B9432DA1A6BD00D2175A6
11DA13AD86439AC7E4A2F> |
18051 <001C60D8A8C9B5EE3102B1EF11F64593AC5815A880B60693C29D34A7D
ADDA3BB9BE992A4BB1A77D011F5A51AD927751BDEE974C3B37E99A29440AAB41
C34DB99B66E3BB8707F62036FD2F17E14D3477117D6CFD204CF8543A184C157C
22859E7E6EC1D07B8C6EA77C86C9C446DB6C8F8E68281B2E83D9E1295C47066E
4170E6542B9CB75936D0EE1F2581541E26266A893D42296778288BBBE173406B
9E72064A79BF459D90DF73808BD115FA66E0353E133F292DE406C00C507E394D
D973C1A37F86B65AB38484683D67240BF036B2D6255E9AF6B1E9FFAE6F8614D4
4B1A398ABEF980BB4E225C6C3CEEA313D66A91EDAAC23113BFC0237179898ABE
61A7406E5035698D4F6359C613586BF7CA88827248F07283810DC067167916CE
BD96001D655F46071A2E2AF6E8D0E17DFE7D46FC44B71D76D6DBC0C1C44602A9
87A22D32A711E7FA12F53A4073A1E18DF3F79561A64ABB00250821681671FBE4
744E20484512E421AAD5956FC27F00C901C7CDEF14975E93BF94A96D09E2EE47
63D8DFA6ABBE44E04> |
!
end
end end
%ADOEndSubsetFont
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
71.7284 151.378 mo
(\007\311\007\225FJF\203)
[8.03999 7.91942 8.03999 0 ]xsh
166.128 237.638 mo
254.718 237.638 li
268.888 209.298 li
180.308 209.298 li
166.128 237.638 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
166.128 237.638 mo
254.718 237.638 li
268.888 209.298 li
180.308 209.298 li
166.128 237.638 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: DISKGF+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DISKGF+SimSun-GBK-EUC-H 2 GetGlyphDirectory
16939 <001C60D8A8C9B5EE310D783B790A4AB29FD97DFC6A3F9A4818A7BC623
A3533F6CD8C2BB7D7BEF7E3A523025038A7FC124F937A599615DCB243AB243E3
D8615408ED813FE50392F5584CD90121EF54E383DC56DF9B01B5044568BB0C4D
2DA67AB6B9ADF26328C89CBB62AEA1E64AE5D3E358FB8EEB97926A0A7911EAF3
13D4F7053B1B20AE859BEA96D198F47539676E754A94ACE98D8D77375F38AEB0
29B34B7C9381907633BB60A11BAC0B62923CC817BBD1EBC5A5C1D626AC138468
F00E91CDD851A5489C87F780CD530AFE304B3BB830824279D78A98891931774B
D4EDAA3826FCE4DAB444D4C375C9EAA7189848AFE39D1F8A9A1B63F7132F91FD
628779E4F759AE4F5559AC831F251BCC8482109F8563774AB98BD39EA7D6930C
32BD4F4DD36EA3FAED68B632A585854CFE8CA11E8715510B694C8D4079574CDD
0D1C5E6602D5EB34D9F57B2A62EF3A0BE5D841FA31B8A9AAAB4CF53807541824
D0A27E0F82D673A5309534BD105F194CB38D2AE1356E57B40BF42D540DF8770A
B10F4A51C64E814729CCE1A6C4AC2735061E516690A0D2E8E7AE8D95D66E58F7
A06013EDEAC> |
2090 <001C60D8A8C9B5EE310323C93D50FF207E1B015B05EF899046C8FC275F
6BAF6CC3DE09D4C2CA986F744C3898BD356C4880285DB8BD035CF402BE4DD6C5
9888DE36058B3B84B49E5BA4705DE958B4154557499F6B8D1109F61670D8CB25
BAB7A7EBCEB2E2F3E5B38B7A841645B367015962C463F0B06E872A902AC787DF
65B5C22FF99C6F83F0ABCE0CE0E9BBC622CD492E7E0A7D00DF3508065FB02416
9EE6BA2434922707D1076743918CFB1E24F15EAB> |
!
end
end end
%ADOEndSubsetFont
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
201.568 221.118 mo
(FJF\203B+\010*)
[8.03999 7.9194 8.04001 0 ]xsh
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
193.548 230.718 mo
(\002\304)sh
/DISKGG+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
201.568 230.718 mo
(\000,\0003)
[3.96001 0 ]xsh
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
209.558 230.718 mo
(\002\310)sh
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
217.548 230.718 mo
(1\037\012\023)
[8.06406 0 ]xsh
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
233.558 230.718 mo
(\002\305)sh
164.358 293.138 mo
270.658 293.138 li
270.658 264.792 li
164.358 264.792 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
164.358 293.138 mo
270.658 293.138 li
270.658 264.798 li
164.358 264.798 li
164.358 293.138 li
cp
172.868 293.138 mo
172.868 264.798 li
262.158 293.138 mo
262.158 264.798 li
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: DISKGF+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DISKGF+SimSun-GBK-EUC-H 3 GetGlyphDirectory
2123 <001C60D8A8C9B5EE310DA2583FDB5607A97257E1A25C4296115FDD2B1C
2F3D0D3CAC35F4741E7624B15F0A49C8098700C169F906770DC4F02A64DD17E6
CAE9B8AD8201FC24E44131DBCBC9E538D6194D5F680F42FF6A46E6E904CE99D3
24689A70CC7C622DCD1CC4A20B6285B3A0D875F690B8A13842C3D5BFC11DEBC0
EBBC3C5FCE9EAE43E6D89CD6E7D6174F2C04108DD5880F2084CBFC75C6CAF821
C1BAC79F0EC025E182BBA96B5BD430D933A313A53A7CA0596EC9C9CC74CEE089
6F05555E52F33C225A17827E09D15DCAB951B3ED94AA201FA706D40CE26A2358
BB13084F0D7033D9D373D87279516D29E1735BFAAC42B1DD802CED669112C146
AA2853A5FB47B5BB947EF5697CDCD22228C579F136CE5B40CE01576A8300CDC8
F01BC635D3DB5C8C88C1A4CB9289F3AA5F34D2831D8BB0F6DF0D213022B162CD
42FCFBBF26> |
5418 <001C60D8A8C9B5EE31023ADA669FB37D1DD638F510AE5E2A6FB82B26A8
5950375293140E99F14B506C08C4499ABDD89E4E7C717A9F0B29FC6CAB25960C
08C3A43B87ABCAD5F72535FF31AB2CB1249C0EC0438E1AADBCE44702455DF8CF
8BD5B80847ABC46D88DC181EA5F21C6CE298575CB2549D2B1EAD70DC8853928E
2E8F2006B7D116BEDC88515004AF4FF4D76BD7D65C804CBC5ACCF2B40F74C54E
9B52C57ECC562D91A9F3046F1271FCF5FDB75113F4F1FB22C7435BF8D24F93BA
743E804FB7BBE6BF291FE15ED48BB1FE2DBA93D6F540FB258A4A215568524FB0
9BF905FED9CB30CC88E4DA985D9E122840C42CEA088E3854FA52028A270C6D9B
57EF4A06596CA859F32A0228C210CE885CF6784422FDA76032EA74BDF9849324
B4A8C6E884F5A4A2E685142AC478B0B498ECC929F33204A5178A6AF78BCDD710
C629D9CFF91D13BC62B75E32642CD72C0E75D0E3182C0E4F2C31E6D5DC5DC817
CCDF7BBE16FBBEAA68D2B508FAA81632976BE0> |
5286 <001C60D8A8C9B5EE3102CC2478F204575320CCE6C5F31D2C3D76D3191C
2D69FF92E4C277FA57441BC78CE5BC0D2046884744DA8600730D0133147A185C
1DDD1BC34C44185273D3599798A5EB9A98AAA60EEE82DD64C99F1AFEAEF36866
F7EDDBDDB8DE505847EE1A7D76D91D3E5854D18718ABEA8B433EAE1BECCE15BA
15E1FFD7DD3C1081BE7AD64A45763072A4D9DD5266AA5112158AFFFC3E5B5771
9B85D833FD647651AB9752C0A55F505C5D7D9EE7A06504999DB610F74D01B096
32C656E0A33FC028F91086D3C65708B77C> |
!
end
end end
%ADOEndSubsetFont
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.064 0 0 -8.064 0 0 ]msf
181.548 281.408 mo
(\010K\025*\024\246\012_\010\330)
[8.064 7.8947 8.06398 8.01566 0 ]xsh
%ADOBeginSubsetFont: DISKGG+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DISKGG+SimSun-GBK-EUC-H 2 GetGlyphDirectory
72 <001C60D8A8C9B7A73DB937B4101DBBF46DCDCD3594B4AAC949BC12DB93EB
145354BBB8C08C11925AC0F46D8DED6ED48766AD9F227F80E78F994FA53412AF
E33248FD828F9162118D6670CC6A028F6D1DD6E1E39F82490DBCEFB527759926
A45C28D02E5E3C215B6E23DB6B07742833D39B4C404EB9F2FBEFF8CC0B79F18F
65B9FD4B7E27C7AFDC> |
85 <001C60D8A8C9B7A73DB97983BF28BFD90FC72EE9EF2B660140486BB7EDF6
EBD6F8BCB899A4EB501C6C3D3F4A057E2E2BC5082A8DA39FC13765D4D26515C0
B70E71DEF52C1559A08E5B2C61E8774E9AF7C85DF1980C54722E49BBB603BB12
FA72DE5BF0E6C1C9478648B4F622D4B31ADA9DF0C5F58A8D0286323BEAE89B93
6BFA9EDA0297E6CFA9321054E0C6F4929FA575EBD73F7B3CEE4FD4EFDAEE4950
DC13EF769EC02165EDD67FC807A3EF00568FB141086344> |
!
end
end end
%ADOEndSubsetFont
/DISKGG+SimSun-GBK-EUC-H-Identity-H findfont [8.064 0 0 -8.064 0 0 ]msf
221.558 281.408 mo
(\0003\000H\000H\000U)
[3.95941 4.07233 3.95944 0 ]xsh
%ADOBeginSubsetFont: DISKGF+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DISKGF+SimSun-GBK-EUC-H 2 GetGlyphDirectory
6280 <001C60D8A8C9B5EE31022AC26F92E12DBA98981EB10E293423F398AF0C
034054A63057D2F503BC1DBD2B8EDD466EA58F4397F9BF7FA5A10B50DEE45B40
71180BFE3D621CE3FE477DB2960E62E22FFA4ACC0578F840204BED5722C8D8BE
BBB698B922FA090B1B02FA013F0BA75C56F40CA8443FC14EAE252B9DC57A2D70
42A68B542E36EB022B02B7E3F34F654E69B3F7E19387330C109FB43E220DD593
69C6771A9FFE0FEB6ADADAD9FD8162D526809C808A6305AC66BC4D2047EAD789
6D6CB1BAE0479F151D1F5F55B16BF36A4400462060023C38082B747A56707D57
9F9735156D6AE079FDF76FA041893605216A25C78A6D6B244FB45698ECB8B434
44D1159224B1> |
12753 <001C60D8A8C9B5EE31033E0EB22CC4F591A60D0FD05D42AD77A3BF35F
5BB766A0AA00F87BC96C7AE6E578A8B72EE49352BAC9F765FE8F95BCE388D9D0
B9280508D3E962694778AE0DD729D06F09148105286AA95BDFBA2E02335AF7AB
CF91F0B6312DC26F6A7FA81416E79068A32395DC4DFCF69B5C7B4F22D8D5448F
A9ACC5E219E58D0E8D2770AFE46D5DDAE8DB2000406D0D19A464361DBEEE6B40
6096CA3A9961479CCBECFF34883325C6C17C5D9F2B770861AAD308491C3F563D
1FC2D49725DA8CB1524239934740F023884FE97A30BF79FFCB9A9CF7407FEDD9
91C825725251D088211FF5AB7E9D35CFFF414E6B0111C83BFB0951EB0D7BDA62
70462A5E5C5D821182A35AD88F53814D17E888FACC46005D910674FE302CF5B4
A7F582F324F8ED8711A2EC8FB75CF8030BAD8F4228B79FB558E7B8D106F14A12
A918ED1ED0DBE7D93CB7A489DBA288E454C69814872E59222FFF2F7845B6DB25
59384DD9729D55657803247E0A6896AE965719A0E89564DEC7B9629F782F6774
9D0705B32D0BEC5F1B10A4A2A760D18BF284C3EC3CD131A5BD216982B5FB7924
444CBDC8B8B72015FF76A6C623F753D5407850AC4CA65960C14C33CDDBB16CE5
0F83E838B7AEE1F085175A9FEBE59> |
!
end
end end
%ADOEndSubsetFont
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.064 0 0 -8.064 0 0 ]msf
237.568 281.408 mo
(\030\2101\321)
[8.04001 0 ]xsh
164.358 167.968 mo
217.508 153.798 li
270.658 167.968 li
217.508 182.138 li
164.358 167.968 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
164.358 167.968 mo
217.508 153.798 li
270.658 167.968 li
217.508 182.138 li
164.358 167.968 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: DISKGF+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DISKGF+SimSun-GBK-EUC-H 4 GetGlyphDirectory
3424 <001C60D8A8C9B5EE3103C3C28E58161CF868B6AF4FD4C0AB5807AEF014
6ED4B07D1838484AAA4D92703CD581CCD782F6EDE0DC305CD95B19122DBB16C0
A7700EE3F1AA68A42CF70A45576E2A6D7D0C16E39D267C6BEC52C63E11336D74
E1FB7A747A37CA25E54DEA5C35330E070C0F5FBC4571BFA22884A934C03A5D54
A1839598FF19638A362FCE61E142DF836F3488F39B3EAE03A1710D6E01F15C5F
DF6FA8DC3BBEC34B4FE5CF46101BE6D8C9904ED375C01BAB7F2613113DBF544E
2A2FE963096C7C27EC3F60EFD9BD60866766CAF1C89D77241696E081595A9563
8EDB2ABB419B0B51F217A808F581F25186A9C77598B1ADB264415554D26500C8
FF54FCEFA8219CB00A17540974AE7C66AE8AE5B262D135CC05D0037C9A29FBAC
CBFAF7562D0A93> |
3440 <001C60D8A8C9B5EE3103F2604582DD0394EC2172E91164ADCF8CD78353
7FFFC334202CCADDBCD46F532F3D2944ABB98A73D53FC5D73ABB0312077CAC82
CF8500F4979C7845FC95A095B8DF23C07700E3591FAE5BD7E5ED9A1B3FDCDA38
F8F7A2C4A8331C9BFA91EB38829985DBC2DC0033BBD6E19A654D916BAF63E5B8
78F0A4AFFC7803A625CFCCF824D73D3D13B17BD4AD441A3101D51D1A6363489D
655EFFE2079DA772AAF41D362DEA75> |
7481 <001C60D8A8C9B5EE3103A8976BABEC5B9C8FB8D09F7CF58DD37A569B5B
7A052DBCD016EC9A3B53E0B44C47F85DF90DFE3AFF5752A1394F6C42DAD47C95
C61151C08B729A9F4D1F2829D9327A42BD3BB29BD61CC5790B5624CBF6F37972
4032E1E86B2B80DE591C20A233712B2776B8E4CF26704274B6BD89C0C0785B7C
08FE45DA9B0D3F87A51D7431C9182B19F04C842BC08A024693569CAD293E825A
0AEABEDC9F5AC72485873E6DE5C69C6A889607465A9F82670E82C913A478> |
7032 <001C60D8A8C9B5EE310D1EC848450593AE4C36D61A0898A0BDADECAB27
95D4FF56CE4FB63BC19B7232D35652D1D8132909A38A03E219418D342AC2458A
0854ABEBE9FE940637B5FAD70DAF4BF50E77FD2B4659A053806301EA3D163BA3
6C917B27F354AFE00C9F3C572E089573829810989296F42AC5CD829B1C1BBE82
F451473D52A8C0974E3DD3B5360208180FDB6604685B6F0FCEFB33AEDB442F51
3A818B7D6E11E4E0A1CC70A36D8A2C675093B7267470A7985128B8AD31ABF677
049BCA4911D5FB57A1E324FDA79A6CB109147BFF6FDBCE03C816B84FF45CF03B
50571281C79449ECD26CE21FA78AF3679ECE07DD0754ED8F0C47B10649F85569
F0EE316568C9D92F57E4F47B3B5C72E157A58B57405A7AB1C99A8C6DEA0D5B7E
DD0561A8E07CE34563EAFF62C57CCD3FF4ACCF62060FE294D24D6DEEA00B9C5E
8FE97603D96ECCA48DDA0BFEC22DA9EB791938BDD6B7ECB392F62908986197DA
9753EE26873FEDEBFD5F0A95C2F076B1A53317FED5EC09D0EF9175CC870470A5
740F9F5D0AED7CAA> |
!
end
end end
%ADOEndSubsetFont
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
189.568 170.408 mo
(\015`\015pFJF\203\0359\033x)
[8.03999 7.9194 8.04001 8.04001 7.9194 0 ]xsh
%ADOBeginSubsetFont: DISKGF+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DISKGF+SimSun-GBK-EUC-H 1 GetGlyphDirectory
731 <001C60D8A8C9B5EE31025DA3FC8B05BF942C03494149153CD44A8E52E14
10E49657F32929AE85862C4E0C928A28A07E0BE6DE996ACF0FEABDBD89E6F66C
A4D802B87C0F167E35B545D0982DD7F464792179917B8E4C23EBA8BAF872D872
5E7406A3829919DC6C3F42DE113D98DB346B24EA07985D66809F9A932BC053FC
DC9D812DF03BD0E295CA7E8FEE94F23675AFCE5E110E7147EE1CB85798BEEB37
D3429E29698CF847BAB017384C6521249EE43275B0191A780D5249F8CDDDFBF8
61C37DD2D0C9A1D3C9CCEC11EE39B298819D4D2AC04040FD52911D7A0> |
!
end
end end
%ADOEndSubsetFont
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
237.568 170.408 mo
(\002\333)sh
34.4514 237.638 mo
76.9684 237.638 li
84.7984 237.638 91.1484 231.298 91.1484 223.468 cv
91.1484 215.638 84.7984 209.298 76.9684 209.298 cv
34.4514 209.298 li
26.6234 209.298 20.2774 215.638 20.2774 223.468 cv
20.2774 231.298 26.6234 237.638 34.4514 237.638 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
34.4514 237.638 mo
76.9684 237.638 li
84.7984 237.638 91.1484 231.298 91.1484 223.468 cv
91.1484 215.638 84.7984 209.298 76.9684 209.298 cv
34.4514 209.298 li
26.6234 209.298 20.2774 215.638 20.2774 223.468 cv
20.2774 231.298 26.6234 237.638 34.4514 237.638 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: DISKGF+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DISKGF+SimSun-GBK-EUC-H 2 GetGlyphDirectory
13571 <001C60D8A8C9B5EE31021BDB61D6B8606F0DE405C36E945A5FA8D796B
524802D8A464C6706247BB218E0F1493C00075429D9DA1762D7C766CB8D2784C
B3EA1C0AB76E95E789440FD39CB314A1A8DFBDEA9482B1563231EADFEA13AD24
F1F7B1DA44E6B6EB936D6418CA9AF4A27315FEF83EB752589E406403290872A3
EFF93AA7610526778F3660720C31AEE705B223A82BAE28746543B3D0F2EC882A
F7B24FE2F169DD137B414CC90CE6379D41F0599DFE1FBF2B865521360A008EC7
B23C2B585B5926BCDA96BFA51BFF2A77A3C895AC7773D0FC8E37683AD8C9D195
C90CA212BEBC7FC473B83BD8C8BF6BEC36015402F6C40B734397D5C180F705E3
30AFAA106A5BFAA556A0F57A2EDEDED41D02D8B97781BFE508104ED2E2288022
4643CAB309FA58233E4FC818D03027B> |
7567 <001C60D8A8C9B5EE310385CED50297916F530303BE072450ACFBE3B535
11CE8D17A4D7F3FEE88393972F4A52ED07BDA50CEB9B75BA45751A7A13C9087C
0DA91F776A4671EF64E00662E16FF7C1AFD906513DA81CA74E0F606E4758ED79
FE4E6DF6F795F6E17C7B4BCB7A18272ABA3F8186F36B12C37D3A047C2CE22F71
60B84F487417448645FFC4587DF5419FD0E3B0AA4721060577A291268252978D
B9CEEB4B708EB37878DB43BD5ED2265421008D97307D610AE13ECF186ECD2AFA
5F5AEF5ED8410A86431D363181ECB7AF1E69006C9D8738A01957FB2627BCC25A
1E69619C> |
!
end
end end
%ADOEndSubsetFont
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
47.7284 225.918 mo
(5\003\035\217)
[8.04 0 ]xsh
25.2384 399.218 mo
131.538 399.218 li
131.538 370.872 li
25.2384 370.872 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
25.2384 399.218 mo
131.538 399.218 li
131.538 370.872 li
25.2384 370.872 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
30.3964 387.518 mo
(\025\307\010`)
[8.04 0 ]xsh
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
46.4084 387.518 mo
(\002\304)sh
/DISKGG+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
54.3984 387.518 mo
(\000,\0003)
[3.96 0 ]xsh
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
62.4084 387.518 mo
(\002\310)sh
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
70.4084 387.518 mo
(1\037\012\023)
[8.04 0 ]xsh
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
86.4084 387.518 mo
(\002\305)sh
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
94.4084 387.518 mo
(\007\311\007\225FJF\203)
[8.03999 7.96762 8.04001 0 ]xsh
242.088 399.218 mo
348.388 399.218 li
348.388 370.872 li
242.088 370.872 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
242.088 399.218 mo
348.388 399.218 li
348.388 370.872 li
242.088 370.872 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: DISKGF+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DISKGF+SimSun-GBK-EUC-H 2 GetGlyphDirectory
1236 <001C60D8A8C9B5EE310249C3BE3A1B02B4292762B7D42D16F59C80F293
DA6BA88357D47F1F5F01BDB97433EA3C12D8A81C4DEED0B0C10DA1102E204747
A178877F28C7F4214A399F0AA3C9D0E8DAA2CD23A573AC6866DA858F62A10AD5
05928FCAE691AE84B399ABD9D4BF305B991DF82714FA54DC081CEF22F9D454F2
2CFA24C6BA31E144FE8CBE56C015A08C823321B6D9A8F56638C999D79F2EA6BB
F9D13883257698287D997E72500438248515B2E5018734C86194B4801CBD65B5
1604761F0653914C0050D79FDA449BB497060B01EEE8A53EF347BAC2A56362CA
AC7BD6532CFB9AB6759D7613A504509330B359648D75D016EA0FAFB172F107ED
EFE81AE3C96038B5307E59B3> |
7235 <001C60D8A8C9B5EE310E29E93DE7C3A1A6503E07E29E3E1A092B56FA85
63559B74A922238FA04F76024D44361AFD41D90B67240E557999A458CBB41C9C
DC6A658B902F4402E77778FB090990CBA40C6A6457858315025DD4DB1477D6F8
DBC2E0E4EBFC8B311BE12C0F514D18FDCB84BBCA607BB07E10896257587E8187
1DDFE4E5B62DE5B1DE257E828544F4E7CFA77977BF83488F52FC08CAB5DDEA3A
B44CFC1432D49A1E7B060C7314D9C39CCA200192BD208B4705F9B285E4541A92
CAC547B7FA6B03A0270B8B92FB35CE451BDA226E704967ADC7B497F61EF226BF
89F16B80937528F523C08F9C3EDBEC8ECC6C5C266512A3C8FF67CB42C5615D96
05F810F33BD70D696BEA2A53B5> |
!
end
end end
%ADOEndSubsetFont
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
263.288 387.518 mo
(\025\307\010`\004\324\034C\007\311\007\225FJF\203)
[8.04001 7.9194 8.04001 8.03998 7.9194 8.04001 8.04001 0 ]xsh
399.408 167.968 mo
452.558 153.798 li
505.708 167.968 li
452.558 182.138 li
399.408 167.968 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
399.408 167.968 mo
452.558 153.798 li
505.708 167.968 li
452.558 182.138 li
399.408 167.968 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
424.648 170.408 mo
(\004\324\034CFJF\203\0359\033x)
[8.04001 7.9194 8.04001 8.03998 7.91943 0 ]xsh
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
472.668 170.408 mo
(\002\333)sh
401.178 237.638 mo
489.768 237.638 li
503.938 209.298 li
415.358 209.298 li
401.178 237.638 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
401.178 237.638 mo
489.768 237.638 li
503.938 209.298 li
415.358 209.298 li
401.178 237.638 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
428.648 225.918 mo
(FJF\203B+\010*\004\324\034C)
[8.04001 7.9194 8.04001 8.03998 7.91943 0 ]xsh
399.408 293.138 mo
505.708 293.138 li
505.708 264.792 li
399.408 264.792 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
399.408 293.138 mo
505.708 293.138 li
505.708 264.798 li
399.408 264.798 li
399.408 293.138 li
cp
407.918 293.138 mo
407.918 264.798 li
497.208 293.138 mo
497.208 264.798 li
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: DISKGF+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DISKGF+SimSun-GBK-EUC-H 6 GetGlyphDirectory
1108 <001C60D8A8C9B5EE310DFF66D554C91AD0683705DF119FC3BCA18A05E8
CAE1C3764425A8B8A6E0BCC690F3BA9E35E4B4DA0AED3B4463A3F00B9D297B26
E567D36781327DC2E74ED57731428B06362232C13BA12FF2CBFB9BDF032247E5
43CE3DD422487F834F7823A9F787D127DD54E457A13ED5AD8609DE5BBB269E17
8D55BC15CF44188734BDA9A494094DD4662158F09A05607E1629B96C1AF06E11
21FDE802EDB4F5FEB4B88FCBD567C7B916214AB3CCAF3668B64CF872A306F891
0DCB9332B6F59F5C1C5EF16BB62F92BD27F880575DC4DE160ACDDF0B70B5050A
1EDF03AA518894532583D92C94F7C13B57B71514BB4362C32C5AC97049A1AEDE
BF2E5A5E7C5F0E92C85DF25B3295D85055974A54567760> |
12285 <001C60D8A8C9B5EE3103DB774E3374C8C43040F1493D41880DE6A1F88
3902C20FB17358BC336FAF66DBEDD7C1F4CE49D02190D6AFE0252DD6220D8885
9CCAE8C1A9BD86FB2214C3E8A42147BEF30BA4BD919D2A5A3C6E7A74B6893B48
1791FEDF5C9980EBCBDA931F57A32E6D8806BAA7F032333D25D76694E06457F0
21E3424C0A131FBAFC24E78535EAB52E710619CB152A0097494C8319C05E5976
1D1D60D92407A45613B7FFAF39D986ADED19C800E99B20266C8C9D9930B736B0
7A0439CCC3B3ED2F29F819716A540014CD9FF7384794876245C48B6A14B471B6
AE382D92A4836F47CA7D45C391698D26FE02DB933CDDE2A5F5D352226F53CB2A
C2B2D693B97DBAA7441C5A1C46CAAB80F5C0E47E7C0813F57F3D6713F24998D0
7EEA191C80C6F2B> |
1376 <001C60D8A8C9B5EE31034E2A1F4A781CEA607172280ABFF435EB4FCC05
667093623DB034320BC2D17BD30C5D7149C491FBB68A54B4DE3D999FBF26D160
B4708BC88509B68CD9F344164938EFBADF1928B5E0265FED8F7FD9177237E507
EF28C496A09534B66833C61A9BDDE84D4D0162C7BE8D58003461F53A59E1962B
866C2554807ADC33869C2231CE9C81DC70E1D45C36434D84969423019B397DA7
0D3521A5BF630FCCF80CF24F6456930BCAD88356CDE5E768F2D05634692AAADC
91AD9BAC0223BE967F0C289A3566029F27C9> |
16849 <001C60D8A8C9B5EE310D8981DA82A47F60B59E3C25C801B3478DD22CF
94A62EC8FDE7130E068A431492EA1B281B7BF0E8EF4707FF42C4F7CDFEC00C5B
5F3CEF4E58E4E1CB620AD479BDFDC0773DE18B881E21E11E4AB8C838CF787ADA
D3AD6D230739740A2C2D91D1EB51CCA24562571E76EE16A423B8DEB50B436A8C
2714A686AA6C6E5354AB5A70BEC25299D7F459204F3DA4A81D8E978B2960FD1A
E98EFF5646B5B2B0C49EE563AB79CE9FE2C296230596261E856FBF6F71D9B29F
50D> |
12743 <001C60D8A8C9B5EE3102DB03B5ABD3CD1923494E26F25E48AFC4A8961
7691FA0D291005753A84EE94525734F1F94E51AF8D4C273FE9A856AA082C387B
751362579EBBC7390E3EEEC9BD29FE2A565C40E5EBCA52BD9D507E987F25440E
7E92EB26BD83FA9963CDA9E4861915A1841E2CC024A25682F20FB2A82D86DB41
88D79BED3CD9B5BA6BE11F8658C69FB50B2F9E26A1C2C7E056312F39B9D85AC9
B164E975D88B6749CD3B740A970D1BE882C1E4BB8B49032F8F4058C0F0305A88
969D88E7E59BD4A1D0F29BACB40CEFADCA8E72F578007180DA29516AA2A54E02
0941A494D4B642FAD11F008FEB022DB7F8B1B92DDBF1DCA61291508EC1B6504F
8B863DF89B0FB8BD19143BB20F2BB72BAEC8D1DC3B3AFD6FD59243AEC6AA3B9B
BB05D1A6E4C51061AB278B30E0455E11C19374D7ECE86959BE21CCF416ED797E
AEF30F1E1AD29CDA360D91826BEB7FE01F3005DD1F98003D41BD9FB5FE9329E6
8A84C9698B32B9349AC53E886DC09CF0C63A9B6C8AEBFBEB1F129E26B442ABAF
6E9818763A1C247BF54C2382644F17555AE899B93929592F9A1F2931FCF0001A
790980F4553A7879E2ED4ADB9883BDB64> |
8965 <001C60D8A8C9B5EE31023EA3659765CA1CC7573F0D4C67C8BBCC04B503
354EFCA001568A058302C3328FCFA6C8DDF5A809E7C9BE0BA576748098B0D2F4
1A66B7105BDB6FB954E8BC112CCDC52B0474ED12B9C92B84951066F889B7D4D0
2C2151D402A7351CE3C2804DAA23EDD746E2B152E48F5DFFB60BCA03E93FC0DB
14A43AC97E4C9380695142ACB4531DEDF4688CBC651EAFCEDB2ACC32517D3D8B
76A4C11D9320A55382C3E9DADFD85FBB83DE78C0AADD1FFAFAE669401F529F16
7EC85A71F4BA72FAAAD621D112B5620C5A6FD81BD4F4251DAB52D42E12F70224
36E3776B1DA89B16BD0D456219AFABA6C935FF68BF63DB662B16E611226F8C9F
C08CDDD473FB2891F0EA662C191749746430B62012C1593B5AE82DE6475412DE
34D9D741C4D0D74D43A97DB85B7AE3A64F874A3DCF26260F2D1559C290248EA2
8A268CCCEF63303A18BA1940E6B795B9C4FF60398E35C272F57569B39B393667
218D9B68E69FB622AF150765C4CE0E178F73DC8EBC3E5FD252B59F2F89C02EF7
2221B4> |
!
end
end end
%ADOEndSubsetFont
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.064 0 0 -8.064 0 0 ]msf
428.648 281.408 mo
(\004T/\375\005`A\3211\307#\005)
[8.064 7.89468 8.064 8.01569 7.91876 0 ]xsh
399.408 348.638 mo
505.708 348.638 li
505.708 320.292 li
399.408 320.292 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
399.408 348.638 mo
505.708 348.638 li
505.708 320.292 li
399.408 320.292 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: DISKGF+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DISKGF+SimSun-GBK-EUC-H 4 GetGlyphDirectory
1553 <001C60D8A8C9B5EE3102DFD78FFE9775FBCAE29132675021C62E1A9FA9
8B60F442469D5F61A4D3B024EA1B283285BD812D93F75BB6F7371F4AFF5C06F4
90880B190493AA0102FB13E7633EC629F6D7E122C13CB4D295B72FA63445CEC3
8756AD4B22E25F26F4B15A844E7DC0056624F389F5F9BE798D80342AE8CFE1DC
D2A97B8A3858870DD5A93D70EA62C5AB5FCF74B4D80B918F1C65619916D4D1F4
018F6F5BE87745DE290D72132722FB58FCD01096011498A4A8C27A4013F061D6
CE8FBCCE675A46DF6BC31A1A8E7D05127E407A0D87375B50FA8A5033C6329670
A12CA7A47BE8256814D4872B065501C6FEDC3B238D991E287959770E9698C470
CA> |
5791 <001C60D8A8C9B5EE31021BDA9F32232A56FBB8D2B5B59029C4C24FB1E4
39D8A81E50524473E9358D320DE09D434C205C5BA156B314F7A77B064470B516
5D64BF41065A8E8A1F4A0B9398776ED045A17A44D7D85A4C3DBD7450C44017F4
749F0E295E8EBA9C356C1EA50004D4D22B3F2587721818E6E3DA733E712D87B2
F9F61396F269EFB4A33E99FC354A00DADC1271C25B72FBD4CFB0C5EA7AB294AD
D65100335C3F0BCA22A08B20115D5BAFF7B023DFA0FA5CABF84D240D5FA31ABD
8B9BD90D1CC6941F4C810C38DDF3A3FB00D1A873BEA49144974A962187C808C0
A9BD192E10CCEEC3266C9FF4881C94E0CF0ABAF8108266E402A90568F7FE8EF3
BFA197A28919E87462A705C9DF5542FDF2124BFA9CB9856890755EE8663D299D
422734BF37E896486DBF63C301E16416B2A4E13AB2D89221FCD61156202D790C
F479F3DD15F3F86215918E33909F373B3C711C0BA1EB676AAD6314C8C07CA0AF
8ACBD9944820D3A795009AF12453AA9D21212330> |
1082 <001C60D8A8C9B5EE310273E1573AA3540BDF74783AAC83340C37EF8CD3
57DFC3157416C940EC51CA66ECA91972E9A22E663DD73BF9438F04B34492326F
A34AF86CF0A63C0B3D994A16ED88> |
6357 <001C60D8A8C9B5EE3102F64252452FC55563FFA4F4DA6725452670D236
4C2B01D86341E5EE3F719B80B5D726EE21049D145EA5FDBC825B0F0002E12958
8C1A225E764F5BE940FDF885F634FBC64DB16738EB74E1E82F1DF00B007EF28A
F67FCCF1AFF58378B9E789B985F260C671D4CAB48ACB6AD80DFA41D3A17EA284
07C675BF3A1E93E546721A956A77CCC0849B3844A9EDC4E1F52082F5DE7D54FE
121DC389FDD09F5ECD75B471C5E9F9E0DB0F35C83E84569D8BE1D308B9287349
1F8A7101B068DE46862EE7F2F708F7785F2E15FC8DDBE1D0ABCD802DD17630FD
D1BBC1844D5E83B5B56530BACBCDE58FF6E7D43102FFD2399881353E8AB84847
1A4EC3F0161808A404641034D34447250F4E6F70EDD690708F69C521BA5148CD
60F82EE11F4800353DF09538315E56D486A07F946E8F6CD5C0C05DCA5CBCAB8C
D4> |
!
end
end end
%ADOEndSubsetFont
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
436.648 336.918 mo
(\006\021\026\237\004:\030\325)
[8.04001 7.9194 8.04001 0 ]xsh
.75 lw
217.508 30.7082 mo
217.508 78.0782 li
@
214.958 72.9781 mo
216.568 74.1882 217.508 76.0782 217.508 78.0782 cv
217.508 76.0782 218.458 74.1882 220.058 72.9781 cv
@
217.508 30.7082 mo
217.508 41.3382 li
55.7084 41.3382 li
55.7084 78.0782 li
@
53.1584 72.9781 mo
54.7684 74.1882 55.7084 76.0782 55.7084 78.0782 cv
55.7084 76.0782 56.6584 74.1882 58.2584 72.9781 cv
@
217.508 30.7082 mo
217.508 41.3382 li
452.558 41.3382 li
452.558 78.0782 li
@
450.008 72.9781 mo
451.618 74.1882 452.558 76.0782 452.558 78.0782 cv
452.558 76.0782 453.508 74.1882 455.108 72.9781 cv
@
55.7084 163.118 mo
55.7084 209.298 li
@
53.1584 204.198 mo
54.7684 205.398 55.7084 207.288 55.7084 209.298 cv
55.7084 207.288 56.6584 205.398 58.2584 204.198 cv
@
217.508 182.138 mo
217.508 209.298 li
@
214.958 204.198 mo
216.568 205.398 217.508 207.288 217.508 209.298 cv
217.508 207.288 218.458 205.398 220.058 204.198 cv
@
213.508 200.518 mo
221.508 200.518 li
221.508 190.918 li
213.508 190.918 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: DISKGF+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DISKGF+SimSun-GBK-EUC-H 1 GetGlyphDirectory
7263 <001C60D8A8C9B5EE3103CB5016B82D1F60F99CDBF97F22B053F818C27A
585CBC7A257809D704250A39BDFD15D43F9C2B66A146151CA820A53B626AD5EC
F5CE2EBAAD1EE26CA1CD92E525DBAA7E84A012FA2A273C4CA59086D51D1818C0
B36EB7A9F9F84EF82180CC1886F91714DBD0A447A1C866B4D7F8461A6DA8E1CA
86F234D99053810572D24A7B3F489FFB72787C35FBD0A4CA78556F95967A45CC
B50DCCE20F938BD4A47A8D397BAAC2327536E939E65EB76BC363F2A761EF1E1C
371F2AA45410B796FB2A217F23D7F0D923F2E00D14A324F3B4E9F0ADF63FEB62
F1819649E819B794C3FA7C05A2> |
!
end
end end
%ADOEndSubsetFont
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
213.568 198.158 mo
(\034_)sh
217.508 237.638 mo
217.508 264.798 li
@
214.958 259.698 mo
216.568 260.898 217.508 262.788 217.508 264.798 cv
217.508 262.788 218.458 260.898 220.058 259.698 cv
@
164.358 278.968 mo
153.728 278.968 li
153.728 167.968 li
164.358 167.968 li
@
159.258 170.518 mo
160.468 168.918 162.348 167.968 164.358 167.968 cv
162.348 167.968 160.468 167.028 159.258 165.418 cv
@
164.358 334.468 mo
78.3884 334.468 li
78.3884 370.868 li
@
75.8384 365.768 mo
77.4384 366.978 78.3884 368.868 78.3884 370.868 cv
78.3884 368.868 79.3284 366.978 80.9384 365.768 cv
@
95.5784 339.048 mo
151.578 339.048 li
151.578 329.448 li
95.5784 329.448 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: DISKGF+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DISKGF+SimSun-GBK-EUC-H 5 GetGlyphDirectory
18155 <001C60D8A8C9B5EE310213561B2646AA1533445C9AC9560F47617A2EE
90EDBCCD7E76D292D573A9BCCDE49BAA85924DD718F597F284834C55452698F6
61999E708A447640EEA5954C42D549492935B9FEB3C0AC88C8E1ABAB7F669F3F
ED679C8BACAD8077729915D9B5EDFEA0662330ADCA62A05C56018EA35F9593DC
4828B151F4C151D92F30D643B9ECB278A82BA5DEC7DCC19A5790879DF99F1A4B
97E9F6D7B8B7B9E7C2BB9FC035135C4E36C3F7BD2503F166569C403B264896BF
28375056D5D77C078B241A18382B6C8BA38C614C77210A9F3DD4ECCFE636F89A
597BA45623AD41528A429B23EBB6F24E4414597BD8313F537EC21FA058A00939
55F4EE391D614AF08E6C891762F422B05165DE563EABB8DAD89ECC2B9AE1B143
EFE37FF72979A50EA6ECCB7F24A185C5913A22D2B36CEFC3FCFB48AB934C65FC
C0025FEA298657CAB18107DAC46C4935F6106433735753A54DAC3289E3FD3B78
938655C1E20C9DAB77579D22D16F954069FCF17295B8D85F28CED3FD7BE95> |
14514 <001C60D8A8C9B5EE3102E39FC5B7AC7A841112DE2AF987764C538E48B
BC1FCF1B6C2639F32AB531545F1780D38C932ADA6AC8EA89E20DF0FD3ABEE375
2465D4FF6A17E7937F7B2F190C2D330E272A3BC50F8FD8D67CDDDB3D6F4AD8D3
1BBC2A273CA2453FBEFE86B2743C7269955755C8E61C4367E69713F32CEE580D
63C468536D4C575759715334F3CC44AC9C09E64B19E9D55B7845A15D97BEA21C
37577616FCE3DFE29C9C3758E25CB4E44B568BBBCD73ED635A8EBE08CD4E5036
7EA76646DB2074730D4> |
9961 <001C60D8A8C9B5EE31039870B7A02538711CB3206578209DD97BEBE624
9DB648C8B25BA8873270831CC3BABF3A0CE9F45E42B4CAF400094911820FC7AA
1A00FC994193A744CCF2BC5796D2B5D0856D6A8C690599524C6E25F2E2E64250
8A5400CE583579DD721591F371122F4DDE0CB2BEADFEE1C65F7052046B3E0A2F
12323BFA05AC48E4720491702DDDF9892AE3B6518B9B33EEF3B2E374D4ADE206
37ADAE1551CFC590025CF1F1A8C8CCB25E13349F58E11399EB076743EA22B7DB
E4D9633AE392EC1D3E798C437A9B70E9278000B76CF57A0D321410CD67280171
CC4E622D14CF125E32760B679C35AB23D0E6A3EF848585A52E508AA040EEC06D
D7BB0C6BE3EA232F64C2B1DA76E467B3511891E8BC02613E9393D04767A94B13
EB8BE0B7D51FF0C3A0573616293DEE6AC7D3F458BC5CDFF8B34CF52CC3089D7E> |
3342 <001C60D8A8C9B5EE3102C85A6039D1E4C613B659C88D307B9357CB776E
87479887C5E0F051E047BB9ED01B81FA5215446DE2465D6919FCE564A7C26906
B9856D9CA5730BE59951F07011BEA11EE788D38B98F3D20BAA570096BBB5861B
181ED53A5CECF57A327EF130B0A1E44B53973C3D053ABD43DF0DD26DC75D2A3C
B460B64B0160C8BEBEB143BD9B4E3324B9712BDC8F9FC7> |
16947 <001C60D8A8C9B5EE310D783A59A279FAF50225BD2C4CE1B80DF4FF0EB
3B6C8B08625948258128C3D992CDAD88843A3673C67FD7B0B125ED9715F64C9D
1B597D17C692D15A5BC09E7E4D68B46DF028AC311124A632E3CB13CE2150BE98
8A2513E4E5DE70A770C19FD369EFDC6EDD06CA29CD4965AF6E5EE3EE985B2A54
E93245B89AF8955747EFFF1BBC9424C46679C1023778F14C36E1939809AF6E49
942ABFF4C2A85629110F54E6C436A07244CFB312DA59A570112CD4D4BCF95D5C
6088D90471C357D498D0657BEBCAC848FA5E3CFE75154C8A3101A89608C8EEBE
9001E959A031055C211636D4729785C3026AA0FFD4FAC84C60E5F3BC2B1BEE98
3984ED63215D1EAC19CC728CB5D47B2DBBBD0E99164D781FE598AA9EA519931F
D477AAAB372113C9F0D65C636E9E5B18858B777D950C33372E3CE588B6309E32
C15530A382A51BA387ED0DBBADE33D547F6768D4194E45FBB95DB959142D57F1
23682F5E73DE3E28E0C936C4D3C5B> |
!
end
end end
%ADOEndSubsetFont
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
95.6084 336.708 mo
(F\3538\262&\351\015`\015p\015\016B3)
[8.03999 7.91942 8.03999 8.04001 7.9194 8.03999 0 ]xsh
[.75 1.5 ] 0 dsh
217.508 293.138 mo
217.508 320.298 li
@
[] 0 dsh
214.958 315.198 mo
216.568 316.398 217.508 318.288 217.508 320.298 cv
217.508 318.288 218.458 316.398 220.058 315.198 cv
@
452.558 182.138 mo
452.558 209.298 li
@
450.008 204.198 mo
451.618 205.398 452.558 207.288 452.558 209.298 cv
452.558 207.288 453.508 205.398 455.108 204.198 cv
@
448.558 200.518 mo
456.558 200.518 li
456.558 190.918 li
448.558 190.918 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
448.648 198.158 mo
(\034_)sh
452.558 237.638 mo
452.558 264.798 li
@
450.008 259.698 mo
451.618 260.898 452.558 262.788 452.558 264.798 cv
452.558 262.788 453.508 260.898 455.108 259.698 cv
@
452.558 293.138 mo
452.558 320.298 li
@
450.008 315.198 mo
451.618 316.398 452.558 318.288 452.558 320.298 cv
452.558 318.288 453.508 316.398 455.108 315.198 cv
@
505.708 334.468 mo
516.338 334.468 li
516.338 167.968 li
505.708 167.968 li
@
510.808 165.418 mo
509.608 167.028 507.718 167.968 505.708 167.968 cv
507.718 167.968 509.608 168.918 510.808 170.518 cv
@
314.368 237.638 mo
356.888 237.638 li
364.718 237.638 371.068 231.298 371.068 223.468 cv
371.068 215.638 364.718 209.298 356.888 209.298 cv
314.368 209.298 li
306.548 209.298 300.198 215.638 300.198 223.468 cv
300.198 231.298 306.548 237.638 314.368 237.638 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.24 lw
314.368 237.638 mo
356.888 237.638 li
364.718 237.638 371.068 231.298 371.068 223.468 cv
371.068 215.638 364.718 209.298 356.888 209.298 cv
314.368 209.298 li
306.548 209.298 300.198 215.638 300.198 223.468 cv
300.198 231.298 306.548 237.638 314.368 237.638 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
327.708 225.918 mo
(5\003\035\217)
[8.04001 0 ]xsh
.75 lw
270.658 167.968 mo
335.628 167.968 li
335.628 209.298 li
@
333.078 204.198 mo
334.688 205.398 335.628 207.288 335.628 209.298 cv
335.628 207.288 336.578 205.398 338.178 204.198 cv
@
298.238 172.998 mo
306.238 172.998 li
306.238 163.398 li
298.238 163.398 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: DISKGF+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DISKGF+SimSun-GBK-EUC-H 1 GetGlyphDirectory
2646 <001C60D8A8C9B5EE3102F2793977850BF340D4432B7B08E7E51BF94C77
6EAFC195064369B734FB96DD8BE7968E5A0F8D3FB78E2C93E5D8481CE9B1E45A
0AB573743F0A83AD3B5E8C0639E281BDD298E017FD67078F806A7C0D220631FA
F9F0367B0E0A9929E9F472B334DCE8A810635C13730BD27011BA55100C896824
9003B3EFEDA533196B5C477EB208585954104F9A67AFF598A509943599660777
FE11BECC20515FBBCC7DAE599A2F940C221BEA8E0FAA36C6395816DBA07D7191
CE8EF8692320EB6C49DE4810C1638329AB25D8501DA91199F7E2CB72F5663A94
35> |
!
end
end end
%ADOEndSubsetFont
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
298.308 170.628 mo
(\012V)sh
399.408 167.968 mo
335.628 167.968 li
335.628 209.298 li
@
333.078 204.198 mo
334.688 205.398 335.628 207.288 335.628 209.298 cv
335.628 207.288 336.578 205.398 338.178 204.198 cv
@
369.828 172.998 mo
377.828 172.998 li
377.828 163.398 li
369.828 163.398 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
369.898 170.628 mo
(\012V)sh
165.558 399.218 mo
208.068 399.218 li
215.898 399.218 222.248 392.868 222.248 385.048 cv
222.248 377.218 215.898 370.868 208.068 370.868 cv
165.558 370.868 li
157.728 370.868 151.378 377.218 151.378 385.048 cv
151.378 392.868 157.728 399.218 165.558 399.218 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.24 lw
165.558 399.218 mo
208.068 399.218 li
215.898 399.218 222.248 392.868 222.248 385.048 cv
222.248 377.218 215.898 370.868 208.068 370.868 cv
165.558 370.868 li
157.728 370.868 151.378 377.218 151.378 385.048 cv
151.378 392.868 157.728 399.218 165.558 399.218 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
178.858 387.518 mo
(5\003\035\217)
[8.03999 0 ]xsh
.75 lw
131.538 385.048 mo
151.378 385.048 li
@
146.278 387.598 mo
147.488 385.988 149.378 385.048 151.378 385.048 cv
149.378 385.048 147.488 384.098 146.278 382.498 cv
@
242.088 385.048 mo
222.248 385.048 li
@
227.348 382.498 mo
226.138 384.098 224.248 385.048 222.248 385.048 cv
224.248 385.048 226.138 385.988 227.348 387.598 cv
@
164.358 334.468 mo
217.508 320.298 li
270.658 334.468 li
217.508 348.638 li
164.358 334.468 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.24 lw
164.358 334.468 mo
217.508 320.298 li
270.658 334.468 li
217.508 348.638 li
164.358 334.468 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: DISKGF+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DISKGF+SimSun-GBK-EUC-H 2 GetGlyphDirectory
12971 <001C60D8A8C9B5EE310DDF280EDBE96C98BCD8FB074102B8AB635CE8A
5A664F480E70F67BA43922B0EFFB2099BF504575145DDBEDDB00670F3248AEFD
1AF9CBD195D76091AB645C52362F1F2BFF5EA162EACD9608A71DA0217931005C
9FAA1BFE793A88923C1586F231F1C5A9D17BBDA3F4CD9AB96AFBC72C63EE53BB
147B54B144F2A4BE6F4F1E404E7C76A12E9A1C804A7A4C2B49D3AABD0B77DB50
B50E329ABBBAECFAF4CA982C4DAA6903BE1B11482E5AC9AE84E0F30C82BB1678
DD1307A98AC6DE87E251E644871F89A23445B3DE520F87B36FF9DA0151487831
4713355FC0D4FB57F5A8AA2BD1018BD605D3622D51F6897BDD2F21E538576427
3B1135EEF49393572881037B4ED3B06075A5C82ED92B92280C36E16BF3463637
86B706FCBF2D5D6C53FD18C58F343D5EAA96B2D1D7BCD92846E75F370B10208B
5E3A8143B8B04725474C3929637C34E9C18E21B20BADEAB5A79C0D93FE5CAD2B
E25988634308F> |
3515 <001C60D8A8C9B5EE310250288C1C6F6A69B2731737A9B23946AEC5233A
801EB2C5909A5919B48208B8D8388D1B961EA304687C305C7AB916EE17125871
C6891DD1E5391693BB9CA5D6D7D748962E76572C4F9C1871C498D4A3D9ED551A
49F74AF4515410DB4B324756E4232CCA02813D944CA0B9809B5F7E53C09B20FA
E7C12C78E095E2550538AC3BB15B200CEE219FBAB31D293B1F9493B8067FCA1C
EBD8BE885AE1174E8801FF69A40FAD7F4CE306AC1C75A05FF1A134E423720DD5
B14E8BDF3A0E13C60AF519485877754B98A249D0F0A4B8112AC28A2D97A06FF0
F96ED4C980C7A49BA4D70DE25DA6862C04C4E84A8AF71747408805559BE683A4
163E2D8E83585A53D2078BFE667C6D0C88B0DC6388775478AC771780685EAE8D
03> |
!
end
end end
%ADOEndSubsetFont
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
199.548 336.918 mo
(\015\016B32\253\015\273)
[8.04001 7.9194 8.03998 0 ]xsh
%ADOBeginSubsetFont: DISKGG+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DISKGG+SimSun-GBK-EUC-H 1 GetGlyphDirectory
34 <001C60D8A8C9B7A73DB938E984D36AD527A9E9967E7AF60380BD8F864933
3E4D10B136EE9290776074AE9F4E210125445B89BADFAA64AE7BF186DF8F76A8
5C5FCC58B47248FBE37D0E98ECD7E1F80528302F57480B68BA784A0AE68511B4
B46D0BB9DF27013059504629A4826E23DB61FA652D21C08F88659C5BBFF81955
7AFBDC4F06617895B41DEC83F1CEC14B66A337D5FAF5AE789974666538D96025
96888304D4C6762C5404DB91167714866CA334006A5E600D35E199D364C2C634
1653A765F5B63F0761BCCE1E9259BF4450E51A5F9446047D87680C61945CB03E
A2A41B7D5CDCE823B2E55B7768764CA222B29F8D2A5892D7BF05432A13AC> |
!
end
end end
%ADOEndSubsetFont
/DISKGG+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
231.568 336.918 mo
(\000")sh
.75 lw
270.658 334.468 mo
295.238 334.468 li
295.238 370.868 li
@
292.688 365.768 mo
294.298 366.978 295.238 368.868 295.238 370.868 cv
295.238 368.868 296.178 366.978 297.788 365.768 cv
@
278.528 360.158 mo
310.528 360.158 li
310.528 350.558 li
278.528 350.558 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
278.578 357.828 mo
(\004\324\034C\015\016B3)
[8.04001 7.9194 8.04001 0 ]xsh
2.56141 106.428 mo
108.861 106.428 li
108.861 78.0822 li
2.56141 78.0822 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.24 lw
[0 1.2 ] 0 dsh
2.56141 106.428 mo
108.861 106.428 li
108.861 78.0822 li
2.56141 78.0822 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
[] 0 dsh
2.56141 106.428 mo
108.858 106.428 li
2.56141 78.0782 mo
108.858 78.0782 li
@
%ADOBeginSubsetFont: DISKGF+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DISKGF+SimSun-GBK-EUC-H 5 GetGlyphDirectory
2625 <001C60D8A8C9B5EE3102C0D7D28DAEAEA68F5143A0C6E2C14AB704EAA4
DF33CFDE18E81B16655DAED4A89F9A3CBFEEC23452770DC358A409FF6BF5FF46
C66D780C5CBEF9BC4F07259A60367B0B286BC8731E636F0CE812800DBDAE5B4F
0C3EEE974A5230A6649214687DD55F7F9B9B94B2C195CB88355E2FE0445E3DA2
664F31124956DCC9C05EDE22B2EB0BC5F088F1FAA1782D15CBA7CEA253155737
01FA2B0208B712D55E7C4A9277B7A65C4ED4BDC9F44779> |
2256 <001C60D8A8C9B5EE314491FDC47D27C72D7456A01D84E3679ABA30D968
A29ACD6AAD8E0DF1A0D702FD3D34F0190383490CED320E0ACFD7AB5692148560
341EB700348BCFE41FC02A60AC146DB44FF8C4F3F34E4A90197A59B7D9B050BD
922E160F2C61CF407C76C1F891999E6CC900434628B933B5C1ECD2174F83C34F
4C6E69AB6B8A565BE498B9A13ECA40B2832B1A36E048C3E3BC6D244D533DD7E8
CEF03F3BF0FCA6B6BEC82C305A7A04379D2EA962572544EAD21D9D62E20AE347
38C5D45F24B9E66336916E24C39C3C6113FDAF08D7D5707865EFCE87C9007770
AF5BF8861B> |
4598 <001C60D8A8C9B5EE310D278B80DA186E5C6DB7E15CCFEE5E893896A0FB
0B1F4F9C0CC934E8B8AE7A1E91515F404135A210638D053DF0020805E210712C
9F902EE9FE035591ABDAA036275F387314A939678E594BF5D098391DBA473B57
28D2D8EE9DAA1C63B61AF0C967813967B6B7E5401C17E6738825AD006CFA7D48
93236C0CB56C093DEF76206FFEDE868E547D327468BCE6DD550A128F80BA9575
BBC406906D5B173EC9ED18C7FA8E0A18435D6EE05D98E0A7893D2B3E19031FE2
D63E08A4500F8744E574C6DA5F7E7C0C8718E57D0E6A5F704016478C3E24B7D3
E5F37BF2B0551D161A7C9EA6131FE2E5FD7A69DAC3F53C8F4E93273D0C0DB837
522A4012DE1FB377A9B41522996C2361E437FCE32092E4068A9562484F36DD89
AF9DA1302B2686513018DA76C7DB6260445895BCA2B7739FFD685813B358D78A
AC59E45656DFF76DE39E2E73B62FF6BD96C02BDA828B4721B941BCA58F4AA08E
615310ED333994375D8B5DDEE72522DBA36D8120170E8273D2E3CE40C9C57728
321B03B5305F70D4489A79D13E56E4C497A68235BB561DD23662B2803B76CA3B
AF1100244ADA3E4ED5EF5DE3C4E9F796926B0E1DC4727577D36D7D1B84C4FA28
A28B21BCBB1EBD74390090BA80B4BF90C63EC092246846CD51AAF94CCEF4BCE8
A157844477B41E5792D323D5C5C5> |
17239 <001C60D8A8C9B5EE310DBA1EA5356A7A3030825AFF55D008D29F20CAA
61F0A5824F0F66A7CE92DA8D04263D543CD788064219CB547116D163B08F7B8C
E2124B5DCD693466036CF821FAD9E88821067108395955293991A8CBC8FE43AD
D21EC5AAE53F6BC4EA3475B0B467FD2B65664489666A6047EF663BD66771BD64
C90A555653889E23B398F28AD3DE69DEDA98FD68652188FA48B5F4AEA423C728
C262FBA78C33EFB7A30E86FB723C7989777A9534D2FAC367D6789F1F4024EECD
5613EFDFA66745B68649BB0AA315DBB06C8BFF8A93D4CC0E9F734796F6C630F4
98228A7B010C6601EF1AB069C9B04B330B30BA02581363F9C980D9B3B8C73899
AFEA202BC7E888964DF5F4FD1542EA57BF2E48B92CE90B27F3E117AF104B5300
3385E9F43E414C0C96DBF6F3FDAA227819E4254EA9FCE66C181D6FB1D059A119
280081F55B825DF96F697F91D9941A410DAAE03469AF20DDDB98C560F0BE387D
413E6CBDEF2774E0F8BF6> |
5169 <001C60D8A8C9B5EE3103EE1639224BDE4B4C51CD225ED083F0B67CFDBB
8902CE44660AD673A522142E3571F7C9BEDD236B0BD20818D009CF7EDB674CFF
8AF3D8264261E479A7271EA3991C6CE44F6C6FB8B2A17E1EF8065AD66126AD57
E97DE7572686B2908EEDFBFF290942B471138EF55A6D33856938EF5FC246FAAE
1CD36A4E04B4202FE888ECE8E1E3F29725865720A0FCB5CE21B4F387F27B0501
858E201E5D184EB0> |
!
end
end end
%ADOEndSubsetFont
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
5.72441 94.6882 mo
(\012A\010\320\021\366CW\0241)
[8.04 7.91941 8.04 8.03999 0 ]xsh
%ADOBeginSubsetFont: DISKGG+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DISKGG+SimSun-GBK-EUC-H 3 GetGlyphDirectory
39 <001C60D8A8C9B7A73DB9C530A911993F5F0F963DBD4138909D2A91F47A2F
AEE044110870DBA5E81BE74AE075AFAD57FFF392DCDFE49F56F14C5997693546
A7A50BF7A6492C33E08DB002146761DC55B352B36EF258B251415C32DECF07D2
ECC461958AECE5F3569DA3B96D0FAE3139B61939702C4C2402F375315812A98D
E30AB3231C9A686B7958441FE5E0F7639D2B0E4757B0F11535C77D> |
49 <001C60D8A8C9B7A73DB93195A86F52FD7D9C2F46D3FA2E27C4D24800770C
533F8FDB0AA36F3C1E93160F91A509B1A9F5614C6ECB93756B7DF7665152CAA4
54E77552C6E740ED8DAD365EDF86BD0CE9BFA648F3C363D015EAD09D758720A8
1C1FC14BA91B4AD13685AB4A696A6F97AE0FE70C8BCB5F459F6BCEDD6F128470
3E3B632320982FEA4989C9B8> |
54 <001C60D8A8C9B7A73DB9D42B5CFCEC7F01981AFE517801773FF8AAF15E7C
4CB81154613C5FD1D562CDDE0EE4B2DAF879E403D864479CE189144ADF8E91EE
92B02765232E00139453EA1282D56AFE97EA9944DCEFDCA33912CFC91F718CF3
8695EB5A489DB0F386655B77C93690B3CBA172BCF76AEA68C342A5AB080E96A1
B7F4FF7B91F4DC4899DAAB0BFA5518431FA6DD33F2B7B3F167C016858873F122
28ADBBB7B15314E534A36AD4CB224A2D0B1287F28FF844C6570FD53B740AFC97
655868483C6FED558A5D1250F9D6D1D2E8961E60B1743758E5F657FB6C585A09
A0464FA3> |
!
end
end end
%ADOEndSubsetFont
/DISKGG+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
45.7324 94.6882 mo
(\000'\0001\0006)
[3.96372 4.06824 0 ]xsh
%ADOBeginSubsetFont: DISKGF+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DISKGF+SimSun-GBK-EUC-H 4 GetGlyphDirectory
14823 <001C60D8A8C9B5EE310DF071C3C44EDECB8DE7A1F5C79DC5D531DD127
641965C68D69D70D2D403063FF405892DD6118A130480A1BF9964F6C9122A49D
1998A2418736332AE93BCCEDE2FC56C355D9D80940049E1D10CB3C3F37490941
B1526199510CBBD7A2C35A5AC47552CCFD9E9C45847E52DE0F6A63FED5BC0156
F95C6C579E34376D556FA060120C822E77B016CC1D61242883F7153884AE397D
0C2B7E6E07CFE104B2607E4FF21B1B84FC0C11076FE899BDC016ACCAE52E2195
322FE5E0D179C791E3EC11942094010C417630700CE18ACA11839631E0C26865
B725A0373134794B0F6F4CCA2A193F0DCBB17196C9E0355A2D8C7C5BD21EB45C
B3574065C088A9DE338C32E54249D1C65808E0C830E0703510FF45997B748447
3961E251719CC256C42D2D3CB55B4FFF4B4B5C7B4D973160D0C0B8693CE9CE57
0563B12E825ABD5742E1FA58FEFD3D8B4DA78451B5EAE9B94798D1CF7E38767B
E60CBBE6578B4C2C9C2C35F072A563924D893E04127F8F4EEBFF0DFF6A3B4C3B
292CC79A77D46DF410EEBBA0A095E4EA64F05C46635659D> |
2566 <001C60D8A8C9B5EE31023EAC3A51772F16EC49C5B0AE161A8317B2C8AD
7B34929E58612742842FA694BB60002C2DD05220F1C4C3C6C4B098B9DCF18D23
6EB21FAC48FE7B65AF85A82D5859D948BF87B3E84834743CF0B31B0B526DE1A8
54D7CE974B5D343C7EF81141AF0C9DB52CFCBA7F0E45CD8D35C03B9BBC4B8AD9
E6CB76943CC95846E39129FA13DC83D2D5280CB7EA00B23613467DDA55E7673E
187A3C49AA319A0A45EB02CA9C217F41B2AF19411D81437B2114AECE3E6C7BD5
F7BB97523DA795637E7D078F65721F2379EC3BF8A9534E1A3ECA6E987616098A
8CCFADC0D2F44D88BE07FD92E288> |
2125 <001C60D8A8C9B5EE31024001085D3F8FACA0323998602B4B8E9BEA635A
626339136B3D7C86545B4620B1F994B323D1C8D279C6D6B5AB5E8CC78574DFA1
5FD19298937C337113CFEAD6FB9ECFE682F8E48BAD3D68CF2E18044EA5FC8724
911E682AE91CAFEA0890E99B2435BFBE79CE1EBB845D80EE23C4CC87129CED72
4441C3400D64E493F4D90B33449A3296B9661580274BD9931472C71D972B034B
D17D0D32C276740E0750E61930FEBDFFEEAF9F7A799472E9FDE0B0A97E02454E
4B3EAD8033762761CDD7BB9F609D447B1D39109CAE77395BCAD9D2DB455EB54A
C57C15B141DAA1C9ECF353B431305498D937EB55F9077BF7E253B087DD7AC6E8
BBE2B067F33458B83CB35C1CBE4D36CE19937221117B924DA44E7F56C9727B6F
28CAB51A960A7A4D7D12CB34375EAA376FEFBDC84D7E5DDEC90FE73604C2EFA9
A627A409FFE8FA157BD13E> |
4091 <001C60D8A8C9B5EE310337A65A5C610450C7A7B9E7423A4A6766841406
7CD2833C419647E421CDC34BEFA9A1C2F875A5110B2364A1B1ED344D700F54B3
29A3B0E5422D8013C73BC1B587D695C79774475D62D4B1377897ABA576AC218E
30B1C689B7878CC566489484C88502CDF894C48AFDA243A8040F4969C938E75D
CEC1CE1D3CA8818C88725638BC1969354669E384402CCCD6244BB8CEF0218068
571119F5B2B708EB37390E6FB303C3D73091B97E95F23F67C200FC3AD25952EF
858E6485A7CC2996925701E74234D3DCE03948807FDCA22504951EE5157A58A2
13176B166ACBDB1EBF08B0CA105A3FADFFF196D54689F4A378E9F6FCA0B10F8C
53C16ACE5EFE744F5CBB7BCE4CA5B86E641B21A8657F9CEFE2C757532BA2A33B
F4DD6FA29FCCF8ECF5D881D46804B4CE3AED489EE51F51CEE7746009267C8499
4D90DADC89973E699172664DB8478CF9D4566B59DE7C3E6B7835D5AC118A316A
6472519977> |
!
end
end end
%ADOEndSubsetFont
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
57.7284 94.6882 mo
(9\347\012\006\010M\017\3738\262&\351)
[8.04 7.9194 8.04 8.04001 7.9194 0 ]xsh
.75 lw
55.7084 106.428 mo
55.7084 134.778 li
@
53.1584 129.678 mo
54.7684 130.878 55.7084 132.768 55.7084 134.778 cv
55.7084 132.768 56.6584 130.878 58.2584 129.678 cv
@
164.358 106.428 mo
270.658 106.428 li
270.658 78.0822 li
164.358 78.0822 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.24 lw
[0 1.2 ] 0 dsh
164.358 106.428 mo
270.658 106.428 li
270.658 78.0822 li
164.358 78.0822 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
[] 0 dsh
164.358 106.428 mo
270.658 106.428 li
164.358 78.0782 mo
270.658 78.0782 li
@
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
185.558 94.6882 mo
(\012_\010\330)
[8.03999 0 ]xsh
/DISKGG+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
201.568 94.6882 mo
(\0003\000H\000H\000U)
[3.96373 4.06824 3.96371 0 ]xsh
%ADOBeginSubsetFont: DISKGF+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DISKGF+SimSun-GBK-EUC-H 2 GetGlyphDirectory
2431 <001C60D8A8C9B5EE310226F95185CA5EB457DCE66611B59813142C7922
6D44F1B012CDFE00FF5A181175713B3E0616EC88237F6FF3D9222D35BB7E0C9F
31F9AA44B419F5180251CB8CE00D558CBA94E8CE8ED556D25B150C6899B31043
E60852B6C468EE0C47959902378C4607651A272A1E6E1513DE5877909F47F204
5FF2A32485DCC2F911F1ED498B08809A2D95FB964BF143737722FA6D3A7A2218
5E91933F31A6F53CAEAFFA6F5DD989AAF63DB511B272EE2FA7E1061FB20CE1F1
B39A66F3C27D145044C56A9532C431FEB1BC6AE3822572303C0F6B9CBF440CC3
226D452D4CE1C0B8E0AA48C7935F41A2849120C1BFA7FCDA2A8D0C0E0B36FE61
A687ECD7BEEF420BE4E28E2D10106EEFFBD5F61540BEF48669BA0C70B485F64A
E866B9DDB8632838AFDB0A16B850C02CBCC6CDAC50D89ABAA294BFE55BBF573D
0DF1> |
12347 <001C60D8A8C9B5EE310296A92A79A8656DFE29C763CF4E0039F6E2E64
BA358B6A368976A1ADA939015C652F48A51F24A87EEA92F46BA8FAB8E1617252
2D525DD8CC8892A53C8CBE743F92512B16BF8DFBC9D23067D742CD5A01C6E105
35BD88DA16E69C104BF70AD4A6E3DBF9920CC5320C35354079525B9CBFFF9B3D
CEB607C8C4275268378371ECFFE161A398FFD452EBADE275EA88429423171605
0F90DD51CFA05D53CDAC634E00FCCC0461F59C6CFCB6176CCE41657B21ABDD48
E74D47DCDCF2A8A87FE49B020C81B40849F313219257AF427A322184402B077F
893BEFDCE246C032C0DC13DBB45FDDFE792BC7ABECB8C04530E4F2AC17B868A1
2FCE5D2EBD7CF07175891E998F2EEE2F2F63E71B0E78F689B4DC2DBA989BE908
C3AB5A819EBB8C8EBF5C5891BC2A43F685BC17DF7353EFACDB6E9A3C44F30CA2
40D656CA6F9B8D63542> |
!
end
end end
%ADOEndSubsetFont
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
217.548 94.6882 mo
(\010K\025*\011\1770;)
[8.04001 7.96762 8.03998 0 ]xsh
.75 lw
217.508 106.428 mo
217.508 153.798 li
@
214.958 148.698 mo
216.568 149.898 217.508 151.788 217.508 153.798 cv
217.508 151.788 218.458 149.898 220.058 148.698 cv
@
399.408 106.428 mo
505.708 106.428 li
505.708 78.0822 li
399.408 78.0822 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.24 lw
[0 1.2 ] 0 dsh
399.408 106.428 mo
505.708 106.428 li
505.708 78.0822 li
399.408 78.0822 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
[] 0 dsh
399.408 106.428 mo
505.708 106.428 li
399.408 78.0782 mo
505.708 78.0782 li
@
%ADOBeginSubsetFont: DISKGF+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DISKGF+SimSun-GBK-EUC-H 2 GetGlyphDirectory
3892 <001C60D8A8C9B5EE3102603E2E58CA84251A9593169BED5D4BF3DB54BE
3D43A6D54FB6157073936252CFEE5F4CE0D197F8CF3A97640DCAF8D0FBBF352C
F82AD85E2BEDD2D4EC766110D8E7A27879788020BF1B3905A7CEAD3BB0254A35
B5960AFD808144FEEC6740FBD6D639B2928767DF9CB7580A0AB2A3C3CA45B697
66C4E19DD65A7C505A75CFF7B20D928380644870ED2DDDE3130EAC04E4F966EC
28A360D68AEFA8D31341B0431DD5589858D4B4FFFD84D8E0995A67C3905884A0
7CD9BDA3502C9EA6457A0560E9BB2161D6D196A223A95CEB0F6CCE13C38036A8
B88229E0FEBEFCF4F4EC6A6F957224ED2B925F5D012C461A1F2E4B3ABC20D2C1
9AE3DA1B33A3C2E10CFE9810AA4DEC18E4> |
10806 <001C60D8A8C9B5EE3117BF1EBEBB6E3E48EB585396D2980FF6078D3F7
088F84A35F07FAC0D26753DB2A217E0DCFE8AD1BD4F76EC054213942CC60C5FE
9F02076D7D19FD45F76F1312867612935353A164EB2AF84A59C9E21F3010ED26
F3E48EE20AD7948BB2262A1DBAFBA05D3E411441F76E92BD34ED394812D5D4F4
04823B3E0B6E973D9B9B4D8D3109AD12AD8BF1DEF7AD716969A30D1B47D2F529
B53DDEAEB28DDD5C8566FAD3E6B9558775034F113216C28B1AEEFDC0A207BEB8
72BBE17FEBEA9A30B3828D8C60ADA4E4B33CF614F47BC0BCE3839DF1AFBA2871
D95B893CE36E00BDA79345AB5F7699F369623BA2EA74526907C83C6456A97A7B
21E826C944E212FFCB87D8453A0472B226CF5B0FDF12238E9> |
!
end
end end
%ADOEndSubsetFont
/DISKGF+SimSun-GBK-EUC-H-Identity-H findfont [8.04 0 0 -8.04 0 0 ]msf
404.648 94.6882 mo
(\012_\010\330\004\324\034C\006\021\026\237\0174*6\004:\030\325\011\1770;)
[8.04001 7.9194 8.04001 8.03998 7.9194 8.04001 8.03998 7.91943 8.03998 8.04004 7.91937 0 
]xsh
.75 lw
452.558 106.428 mo
452.558 153.798 li
@
450.008 148.698 mo
451.618 149.898 452.558 151.788 452.558 153.798 cv
452.558 151.788 453.508 149.898 455.108 148.698 cv
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/DISKGF+SimSun-GBK-EUC-H-Identity-H uf
/DISKGF+SimSun-GBK-EUC-H /CIDFont ur
/DISKGG+SimSun-GBK-EUC-H-Identity-H uf
/DISKGG+SimSun-GBK-EUC-H /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
